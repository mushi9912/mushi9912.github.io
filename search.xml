<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>mybatis与mysql的Json格式映射-使用JSONObject</title>
    <url>/mybatis-json/</url>
    <content><![CDATA[<h1 id="mybatis与mysql的Json格式映射-使用JSONObject"><a href="#mybatis与mysql的Json格式映射-使用JSONObject" class="headerlink" title="mybatis与mysql的Json格式映射-使用JSONObject"></a>mybatis与mysql的Json格式映射-使用JSONObject</h1><p>JavaBean类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShareClose</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String tsCode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> JSONObject close;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>typeHandler</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.BaseTypeHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.JdbcType;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.MappedJdbcTypes;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.MappedTypes;</span><br><span class="line"><span class="keyword">import</span> java.sql.CallableStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Description;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@MappedTypes</span>(JSONObject<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">MappedJdbcTypes</span>(<span class="title">JdbcType</span>.<span class="title">LONGVARCHAR</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">JsonObjectTypeHandler</span> <span class="keyword">extends</span> <span class="title">BaseTypeHandler</span>&lt;<span class="title">JSONObject</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置非空参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ps</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parameter</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jdbcType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNonNullParameter</span><span class="params">(PreparedStatement ps, <span class="keyword">int</span> i, JSONObject parameter, JdbcType jdbcType)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        ps.setString(i, String.valueOf(parameter.toJSONString()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据列名，获取可以为空的结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rs</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> columnName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JSONObject <span class="title">getNullableResult</span><span class="params">(ResultSet rs, String columnName)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        String sqlJson = rs.getString(columnName);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != sqlJson)&#123;</span><br><span class="line">            <span class="keyword">return</span> JSONObject.parseObject(sqlJson);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据列索引，获取可以为空的结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rs</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> columnIndex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JSONObject <span class="title">getNullableResult</span><span class="params">(ResultSet rs, <span class="keyword">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        String sqlJson = rs.getString(columnIndex);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != sqlJson)&#123;</span><br><span class="line">            <span class="keyword">return</span> JSONObject.parseObject(sqlJson);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JSONObject <span class="title">getNullableResult</span><span class="params">(CallableStatement cs, <span class="keyword">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        String sqlJson = cs.getString(columnIndex);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != sqlJson)&#123;</span><br><span class="line">            <span class="keyword">return</span> JSONObject.parseObject(sqlJson);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>mapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"ResultMapWithBLOBs"</span> <span class="attr">type</span>=<span class="string">"com.ms.quanplat.bean.ShareClose"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">idArg</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">javaType</span>=<span class="string">"java.lang.Integer"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">arg</span> <span class="attr">column</span>=<span class="string">"ts_code"</span> <span class="attr">javaType</span>=<span class="string">"java.lang.String"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">arg</span> <span class="attr">column</span>=<span class="string">"close"</span> <span class="attr">javaType</span>=<span class="string">"com.alibaba.fastjson.JSONObject"</span> <span class="attr">jdbcType</span>=<span class="string">"LONGVARCHAR"</span> <span class="attr">typeHandler</span>=<span class="string">"com.ms.quanplat.config.handler.JsonObjectTypeHandler"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>最后不要忘记在配置文件中配置handler的包路径</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-handlers-package:</span> <span class="string">com.ms.quanplat.config.handler</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MyBatis</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Java查漏补缺(一)</title>
    <url>/javafillgaps/</url>
    <content><![CDATA[<h1 id="Java查漏补缺"><a href="#Java查漏补缺" class="headerlink" title="Java查漏补缺"></a>Java查漏补缺</h1><h2 id="一、基础模块"><a href="#一、基础模块" class="headerlink" title="一、基础模块"></a>一、基础模块</h2><h4 id="1-JDK-和-JRE-有什么区别？"><a href="#1-JDK-和-JRE-有什么区别？" class="headerlink" title="1.JDK 和 JRE 有什么区别？"></a>1.JDK 和 JRE 有什么区别？</h4><ul>
<li>JDK：Java Development Kit 的简称，java 开发工具包，提供了 java 的开发环境和运行环境。</li>
<li>JRE：Java Runtime Environment 的简称，java 运行环境，为 java 的运行提供了所需环境。</li>
</ul>
<p>具体来说 JDK 其实包含了 JRE，同时还包含了编译 java 源码的编译器 javac，还包含了很多 java  程序调试和分析的工具。简单来说：如果你需要运行 java 程序，只需安装 JRE 就可以了，如果你需要编写 java 程序，需要安装 JDK。</p>
<a id="more"></a>

<h4 id="2-和-equals-的区别是什么？"><a href="#2-和-equals-的区别是什么？" class="headerlink" title="2.== 和 equals 的区别是什么？"></a>2.== 和 equals 的区别是什么？</h4><p><strong>== 解读</strong></p>
<p>对于基本类型和引用类型 == 的作用效果是不同的，如下所示：</p>
<ul>
<li>基本类型：比较的是值是否相同；</li>
<li>引用类型：比较的是引用是否相同；</li>
</ul>
<p>== 对于基本类型来说是值比较，对于引用类型来说是比较的是引用；而 equals 默认情况下是引用比较，只是很多类重写了 equals 方法，比如 String、Integer 等把它变成了值比较，所以一般情况下 equals 比较的是值是否相等。</p>
<h4 id="3-两个对象的-hashCode-相同，则-equals-也一定为-true，对吗？"><a href="#3-两个对象的-hashCode-相同，则-equals-也一定为-true，对吗？" class="headerlink" title="3.两个对象的 hashCode()相同，则 equals()也一定为 true，对吗？"></a>3.两个对象的 hashCode()相同，则 equals()也一定为 true，对吗？</h4><p>很显然“通话”和“重地”的 hashCode() 相同，然而 equals() 则为 false，因为在散列表中，hashCode()相等即两个键值对的哈希值相等，然而哈希值相等，并不一定能得出键值对相等。</p>
<h4 id="4-final-在-java-中有什么作用？"><a href="#4-final-在-java-中有什么作用？" class="headerlink" title="4.final 在 java 中有什么作用？"></a>4.final 在 java 中有什么作用？</h4><ul>
<li>final 修饰的类叫最终类，该类不能被继承。</li>
<li>final 修饰的方法不能被重写。</li>
<li>final 修饰的变量叫常量，常量必须初始化，初始化之后值就不能被修改。</li>
</ul>
<h4 id="5-java-中的-Math-round-1-5-等于多少？"><a href="#5-java-中的-Math-round-1-5-等于多少？" class="headerlink" title="5.java 中的 Math.round(-1.5) 等于多少？"></a>5.java 中的 Math.round(-1.5) 等于多少？</h4><p>等于 -1，加0.5向下取整</p>
<h4 id="6-String-属于基础的数据类型吗？"><a href="#6-String-属于基础的数据类型吗？" class="headerlink" title="6.String 属于基础的数据类型吗？"></a>6.String 属于基础的数据类型吗？</h4><p>String 不属于基础类型，基础类型有 8 种：byte、boolean、char、short、int、float、long、double，而 String 属于对象。</p>
<h4 id="7-java-中操作字符串都有哪些类？它们之间有什么区别？"><a href="#7-java-中操作字符串都有哪些类？它们之间有什么区别？" class="headerlink" title="7.java 中操作字符串都有哪些类？它们之间有什么区别？"></a>7.java 中操作字符串都有哪些类？它们之间有什么区别？</h4><p>操作字符串的类有：String、StringBuffer、StringBuilder。</p>
<p>String 和 StringBuffer、StringBuilder 的区别在于 String  声明的是不可变的对象，每次操作都会生成新的 String 对象，然后将指针指向新的 String 对象，而  StringBuffer、StringBuilder 可以在原有对象的基础上进行操作，所以在经常改变字符串内容的情况下最好不要使用  String。</p>
<p><strong>String每次+操作 ： 隐式在堆上new了一个跟原字符串相同的StringBuilder对象，再调用append方法 拼接+后面的字符。</strong></p>
<p>StringBuffer 和 StringBuilder 最大的区别在于，StringBuffer 是线程安全的，而  StringBuilder 是非线程安全的，但 StringBuilder 的性能却高于 StringBuffer，所以在单线程环境下推荐使用  StringBuilder，多线程环境下推荐使用 StringBuffer。</p>
<h4 id="8-String-str-”i”与-String-str-new-String-“i”-一样吗？"><a href="#8-String-str-”i”与-String-str-new-String-“i”-一样吗？" class="headerlink" title="8.String str=”i”与 String str=new String(“i”)一样吗？"></a>8.String str=”i”与 String str=new String(“i”)一样吗？</h4><p>不一样，因为内存的分配方式不一样。String str=”i”的方式，java 虚拟机会将其分配到常量池中；而 String str=new String(“i”) 则会被分到堆内存中。</p>
<h4 id="9-如何将字符串反转？"><a href="#9-如何将字符串反转？" class="headerlink" title="9.如何将字符串反转？"></a>9.如何将字符串反转？</h4><p>使用 StringBuilder 或者 stringBuffer 的 reverse() 方法。</p>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// StringBuffer reverse</span></span><br><span class="line">StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">stringBuffer.append(<span class="string">"abcdefg"</span>);</span><br><span class="line">System.out.println(stringBuffer.reverse()); <span class="comment">// gfedcba</span></span><br><span class="line"><span class="comment">// StringBuilder reverse</span></span><br><span class="line">StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">stringBuilder.append(<span class="string">"abcdefg"</span>);</span><br><span class="line">System.out.println(stringBuilder.reverse()); <span class="comment">// gfedcba</span></span><br></pre></td></tr></table></figure>

<h4 id="10-String-类的常用方法都有那些？"><a href="#10-String-类的常用方法都有那些？" class="headerlink" title="10.String 类的常用方法都有那些？"></a>10.String 类的常用方法都有那些？</h4><ul>
<li>indexOf()：返回指定字符的索引。</li>
<li>charAt()：返回指定索引处的字符。</li>
<li>replace()：字符串替换。</li>
<li>trim()：去除字符串两端空白。</li>
<li>split()：分割字符串，返回一个分割后的字符串数组。</li>
<li>getBytes()：返回字符串的 byte 类型数组。</li>
<li>length()：返回字符串长度。</li>
<li>toLowerCase()：将字符串转成小写字母。</li>
<li>toUpperCase()：将字符串转成大写字符。</li>
<li>substring()：截取字符串。</li>
<li>equals()：字符串比较。</li>
</ul>
<h4 id="11-抽象类必须要有抽象方法吗？"><a href="#11-抽象类必须要有抽象方法吗？" class="headerlink" title="11.抽象类必须要有抽象方法吗？"></a>11.抽象类必须要有抽象方法吗？</h4><p>不需要，抽象类不一定非要有抽象方法。</p>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sayHi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hi~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码，抽象类并没有抽象方法但完全可以正常运行。</p>
<h4 id="12-普通类和抽象类有哪些区别？"><a href="#12-普通类和抽象类有哪些区别？" class="headerlink" title="12.普通类和抽象类有哪些区别？"></a>12.普通类和抽象类有哪些区别？</h4><ul>
<li>普通类不能包含抽象方法，抽象类可以包含抽象方法。</li>
<li>抽象类不能直接实例化，普通类可以直接实例化。</li>
</ul>
<h4 id="13-抽象类能使用-final-修饰吗？"><a href="#13-抽象类能使用-final-修饰吗？" class="headerlink" title="13.抽象类能使用 final 修饰吗？"></a>13.抽象类能使用 final 修饰吗？</h4><p>不能，定义抽象类就是让其他类继承的，如果定义为 final 该类就不能被继承，这样彼此就会产生矛盾，所以 final 不能修饰抽象类</p>
<h4 id="14-接口和抽象类有什么区别？"><a href="#14-接口和抽象类有什么区别？" class="headerlink" title="14.接口和抽象类有什么区别？"></a>14.接口和抽象类有什么区别？</h4><ul>
<li>实现：抽象类的子类使用 extends 来继承；接口必须使用 implements 来实现接口。</li>
<li>构造函数：抽象类可以有构造函数；接口不能有。</li>
<li>main 方法：抽象类可以有 main 方法，并且我们能运行它；接口不能有 main 方法。</li>
<li>实现数量：类可以实现很多个接口；但是只能继承一个抽象类。</li>
<li>访问修饰符：接口中的方法默认使用 public 修饰；抽象类中的方法可以是任意访问修饰符。</li>
</ul>
<h4 id="15-java-中-IO-流分为几种？"><a href="#15-java-中-IO-流分为几种？" class="headerlink" title="15.java 中 IO 流分为几种？"></a>15.java 中 IO 流分为几种？</h4><p>按功能来分：输入流（input）、输出流（output）。</p>
<p>按类型来分：字节流和字符流。</p>
<p>字节流和字符流的区别是：字节流按 8 位传输以字节为单位输入输出数据，字符流按 16 位传输以字符为单位输入输出数据。</p>
<h4 id="16-BIO、NIO、AIO-有什么区别？"><a href="#16-BIO、NIO、AIO-有什么区别？" class="headerlink" title="16.BIO、NIO、AIO 有什么区别？"></a>16.BIO、NIO、AIO 有什么区别？</h4><ul>
<li>BIO：Block IO 同步阻塞式 IO，就是我们平常使用的传统 IO，它的特点是模式简单使用方便，并发处理能力低。</li>
<li>NIO：New IO 同步非阻塞 IO，是传统 IO 的升级，客户端和服务器端通过 Channel（通道）通讯，实现了多路复用。</li>
<li>AIO：Asynchronous IO 是 NIO 的升级，也叫 NIO2，实现了异步非堵塞 IO ，异步 IO 的操作基于事件和回调机制。</li>
</ul>
<h4 id="17-Files的常用方法都有哪些？"><a href="#17-Files的常用方法都有哪些？" class="headerlink" title="17.Files的常用方法都有哪些？"></a>17.Files的常用方法都有哪些？</h4><ul>
<li>Files.exists()：检测文件路径是否存在。</li>
<li>Files.createFile()：创建文件。</li>
<li>Files.createDirectory()：创建文件夹。</li>
<li>Files.delete()：删除一个文件或目录。</li>
<li>Files.copy()：复制文件。</li>
<li>Files.move()：移动文件。</li>
<li>Files.size()：查看文件个数。</li>
<li>Files.read()：读取文件。</li>
<li>Files.write()：写入文件。</li>
</ul>
<h2 id="二、容器"><a href="#二、容器" class="headerlink" title="二、容器"></a>二、容器</h2><h4 id="18-java-容器都有哪些？"><a href="#18-java-容器都有哪些？" class="headerlink" title="18. java 容器都有哪些？"></a>18. java 容器都有哪些？</h4><p><strong>常用容器的图录：</strong></p>
<p><img src="https://img-blog.csdnimg.cn/20190317184953342.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NoYWRvd196ZWQ=,size_16,color_FFFFFF,t_70" alt="img"></p>
<h4 id="19-Collection-和-Collections-有什么区别？"><a href="#19-Collection-和-Collections-有什么区别？" class="headerlink" title="19. Collection 和 Collections 有什么区别？"></a>19. Collection 和 Collections 有什么区别？</h4><ul>
<li>java.util.Collection  是一个集合接口（集合类的一个顶级接口）。它提供了对集合对象进行基本操作的通用接口方法。Collection接口在Java  类库中有很多具体的实现。Collection接口的意义是为各种具体的集合提供了最大化的统一操作方式，其直接继承接口有List与Set。</li>
<li>Collections则是集合类的一个工具类/帮助类，其中提供了一系列静态方法，用于对集合中元素进行排序、搜索以及线程安全等各种操作。</li>
</ul>
<h4 id="20-List、Set、Map-之间的区别是什么？"><a href="#20-List、Set、Map-之间的区别是什么？" class="headerlink" title="20. List、Set、Map 之间的区别是什么？"></a>20. List、Set、Map 之间的区别是什么？</h4><p><img src="https://img-blog.csdnimg.cn/20190317185014560.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NoYWRvd196ZWQ=,size_16,color_FFFFFF,t_70" alt="img"></p>
<h4 id="21-HashMap-和-Hashtable-有什么区别？"><a href="#21-HashMap-和-Hashtable-有什么区别？" class="headerlink" title="21. HashMap 和 Hashtable 有什么区别？"></a>21. HashMap 和 Hashtable 有什么区别？</h4><ul>
<li>hashMap去掉了HashTable 的contains方法，但是加上了containsValue（）和containsKey（）方法。</li>
<li>hashTable同步的，而HashMap是非同步的，效率上比hashTable要高。</li>
<li>hashMap允许空键值，而hashTable不允许。</li>
</ul>
<h4 id="22-如何决定使用-HashMap-还是-TreeMap？"><a href="#22-如何决定使用-HashMap-还是-TreeMap？" class="headerlink" title="22. 如何决定使用 HashMap 还是 TreeMap？"></a>22. 如何决定使用 HashMap 还是 TreeMap？</h4><p>对于在Map中插入、删除和定位元素这类操作，HashMap是最好的选择。然而，假如你需要对一个有序的key集合进行遍历，TreeMap是更好的选择。基于你的collection的大小，也许向HashMap中添加元素会更快，将map换为TreeMap进行有序key的遍历。</p>
<h4 id="23-说一下-HashMap-的实现原理？"><a href="#23-说一下-HashMap-的实现原理？" class="headerlink" title="23. 说一下 HashMap 的实现原理？"></a>23. 说一下 HashMap 的实现原理？</h4><p>HashMap概述： HashMap是基于哈希表的Map接口的非同步实现。此实现提供所有可选的映射操作，并允许使用null值和null键。此类不保证映射的顺序，特别是它不保证该顺序恒久不变。 </p>
<p>HashMap的数据结构： 在java编程语言中，最基本的结构就是两种，一个是数组，另外一个是模拟指针（引用），所有的数据结构都可以用这两个基本结构来构造的，HashMap也不例外。HashMap实际上是一个“链表散列”的数据结构，即数组和链表的结合体。</p>
<p>当我们往Hashmap中put元素时,首先根据key的hashcode重新计算hash值,根绝hash值得到这个元素在数组中的位置(下标),如果该数组在该位置上已经存放了其他元素,那么在这个位置上的元素将以链表的形式存放,新加入的放在链头,最先加入的放入链尾.如果数组中该位置没有元素,就直接将该元素放到数组的该位置上。</p>
<p>需要注意Jdk 1.8中对HashMap的实现做了优化,当链表中的节点数据超过八个之后,该链表会转为红黑树来提高查询效率,从原来的O(n)到O(logn)</p>
<h4 id="24-说一下-HashSet-的实现原理？"><a href="#24-说一下-HashSet-的实现原理？" class="headerlink" title="24. 说一下 HashSet 的实现原理？"></a>24. 说一下 HashSet 的实现原理？</h4><ul>
<li>HashSet底层由HashMap实现</li>
<li>HashSet的值存放于HashMap的key上</li>
<li>HashMap的value统一为PRESENT</li>
</ul>
<h4 id="25-ArrayList-和-LinkedList-的区别是什么？"><a href="#25-ArrayList-和-LinkedList-的区别是什么？" class="headerlink" title="25. ArrayList 和 LinkedList 的区别是什么？"></a>25. ArrayList 和 LinkedList 的区别是什么？</h4><p>最明显的区别是 ArrrayList底层的数据结构是数组，支持随机访问，而 LinkedList 的底层数据结构是双向循环链表，不支持随机访问。使用下标访问一个元素，ArrayList 的时间复杂度是 O(1)，而 LinkedList 是 O(n)。</p>
<h4 id="26-如何实现数组和-List-之间的转换？"><a href="#26-如何实现数组和-List-之间的转换？" class="headerlink" title="26. 如何实现数组和 List 之间的转换？"></a>26. 如何实现数组和 List 之间的转换？</h4><ul>
<li>List转换成为数组：调用ArrayList的toArray方法。</li>
<li>数组转换成为List：调用Arrays的asList方法。</li>
</ul>
<h4 id="27-ArrayList-和-Vector-的区别是什么？"><a href="#27-ArrayList-和-Vector-的区别是什么？" class="headerlink" title="27. ArrayList 和 Vector 的区别是什么？"></a>27. ArrayList 和 Vector 的区别是什么？</h4><ul>
<li>Vector是同步的，而ArrayList不是。然而，如果你寻求在迭代的时候对列表进行改变，你应该使用CopyOnWriteArrayList。 </li>
<li>ArrayList比Vector快，它因为有同步，不会过载。 </li>
<li>ArrayList更加通用，因为我们可以使用Collections工具类轻易地获取同步列表和只读列表。</li>
</ul>
<h4 id="28-Array-和-ArrayList-有何区别？"><a href="#28-Array-和-ArrayList-有何区别？" class="headerlink" title="28. Array 和 ArrayList 有何区别？"></a>28. Array 和 ArrayList 有何区别？</h4><ul>
<li>Array可以容纳基本类型和对象，而ArrayList只能容纳对象。 </li>
<li>Array是指定大小后不可变的，而ArrayList大小是可变的。 </li>
<li>Array没有提供ArrayList那么多功能，比如addAll、removeAll和iterator等。</li>
</ul>
<h4 id="29-在-Queue-中-poll-和-remove-有什么区别？"><a href="#29-在-Queue-中-poll-和-remove-有什么区别？" class="headerlink" title="29. 在 Queue 中 poll()和 remove()有什么区别？"></a>29. 在 Queue 中 poll()和 remove()有什么区别？</h4><p>poll() 和 remove() 都是从队列中取出一个元素，但是 poll() 在获取元素失败的时候会返回空，但是 remove() 失败的时候会抛出异常。</p>
<h4 id="30-哪些集合类是线程安全的？"><a href="#30-哪些集合类是线程安全的？" class="headerlink" title="30. 哪些集合类是线程安全的？"></a>30. 哪些集合类是线程安全的？</h4><ul>
<li>vector：就比arraylist多了个同步化机制（线程安全），因为效率较低，现在已经不太建议使用。在web应用中，特别是前台页面，往往效率（页面响应速度）是优先考虑的。</li>
<li>statck：堆栈类，先进后出。</li>
<li>hashtable：就比hashmap多了个线程安全。</li>
<li>enumeration：枚举，相当于迭代器。</li>
</ul>
<h4 id="31-迭代器-Iterator-是什么？"><a href="#31-迭代器-Iterator-是什么？" class="headerlink" title="31. 迭代器 Iterator 是什么？"></a>31. 迭代器 Iterator 是什么？</h4><p>迭代器是一种设计模式，它是一个对象，它可以遍历并选择序列中的对象，而开发人员不需要了解该序列的底层结构。迭代器通常被称为“轻量级”对象，因为创建它的代价小。</p>
<h4 id="32-Iterator-怎么使用？有什么特点？"><a href="#32-Iterator-怎么使用？有什么特点？" class="headerlink" title="32. Iterator 怎么使用？有什么特点？"></a>32. Iterator 怎么使用？有什么特点？</h4><p>Java中的Iterator功能比较简单，并且只能单向移动：</p>
<p>(1) 使用方法iterator()要求容器返回一个Iterator。第一次调用Iterator的next()方法时，它返回序列的第一个元素。注意：iterator()方法是java.lang.Iterable接口,被Collection继承。</p>
<p>(2) 使用next()获得序列中的下一个元素。</p>
<p>(3) 使用hasNext()检查序列中是否还有元素。</p>
<p>(4) 使用remove()将迭代器新返回的元素删除。　</p>
<p>Iterator是Java迭代器最简单的实现，为List设计的ListIterator具有更多的功能，它可以从两个方向遍历List，也可以从List中插入和删除元素。</p>
<h4 id="33-Iterator-和-ListIterator-有什么区别？"><a href="#33-Iterator-和-ListIterator-有什么区别？" class="headerlink" title="33. Iterator 和 ListIterator 有什么区别？"></a>33. Iterator 和 ListIterator 有什么区别？</h4><ul>
<li>Iterator可用来遍历Set和List集合，但是ListIterator只能用来遍历List。 </li>
<li>Iterator对集合只能是前向遍历，ListIterator既可以前向也可以后向。 </li>
<li>ListIterator实现了Iterator接口，并包含其他的功能，比如：增加元素，替换元素，获取前一个和后一个元素的索引，等等。</li>
</ul>
<h2 id="三、多线程"><a href="#三、多线程" class="headerlink" title="三、多线程"></a>三、多线程</h2><h4 id="35-并行和并发有什么区别？"><a href="#35-并行和并发有什么区别？" class="headerlink" title="35. 并行和并发有什么区别？"></a>35. 并行和并发有什么区别？</h4><ul>
<li>并行是指两个或者多个事件在同一时刻发生；而并发是指两个或多个事件在同一时间间隔发生。</li>
<li>并行是在不同实体上的多个事件，并发是在同一实体上的多个事件。</li>
<li>在一台处理器上“同时”处理多个任务，在多台处理器上同时处理多个任务。如hadoop分布式集群。</li>
</ul>
<p>所以并发编程的目标是充分的利用处理器的每一个核，以达到最高的处理性能。</p>
<h4 id="36-线程和进程的区别？"><a href="#36-线程和进程的区别？" class="headerlink" title="36. 线程和进程的区别？"></a>36. 线程和进程的区别？</h4><p>简而言之，进程是程序运行和资源分配的基本单位，一个程序至少有一个进程，一个进程至少有一个线程。进程在执行过程中拥有独立的内存单元，而多个线程共享内存资源，减少切换次数，从而效率更高。线程是进程的一个实体，是cpu调度和分派的基本单位，是比程序更小的能独立运行的基本单位。同一进程中的多个线程之间可以并发执行。</p>
<h4 id="37-守护线程是什么？"><a href="#37-守护线程是什么？" class="headerlink" title="37. 守护线程是什么？"></a>37. 守护线程是什么？</h4><p>守护线程（即daemon thread），是个服务线程，准确地来说就是服务其他的线程。</p>
<h4 id="38-创建线程有哪几种方式？"><a href="#38-创建线程有哪几种方式？" class="headerlink" title="38. 创建线程有哪几种方式？"></a>38. 创建线程有哪几种方式？</h4><p>①. 继承Thread类创建线程类</p>
<ul>
<li>定义Thread类的子类，并重写该类的run方法，该run方法的方法体就代表了线程要完成的任务。因此把run()方法称为执行体。</li>
<li>创建Thread子类的实例，即创建了线程对象。</li>
<li>调用线程对象的start()方法来启动该线程。</li>
</ul>
<p>②. 通过Runnable接口创建线程类</p>
<ul>
<li>定义runnable接口的实现类，并重写该接口的run()方法，该run()方法的方法体同样是该线程的线程执行体。</li>
<li>创建 Runnable实现类的实例，并依此实例作为Thread的target来创建Thread对象，该Thread对象才是真正的线程对象。</li>
<li>调用线程对象的start()方法来启动该线程。</li>
</ul>
<p>③. 通过Callable和Future创建线程</p>
<ul>
<li>创建Callable接口的实现类，并实现call()方法，该call()方法将作为线程执行体，并且有返回值。</li>
<li>创建Callable实现类的实例，使用FutureTask类来包装Callable对象，该FutureTask对象封装了该Callable对象的call()方法的返回值。</li>
<li>使用FutureTask对象作为Thread对象的target创建并启动新线程。</li>
<li>调用FutureTask对象的get()方法来获得子线程执行结束后的返回值。</li>
</ul>
<h4 id="39-说一下-runnable-和-callable-有什么区别？"><a href="#39-说一下-runnable-和-callable-有什么区别？" class="headerlink" title="39. 说一下 runnable 和 callable 有什么区别？"></a>39. 说一下 runnable 和 callable 有什么区别？</h4><p>有点深的问题了，也看出一个Java程序员学习知识的广度。</p>
<ul>
<li>Runnable接口中的run()方法的返回值是void，它做的事情只是纯粹地去执行run()方法中的代码而已；</li>
<li>Callable接口中的call()方法是有返回值的，是一个泛型，和Future、FutureTask配合可以用来获取异步执行的结果。</li>
</ul>
<h4 id="40-线程有哪些状态？"><a href="#40-线程有哪些状态？" class="headerlink" title="40. 线程有哪些状态？"></a>40. 线程有哪些状态？</h4><p>线程通常都有五种状态，创建、就绪、运行、阻塞和死亡。</p>
<ul>
<li>创建状态。在生成线程对象，并没有调用该对象的start方法，这是线程处于创建状态。</li>
<li>就绪状态。当调用了线程对象的start方法之后，该线程就进入了就绪状态，但是此时线程调度程序还没有把该线程设置为当前线程，此时处于就绪状态。在线程运行之后，从等待或者睡眠中回来之后，也会处于就绪状态。</li>
<li>运行状态。线程调度程序将处于就绪状态的线程设置为当前线程，此时线程就进入了运行状态，开始运行run函数当中的代码。</li>
<li>阻塞状态。线程正在运行的时候，被暂停，通常是为了等待某个时间的发生(比如说某项资源就绪)之后再继续运行。sleep,suspend，wait等方法都可以导致线程阻塞。</li>
<li>死亡状态。如果一个线程的run方法执行结束或者调用stop方法后，该线程就会死亡。对于已经死亡的线程，无法再使用start方法令其进入就绪 　　</li>
</ul>
<h4 id="41-sleep-和-wait-有什么区别？"><a href="#41-sleep-和-wait-有什么区别？" class="headerlink" title="41. sleep() 和 wait() 有什么区别？"></a>41. sleep() 和 wait() 有什么区别？</h4><p>sleep()：方法是线程类（Thread）的静态方法，让调用线程进入睡眠状态，让出执行机会给其他线程，等到休眠时间结束后，线程进入就绪状态和其他线程一起竞争cpu的执行时间。因为sleep() 是static静态的方法，他不能改变对象的机锁，当一个synchronized块中调用了sleep()  方法，线程虽然进入休眠，但是对象的机锁没有被释放，其他线程依然无法访问这个对象。</p>
<p>wait()：wait()是Object类的方法，当一个线程执行到wait方法时，它就进入到一个和该对象相关的等待池，同时释放对象的机锁，使得其他线程能够访问，可以通过notify，notifyAll方法来唤醒等待的线程</p>
<h4 id="42-notify-和-notifyAll-有什么区别？"><a href="#42-notify-和-notifyAll-有什么区别？" class="headerlink" title="42. notify()和 notifyAll()有什么区别？"></a>42. notify()和 notifyAll()有什么区别？</h4><ul>
<li>如果线程调用了对象的 wait()方法，那么线程便会处于该对象的等待池中，等待池中的线程不会去竞争该对象的锁。</li>
<li>当有线程调用了对象的 notifyAll()方法（唤醒所有 wait 线程）或 notify()方法（只随机唤醒一个 wait  线程），被唤醒的的线程便会进入该对象的锁池中，锁池中的线程会去竞争该对象锁。也就是说，调用了notify后只要一个线程会由等待池进入锁池，而notifyAll会将该对象等待池内的所有线程移动到锁池中，等待锁竞争。</li>
<li>优先级高的线程竞争到对象锁的概率大，假若某线程没有竞争到该对象锁，它还会留在锁池中，唯有线程再次调用  wait()方法，它才会重新回到等待池中。而竞争到对象锁的线程则继续往下执行，直到执行完了 synchronized  代码块，它会释放掉该对象锁，这时锁池中的线程会继续竞争该对象锁。</li>
</ul>
<h4 id="43-线程的-run-和-start-有什么区别？"><a href="#43-线程的-run-和-start-有什么区别？" class="headerlink" title="43. 线程的 run()和 start()有什么区别？"></a>43. 线程的 run()和 start()有什么区别？</h4><p>每个线程都是通过某个特定Thread对象所对应的方法run()来完成其操作的，方法run()称为线程体。通过调用Thread类的start()方法来启动一个线程。</p>
<p>start()方法来启动一个线程，真正实现了多线程运行。这时无需等待run方法体代码执行完毕，可以直接继续执行下面的代码；  这时此线程是处于就绪状态， 并没有运行。 然后通过此Thread类调用方法run()来完成其运行状态，  这里方法run()称为线程体，它包含了要执行的这个线程的内容， Run方法运行结束， 此线程终止。然后CPU再调度其它线程。</p>
<p>run()方法是在本线程里的，只是线程里的一个函数,而不是多线程的。 如果直接调用run(),其实就相当于是调用了一个普通函数而已，直接待用run()方法必须等待run()方法执行完毕才能执行下面的代码，所以执行路径还是只有一条，根本就没有线程的特征，所以在多线程执行时要使用start()方法而不是run()方法。</p>
<h4 id="44-创建线程池有哪几种方式？"><a href="#44-创建线程池有哪几种方式？" class="headerlink" title="44. 创建线程池有哪几种方式？"></a>44. 创建线程池有哪几种方式？</h4><p>①. newFixedThreadPool(int nThreads)</p>
<p>创建一个固定长度的线程池，每当提交一个任务就创建一个线程，直到达到线程池的最大数量，这时线程规模将不再变化，当线程发生未预期的错误而结束时，线程池会补充一个新的线程。</p>
<p>②. newCachedThreadPool()</p>
<p>创建一个可缓存的线程池，如果线程池的规模超过了处理需求，将自动回收空闲线程，而当需求增加时，则可以自动添加新线程，线程池的规模不存在任何限制。</p>
<p>③. newSingleThreadExecutor()</p>
<p>这是一个单线程的Executor，它创建单个工作线程来执行任务，如果这个线程异常结束，会创建一个新的来替代它；它的特点是能确保依照任务在队列中的顺序来串行执行。</p>
<p>④. newScheduledThreadPool(int corePoolSize)</p>
<p>创建了一个固定长度的线程池，而且以延迟或定时的方式来执行任务，类似于Timer。</p>
<h4 id="45-线程池都有哪些状态？"><a href="#45-线程池都有哪些状态？" class="headerlink" title="45. 线程池都有哪些状态？"></a>45. 线程池都有哪些状态？</h4><p>线程池有5种状态：Running、ShutDown、Stop、Tidying、Terminated。</p>
<p>1、RUNNING</p>
<p>(1) 状态说明：线程池处在RUNNING状态时，能够接收新任务，以及对已添加的任务进行处理。<br>(02) 状态切换：线程池的初始化状态是RUNNING。换句话说，线程池被一旦被创建，就处于RUNNING状态，并且线程池中的任务数为0！</p>
<p>private final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));</p>
<p>2、 SHUTDOWN</p>
<p>(1) 状态说明：线程池处在SHUTDOWN状态时，不接收新任务，但能处理已添加的任务。<br>(2) 状态切换：调用线程池的shutdown()接口时，线程池由RUNNING -&gt; SHUTDOWN。</p>
<p>3、STOP</p>
<p>(1) 状态说明：线程池处在STOP状态时，不接收新任务，不处理已添加的任务，并且会中断正在处理的任务。<br>(2) 状态切换：调用线程池的shutdownNow()接口时，线程池由(RUNNING or SHUTDOWN ) -&gt; STOP。</p>
<p>4、TIDYING</p>
<p>(1) 状态说明：当所有的任务已终止，ctl记录的”任务数量”为0，线程池会变为TIDYING状态。当线程池变为TIDYING状态时，会执行钩子函数terminated()。terminated()在ThreadPoolExecutor类中是空的，若用户想在线程池变为TIDYING时，进行相应的处理；可以通过重载terminated()函数来实现。<br>(2) 状态切换：当线程池在SHUTDOWN状态下，阻塞队列为空并且线程池中执行的任务也为空时，就会由 SHUTDOWN -&gt; TIDYING。<br>当线程池在STOP状态下，线程池中执行的任务为空时，就会由STOP -&gt; TIDYING。</p>
<p>5、 TERMINATED</p>
<p>(1) 状态说明：线程池彻底终止，就变成TERMINATED状态。<br>(2) 状态切换：线程池处在TIDYING状态时，执行完terminated()之后，就会由 TIDYING -&gt; TERMINATED。</p>
<h4 id="46-线程池中-submit-和-execute-方法有什么区别？"><a href="#46-线程池中-submit-和-execute-方法有什么区别？" class="headerlink" title="46. 线程池中 submit()和 execute()方法有什么区别？"></a>46. 线程池中 submit()和 execute()方法有什么区别？</h4><ul>
<li>接收的参数不一样</li>
<li>submit有返回值，而execute没有</li>
<li>submit方便Exception处理</li>
</ul>
<h4 id="47-在-java-程序中怎么保证多线程的运行安全？"><a href="#47-在-java-程序中怎么保证多线程的运行安全？" class="headerlink" title="47. 在 java 程序中怎么保证多线程的运行安全？"></a>47. 在 java 程序中怎么保证多线程的运行安全？</h4><p>线程安全在三个方面体现：</p>
<ul>
<li>原子性：提供互斥访问，同一时刻只能有一个线程对数据进行操作，（atomic,synchronized）；</li>
<li>可见性：一个线程对主内存的修改可以及时地被其他线程看到，（synchronized,volatile）；</li>
<li>有序性：一个线程观察其他线程中的指令执行顺序，由于指令重排序，该观察结果一般杂乱无序，（happens-before原则）。</li>
</ul>
<h4 id="48-多线程锁的升级原理是什么？"><a href="#48-多线程锁的升级原理是什么？" class="headerlink" title="48. 多线程锁的升级原理是什么？"></a>48. 多线程锁的升级原理是什么？</h4><p>在Java中，锁共有4种状态，级别从低到高依次为：无状态锁，偏向锁，轻量级锁和重量级锁状态，这几个状态会随着竞争情况逐渐升级。锁可以升级但不能降级。</p>
<h4 id="49-什么是死锁？"><a href="#49-什么是死锁？" class="headerlink" title="49. 什么是死锁？"></a>49. 什么是死锁？</h4><p>死锁是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。是操作系统层面的一个错误，是进程死锁的简称，最早在 1965 年由 Dijkstra 在研究银行家算法时提出的，它是计算机操作系统乃至整个并发程序设计领域最难处理的问题之一。</p>
<h4 id="50-怎么防止死锁？"><a href="#50-怎么防止死锁？" class="headerlink" title="50. 怎么防止死锁？"></a>50. 怎么防止死锁？</h4><p>死锁的四个必要条件：</p>
<ul>
<li>互斥条件：进程对所分配到的资源不允许其他进程进行访问，若其他进程访问该资源，只能等待，直至占有该资源的进程使用完成后释放该资源</li>
<li>请求和保持条件：进程获得一定的资源之后，又对其他资源发出请求，但是该资源可能被其他进程占有，此事请求阻塞，但又对自己获得的资源保持不放</li>
<li>不可剥夺条件：是指进程已获得的资源，在未完成使用之前，不可被剥夺，只能在使用完后自己释放</li>
<li>环路等待条件：是指进程发生死锁后，若干进程之间形成一种头尾相接的循环等待资源关系</li>
</ul>
<p>这四个条件是死锁的必要条件，只要系统发生死锁，这些条件必然成立，而只要上述条件之 一不满足，就不会发生死锁。</p>
<p>理解了死锁的原因，尤其是产生死锁的四个必要条件，就可以最大可能地避免、预防和 解除死锁。</p>
<p>所以，在系统设计、进程调度等方面注意如何不让这四个必要条件成立，如何确 定资源的合理分配算法，避免进程永久占据系统资源。</p>
<p>此外，也要防止进程在处于等待状态的情况下占用资源。因此，对资源的分配要给予合理的规划。</p>
<h4 id="51-ThreadLocal-是什么？有哪些使用场景？"><a href="#51-ThreadLocal-是什么？有哪些使用场景？" class="headerlink" title="51. ThreadLocal 是什么？有哪些使用场景？"></a>51. ThreadLocal 是什么？有哪些使用场景？</h4><p>线程局部变量是局限于线程内部的变量，属于线程自身所有，不在多个线程间共享。Java提供ThreadLocal类来支持线程局部变量，是一种实现线程安全的方式。但是在管理环境下（如 web  服务器）使用线程局部变量的时候要特别小心，在这种情况下，工作线程的生命周期比任何应用变量的生命周期都要长。任何线程局部变量一旦在工作完成后没有释放，Java 应用就存在内存泄露的风险。</p>
<h4 id="52-说一下-synchronized-底层实现原理？"><a href="#52-说一下-synchronized-底层实现原理？" class="headerlink" title="52.说一下 synchronized 底层实现原理？"></a>52.说一下 synchronized 底层实现原理？</h4><p>synchronized可以保证方法或者代码块在运行时，同一时刻只有一个方法可以进入到临界区，同时它还可以保证共享变量的内存可见性。</p>
<p>Java中每一个对象都可以作为锁，这是synchronized实现同步的基础：</p>
<ul>
<li>普通同步方法，锁是当前实例对象</li>
<li>静态同步方法，锁是当前类的class对象</li>
<li>同步方法块，锁是括号里面的对象</li>
</ul>
<h4 id="53-synchronized-和-volatile-的区别是什么？"><a href="#53-synchronized-和-volatile-的区别是什么？" class="headerlink" title="53. synchronized 和 volatile 的区别是什么？"></a>53. synchronized 和 volatile 的区别是什么？</h4><ul>
<li>volatile本质是在告诉jvm当前变量在寄存器（工作内存）中的值是不确定的，需要从主存中读取； synchronized则是锁定当前变量，只有当前线程可以访问该变量，其他线程被阻塞住。</li>
<li>volatile仅能使用在变量级别；synchronized则可以使用在变量、方法、和类级别的。</li>
<li>volatile仅能实现变量的修改可见性，不能保证原子性；而synchronized则可以保证变量的修改可见性和原子性。</li>
<li>volatile不会造成线程的阻塞；synchronized可能会造成线程的阻塞。</li>
<li>volatile标记的变量不会被编译器优化；synchronized标记的变量可以被编译器优化。</li>
</ul>
<h4 id="54-synchronized-和-Lock-有什么区别？"><a href="#54-synchronized-和-Lock-有什么区别？" class="headerlink" title="54. synchronized 和 Lock 有什么区别？"></a>54. synchronized 和 Lock 有什么区别？</h4><ul>
<li>首先synchronized是java内置关键字，在jvm层面，Lock是个java类；</li>
<li>synchronized无法判断是否获取锁的状态，Lock可以判断是否获取到锁；</li>
<li>synchronized会自动释放锁(a 线程执行完同步代码会释放锁 ；b 线程执行过程中发生异常会释放锁)，Lock需在finally中手工释放锁（unlock()方法释放锁），否则容易造成线程死锁；</li>
<li>用synchronized关键字的两个线程1和线程2，如果当前线程1获得锁，线程2线程等待。如果线程1阻塞，线程2则会一直等待下去，而Lock锁就不一定会等待下去，如果尝试获取不到锁，线程可以不用一直等待就结束了；</li>
<li>synchronized的锁可重入、不可中断、非公平，而Lock锁可重入、可判断、可公平（两者皆可）；</li>
<li>Lock锁适合大量同步的代码的同步问题，synchronized锁适合代码少量的同步问题。</li>
</ul>
<h2 id="四、反射"><a href="#四、反射" class="headerlink" title="四、反射"></a>四、反射</h2><h4 id="55-什么是反射？"><a href="#55-什么是反射？" class="headerlink" title="55. 什么是反射？"></a>55. 什么是反射？</h4><p>反射主要是指程序可以访问、检测和修改它本身状态或行为的一种能力</p>
<p>在Java运行时环境中，对于任意一个类，能否知道这个类有哪些属性和方法？对于任意一个对象，能否调用它的任意一个方法</p>
<p>Java反射机制主要提供了以下功能：</p>
<ul>
<li>在运行时判断任意一个对象所属的类。</li>
<li>在运行时构造任意一个类的对象。</li>
<li>在运行时判断任意一个类所具有的成员变量和方法。</li>
<li>在运行时调用任意一个对象的方法。 </li>
</ul>
<h4 id="56-什么是-java-序列化？什么情况下需要序列化？"><a href="#56-什么是-java-序列化？什么情况下需要序列化？" class="headerlink" title="56. 什么是 java 序列化？什么情况下需要序列化？"></a>56. 什么是 java 序列化？什么情况下需要序列化？</h4><p>简单说就是为了保存在内存中的各种对象的状态（也就是实例变量，不是方法），并且可以把保存的对象状态再读出来。虽然你可以用你自己的各种各样的方法来保存object states，但是Java给你提供一种应该比你自己好的保存对象状态的机制，那就是序列化。</p>
<p> 什么情况下需要序列化：</p>
<p>a）当你想把的内存中的对象状态保存到一个文件中或者数据库中时候；<br>b）当你想用套接字在网络上传送对象的时候；<br>c）当你想通过RMI传输对象的时候；</p>
<h4 id="57-动态代理是什么？有哪些应用？"><a href="#57-动态代理是什么？有哪些应用？" class="headerlink" title="57. 动态代理是什么？有哪些应用？"></a>57. 动态代理是什么？有哪些应用？</h4><p>动态代理：</p>
<p>当想要给实现了某个接口的类中的方法，加一些额外的处理。比如说加日志，加事务等。可以给这个类创建一个代理，故名思议就是创建一个新的类，这个类不仅包含原来类方法的功能，而且还在原来的基础上添加了额外处理的新类。这个代理类并不是定义好的，是动态生成的。具有解耦意义，灵活，扩展性强。</p>
<p>动态代理的应用：</p>
<ul>
<li>Spring的AOP</li>
<li>加事务</li>
<li>加权限</li>
<li>加日志</li>
</ul>
<h4 id="58-怎么实现动态代理？"><a href="#58-怎么实现动态代理？" class="headerlink" title="58. 怎么实现动态代理？"></a>58. 怎么实现动态代理？</h4><p>首先必须定义一个接口，还要有一个InvocationHandler(将实现接口的类的对象传递给它)处理类。再有一个工具类Proxy(习惯性将其称为代理类，因为调用他的newInstance()可以产生代理对象,其实他只是一个产生代理对象的工具类）。利用到InvocationHandler，拼接代理类源码，将其编译生成代理类的二进制码，利用加载器加载，并将其实例化产生代理对象，最后返回。</p>
<h2 id="五、对象拷贝"><a href="#五、对象拷贝" class="headerlink" title="五、对象拷贝"></a>五、对象拷贝</h2><h4 id="59-为什么要使用克隆？"><a href="#59-为什么要使用克隆？" class="headerlink" title="59. 为什么要使用克隆？"></a>59. 为什么要使用克隆？</h4><p>想对一个对象进行处理，又想保留原有的数据进行接下来的操作，就需要克隆了，Java语言中克隆针对的是类的实例。</p>
<h4 id="60-如何实现对象克隆？"><a href="#60-如何实现对象克隆？" class="headerlink" title="60. 如何实现对象克隆？"></a>60. 如何实现对象克隆？</h4><p>有两种方式：</p>
<ul>
<li>实现Cloneable接口并重写Object类中的clone()方法；</li>
<li>实现Serializable接口，通过对象的序列化和反序列化实现克隆，可以实现真正的深度克隆，代码如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MyUtil</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Serializable&gt; <span class="function">T <span class="title">clone</span><span class="params">(T obj)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ByteArrayOutputStream bout = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(bout);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line"></span><br><span class="line">        ByteArrayInputStream bin = <span class="keyword">new</span> ByteArrayInputStream(bout.toByteArray());</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(bin);</span><br><span class="line">        <span class="keyword">return</span> (T) ois.readObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 说明：调用ByteArrayInputStream或ByteArrayOutputStream对象的close方法没有任何意义</span></span><br><span class="line">        <span class="comment">// 这两个基于内存的流只要垃圾回收器清理对象就能够释放资源，这一点不同于对外部资源（如文件流）的释放</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面是测试代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 人类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> nnngu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">9102017020286042305L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;    <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;        <span class="comment">// 年龄</span></span><br><span class="line">    <span class="keyword">private</span> Car car;        <span class="comment">// 座驾</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age, Car car)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.car = car;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> car;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCar</span><span class="params">(Car car)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.car = car;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person [name="</span> + name + <span class="string">", age="</span> + age + <span class="string">", car="</span> + car + <span class="string">"]"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 小汽车类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> nnngu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">5713945027627603702L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String brand;       <span class="comment">// 品牌</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxSpeed;       <span class="comment">// 最高时速</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">(String brand, <span class="keyword">int</span> maxSpeed)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.brand = brand;</span><br><span class="line">        <span class="keyword">this</span>.maxSpeed = maxSpeed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBrand</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBrand</span><span class="params">(String brand)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.brand = brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMaxSpeed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> maxSpeed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaxSpeed</span><span class="params">(<span class="keyword">int</span> maxSpeed)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maxSpeed = maxSpeed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Car [brand="</span> + brand + <span class="string">", maxSpeed="</span> + maxSpeed + <span class="string">"]"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CloneTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Person p1 = <span class="keyword">new</span> Person(<span class="string">"郭靖"</span>, <span class="number">33</span>, <span class="keyword">new</span> Car(<span class="string">"Benz"</span>, <span class="number">300</span>));</span><br><span class="line">            Person p2 = MyUtil.clone(p1);   <span class="comment">// 深度克隆</span></span><br><span class="line">            p2.getCar().setBrand(<span class="string">"BYD"</span>);</span><br><span class="line">            <span class="comment">// 修改克隆的Person对象p2关联的汽车对象的品牌属性</span></span><br><span class="line">            <span class="comment">// 原来的Person对象p1关联的汽车不会受到任何影响</span></span><br><span class="line">            <span class="comment">// 因为在克隆Person对象时其关联的汽车对象也被克隆了</span></span><br><span class="line">            System.out.println(p1);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：基于序列化和反序列化实现的克隆不仅仅是深度克隆，更重要的是通过泛型限定，可以检查出要克隆的对象是否支持序列化，这项检查是编译器完成的，不是在运行时抛出异常，这种是方案明显优于使用Object类的clone方法克隆对象。让问题在编译的时候暴露出来总是好过把问题留到运行时。</p>
<h4 id="61-深拷贝和浅拷贝区别是什么？"><a href="#61-深拷贝和浅拷贝区别是什么？" class="headerlink" title="61. 深拷贝和浅拷贝区别是什么？"></a>61. 深拷贝和浅拷贝区别是什么？</h4><ul>
<li>浅拷贝只是复制了对象的引用地址，两个对象指向同一个内存地址，所以修改其中任意的值，另一个值都会随之变化，这就是浅拷贝（例：assign()）</li>
<li>深拷贝是将对象及值复制过来，两个对象修改其中任意的值另一个值不会改变，这就是深拷贝（例：JSON.parse()和JSON.stringify()，但是此方法无法复制函数类型）</li>
</ul>
<h2 id="六、Java-Web"><a href="#六、Java-Web" class="headerlink" title="六、Java Web"></a>六、Java Web</h2><h4 id="62-jsp-和-servlet-有什么区别？"><a href="#62-jsp-和-servlet-有什么区别？" class="headerlink" title="62. jsp 和 servlet 有什么区别？"></a>62. jsp 和 servlet 有什么区别？</h4><ol>
<li>jsp经编译后就变成了Servlet.（JSP的本质就是Servlet，JVM只能识别java的类，不能识别JSP的代码，Web容器将JSP的代码编译成JVM能够识别的java类）</li>
<li>jsp更擅长表现于页面显示，servlet更擅长于逻辑控制。</li>
<li>Servlet中没有内置对象，Jsp中的内置对象都是必须通过HttpServletRequest对象，HttpServletResponse对象以及HttpServlet对象得到。</li>
<li>Jsp是Servlet的一种简化，使用Jsp只需要完成程序员需要输出到客户端的内容，Jsp中的Java脚本如何镶嵌到一个类中，由Jsp容器完成。而Servlet则是个完整的Java类，这个类的Service方法用于生成对客户端的响应。</li>
</ol>
<h4 id="63-jsp-有哪些内置对象？作用分别是什么？"><a href="#63-jsp-有哪些内置对象？作用分别是什么？" class="headerlink" title="63. jsp 有哪些内置对象？作用分别是什么？"></a>63. jsp 有哪些内置对象？作用分别是什么？</h4><p>JSP有9个内置对象：</p>
<ul>
<li>request：封装客户端的请求，其中包含来自GET或POST请求的参数；</li>
<li>response：封装服务器对客户端的响应；</li>
<li>pageContext：通过该对象可以获取其他对象；</li>
<li>session：封装用户会话的对象；</li>
<li>application：封装服务器运行环境的对象；</li>
<li>out：输出服务器响应的输出流对象；</li>
<li>config：Web应用的配置对象；</li>
<li>page：JSP页面本身（相当于Java程序中的this）；</li>
<li>exception：封装页面抛出异常的对象。</li>
</ul>
<h4 id="64-说一下-jsp-的-4-种作用域？"><a href="#64-说一下-jsp-的-4-种作用域？" class="headerlink" title="64. 说一下 jsp 的 4 种作用域？"></a>64. 说一下 jsp 的 4 种作用域？</h4><p>JSP中的四种作用域包括page、request、session和application，具体来说：</p>
<ul>
<li><strong>page</strong>代表与一个页面相关的对象和属性。</li>
<li><strong>request</strong>代表与Web客户机发出的一个请求相关的对象和属性。一个请求可能跨越多个页面，涉及多个Web组件；需要在页面显示的临时数据可以置于此作用域。</li>
<li><strong>session</strong>代表与某个用户与服务器建立的一次会话相关的对象和属性。跟某个用户相关的数据应该放在用户自己的session中。</li>
<li><strong>application</strong>代表与整个Web应用程序相关的对象和属性，它实质上是跨越整个Web应用程序，包括多个页面、请求和会话的一个全局作用域。</li>
</ul>
<h4 id="65-session-和-cookie-有什么区别？"><a href="#65-session-和-cookie-有什么区别？" class="headerlink" title="65. session 和 cookie 有什么区别？"></a>65. session 和 cookie 有什么区别？</h4><ul>
<li>由于HTTP协议是无状态的协议，所以服务端需要记录用户的状态时，就需要用某种机制来识具体的用户，这个机制就是Session.典型的场景比如购物车，当你点击下单按钮时，由于HTTP协议无状态，所以并不知道是哪个用户操作的，所以服务端要为特定的用户创建了特定的Session，用用于标识这个用户，并且跟踪用户，这样才知道购物车里面有几本书。这个Session是保存在服务端的，有一个唯一标识。在服务端保存Session的方法很多，内存、数据库、文件都有。集群的时候也要考虑Session的转移，在大型的网站，一般会有专门的Session服务器集群，用来保存用户会话，这个时候 Session 信息都是放在内存的，使用一些缓存服务比如Memcached之类的来放 Session。</li>
<li>思考一下服务端如何识别特定的客户？这个时候Cookie就登场了。每次HTTP请求的时候，客户端都会发送相应的Cookie信息到服务端。实际上大多数的应用都是用 Cookie 来实现Session跟踪的，第一次创建Session的时候，服务端会在HTTP协议中告诉客户端，需要在 Cookie  里面记录一个Session ID，以后每次请求把这个会话ID发送到服务器，我就知道你是谁了。有人问，如果客户端的浏览器禁用了 Cookie  怎么办？一般这种情况下，会使用一种叫做URL重写的技术来进行会话跟踪，即每次HTTP交互，URL后面都会被附加上一个诸如 sid=xxxxx  这样的参数，服务端据此来识别用户。</li>
<li>Cookie其实还可以用在一些方便用户的场景下，设想你某次登陆过一个网站，下次登录的时候不想再次输入账号了，怎么办？这个信息可以写到Cookie里面，访问网站的时候，网站页面的脚本可以读取这个信息，就自动帮你把用户名给填了，能够方便一下用户。这也是Cookie名称的由来，给用户的一点甜头。所以，总结一下：Session是在服务端保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中；Cookie是客户端保存用户信息的一种机制，用来记录用户的一些信息，也是实现Session的一种方式。</li>
</ul>
<h4 id="66-说一下-session-的工作原理？"><a href="#66-说一下-session-的工作原理？" class="headerlink" title="66. 说一下 session 的工作原理？"></a>66. 说一下 session 的工作原理？</h4><p>其实session是一个存在服务器上的类似于一个散列表格的文件。里面存有我们需要的信息，在我们需要用的时候可以从里面取出来。类似于一个大号的map吧，里面的键存储的是用户的sessionid，用户向服务器发送请求的时候会带上这个sessionid。这时就可以从中取出对应的值了。</p>
<h4 id="67-如果客户端禁止-cookie-能实现-session-还能用吗？"><a href="#67-如果客户端禁止-cookie-能实现-session-还能用吗？" class="headerlink" title="67. 如果客户端禁止 cookie 能实现 session 还能用吗？"></a>67. 如果客户端禁止 cookie 能实现 session 还能用吗？</h4><p>Cookie与  Session，一般认为是两个独立的东西，Session采用的是在服务器端保持状态的方案，而Cookie采用的是在客户端保持状态的方案。但为什么禁用Cookie就不能得到Session呢？因为Session是用Session ID来确定当前对话所对应的服务器Session，而Session ID是通过Cookie来传递的，禁用Cookie相当于失去了Session  ID，也就得不到Session了。</p>
<p>假定用户关闭Cookie的情况下使用Session，其实现途径有以下几种：</p>
<ol>
<li>设置php.ini配置文件中的“session.use_trans_sid = 1”，或者编译时打开打开了“–enable-trans-sid”选项，让PHP自动跨页传递Session ID。</li>
<li>手动通过URL传值、隐藏表单传递Session ID。</li>
<li>用文件、数据库等形式保存Session ID，在跨页过程中手动调用。</li>
</ol>
<h4 id="68-spring-mvc-和-struts-的区别是什么？"><a href="#68-spring-mvc-和-struts-的区别是什么？" class="headerlink" title="68. spring mvc 和 struts 的区别是什么？"></a>68. spring mvc 和 struts 的区别是什么？</h4><ul>
<li>拦截机制的不同</li>
</ul>
<p>Struts2是类级别的拦截，每次请求就会创建一个Action，和Spring整合时Struts2的ActionBean注入作用域是原型模式prototype，然后通过setter，getter吧request数据注入到属性。Struts2中，一个Action对应一个request，response上下文，在接收参数时，可以通过属性接收，这说明属性参数是让多个方法共享的。Struts2中Action的一个方法可以对应一个url，而其类属性却被所有方法共享，这也就无法用注解或其他方式标识其所属方法了，只能设计为多例。</p>
<p>SpringMVC是方法级别的拦截，一个方法对应一个Request上下文，所以方法直接基本上是独立的，独享request，response数据。而每个方法同时又何一个url对应，参数的传递是直接注入到方法中的，是方法所独有的。处理结果通过ModeMap返回给框架。在Spring整合时，SpringMVC的Controller  Bean默认单例模式Singleton，所以默认对所有的请求，只会创建一个Controller，有应为没有共享的属性，所以是线程安全的，如果要改变默认的作用域，需要添加@Scope注解修改。</p>
<p>Struts2有自己的拦截Interceptor机制，SpringMVC这是用的是独立的Aop方式，这样导致Struts2的配置文件量还是比SpringMVC大。</p>
<ul>
<li>底层框架的不同</li>
</ul>
<p>Struts2采用Filter（StrutsPrepareAndExecuteFilter）实现，SpringMVC（DispatcherServlet）则采用Servlet实现。Filter在容器启动之后即初始化；服务停止以后坠毁，晚于Servlet。Servlet在是在调用时初始化，先于Filter调用，服务停止后销毁。</p>
<ul>
<li>性能方面</li>
</ul>
<p>Struts2是类级别的拦截，每次请求对应实例一个新的Action，需要加载所有的属性值注入，SpringMVC实现了零配置，由于SpringMVC基于方法的拦截，有加载一次单例模式bean注入。所以，SpringMVC开发效率和性能高于Struts2。</p>
<ul>
<li>配置方面</li>
</ul>
<p>spring MVC和Spring是无缝的。从这个项目的管理和安全上也比Struts2高。</p>
<h4 id="69-如何避免-sql-注入？"><a href="#69-如何避免-sql-注入？" class="headerlink" title="69. 如何避免 sql 注入？"></a>69. 如何避免 sql 注入？</h4><ol>
<li>PreparedStatement（简单又有效的方法）</li>
<li>使用正则表达式过滤传入的参数</li>
<li>字符串过滤</li>
<li>JSP中调用该函数检查是否包函非法字符</li>
<li>JSP页面判断代码</li>
</ol>
<h4 id="70-什么是-XSS-攻击，如何避免？"><a href="#70-什么是-XSS-攻击，如何避免？" class="headerlink" title="70. 什么是 XSS 攻击，如何避免？"></a>70. 什么是 XSS 攻击，如何避免？</h4><p>XSS攻击又称CSS,全称Cross Site Script （跨站脚本攻击），其原理是攻击者向有XSS漏洞的网站中输入恶意的 HTML 代码，当用户浏览该网站时，这段 HTML 代码会自动执行，从而达到攻击的目的。XSS 攻击类似于 SQL  注入攻击，SQL注入攻击中以SQL语句作为用户输入，从而达到查询/修改/删除数据的目的，而在xss攻击中，通过插入恶意脚本，实现对用户游览器的控制，获取用户的一些信息。 XSS是 Web 程序中常见的漏洞，XSS 属于被动式且用于客户端的攻击方式。</p>
<p>XSS防范的总体思路是：对输入(和URL参数)进行过滤，对输出进行编码。</p>
<h4 id="71-什么是-CSRF-攻击，如何避免？"><a href="#71-什么是-CSRF-攻击，如何避免？" class="headerlink" title="71. 什么是 CSRF 攻击，如何避免？"></a>71. 什么是 CSRF 攻击，如何避免？</h4><p>CSRF（Cross-site request forgery）也被称为 one-click attack或者 session riding，中文全称是叫<strong>跨站请求伪造</strong>。一般来说，攻击者通过伪造用户的浏览器的请求，向访问一个用户自己曾经认证访问过的网站发送出去，使目标网站接收并误以为是用户的真实操作而去执行命令。常用于盗取账号、转账、发送虚假消息等。攻击者利用网站对请求的验证漏洞而实现这样的攻击行为，网站能够确认请求来源于用户的浏览器，却不能验证请求是否源于用户的真实意愿下的操作行为。</p>
<p><strong>如何避免：</strong></p>
<ol>
<li>验证 HTTP Referer 字段</li>
</ol>
<blockquote>
<p>HTTP头中的Referer字段记录了该 HTTP 请求的来源地址。在通常情况下，访问一个安全受限页面的请求来自于同一个网站，而如果黑客要对其实施 CSRF<br>攻击，他一般只能在他自己的网站构造请求。因此，可以通过验证Referer值来防御CSRF 攻击。</p>
</blockquote>
<ol start="2">
<li>使用验证码</li>
</ol>
<blockquote>
<p>关键操作页面加上验证码，后台收到请求后通过判断验证码可以防御CSRF。但这种方法对用户不太友好。</p>
</blockquote>
<ol start="3">
<li>在请求地址中添加token并验证</li>
</ol>
<blockquote>
<p>CSRF  攻击之所以能够成功，是因为黑客可以完全伪造用户的请求，该请求中所有的用户验证信息都是存在于cookie中，因此黑客可以在不知道这些验证信息的情况下直接利用用户自己的cookie 来通过安全验证。要抵御 CSRF，关键在于在请求中放入黑客所不能伪造的信息，并且该信息不存在于 cookie 之中。可以在 HTTP  请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，如果请求中没有token或者 token  内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。这种方法要比检查 Referer 要安全一些，token  可以在用户登陆后产生并放于session之中，然后在每次请求时把token 从 session 中拿出，与请求中的 token  进行比对，但这种方法的难点在于如何把 token 以参数的形式加入请求。<br>对于 GET 请求，token 将附在请求地址之后，这样 URL 就变成 <a href="http://url?csrftoken=tokenvalue。" target="_blank" rel="noopener">http://url?csrftoken=tokenvalue。</a><br>而对于 POST 请求来说，要在 form 的最后加上 <input type="hidden" name="csrftoken" value="tokenvalue"/>，这样就把token以参数的形式加入请求了。</p>
</blockquote>
<ol start="4">
<li>在HTTP 头中自定义属性并验证</li>
</ol>
<blockquote>
<p>这种方法也是使用 token 并进行验证，和上一种方法不同的是，这里并不是把 token 以参数的形式置于 HTTP  请求之中，而是把它放到 HTTP 头中自定义的属性里。通过 XMLHttpRequest 这个类，可以一次性给所有该类请求加上  csrftoken 这个 HTTP 头属性，并把 token 值放入其中。这样解决了上种方法在请求中加入 token 的不便，同时，通过  XMLHttpRequest 请求的地址不会被记录到浏览器的地址栏，也不用担心 token 会透过 Referer 泄露到其他网站中去。</p>
</blockquote>
<h2 id="七、异常"><a href="#七、异常" class="headerlink" title="七、异常"></a>七、异常</h2><h4 id="72-throw-和-throws-的区别？"><a href="#72-throw-和-throws-的区别？" class="headerlink" title="72. throw 和 throws 的区别？"></a>72. throw 和 throws 的区别？</h4><p>throws是用来声明一个方法可能抛出的所有异常信息，throws是将异常声明但是不处理，而是将异常往上传，谁调用我就交给谁处理。而throw则是指抛出的一个具体的异常类型。</p>
<h4 id="73-final、finally、finalize-有什么区别？"><a href="#73-final、finally、finalize-有什么区别？" class="headerlink" title="73. final、finally、finalize 有什么区别？"></a>73. final、finally、finalize 有什么区别？</h4><ul>
<li>final可以修饰类、变量、方法，修饰类表示该类不能被继承、修饰方法表示该方法不能被重写、修饰变量表示该变量是一个常量不能被重新赋值。</li>
<li>finally一般作用在try-catch代码块中，在处理异常的时候，通常我们将一定要执行的代码方法finally代码块中，表示不管是否出现异常，该代码块都会执行，一般用来存放一些关闭资源的代码。</li>
<li>finalize是一个方法，属于Object类的一个方法，而Object类是所有类的父类，该方法一般由垃圾回收器来调用，当我们调用System的gc()方法的时候，由垃圾回收器调用finalize(),回收垃圾。</li>
</ul>
<h4 id="74-try-catch-finally-中哪个部分可以省略？"><a href="#74-try-catch-finally-中哪个部分可以省略？" class="headerlink" title="74. try-catch-finally 中哪个部分可以省略？"></a>74. try-catch-finally 中哪个部分可以省略？</h4><p>答：catch 可以省略</p>
<p><strong>原因：</strong></p>
<p>更为严格的说法其实是：try只适合处理运行时异常，try+catch适合处理运行时异常+普通异常。也就是说，如果你只用try去处理普通异常却不加以catch处理，编译是通不过的，因为编译器硬性规定，普通异常如果选择捕获，则必须用catch显示声明以便进一步处理。而运行时异常在编译时没有如此规定，所以catch可以省略，你加上catch编译器也觉得无可厚非。</p>
<p>理论上，编译器看任何代码都不顺眼，都觉得可能有潜在的问题，所以你即使对所有代码加上try，代码在运行期时也只不过是在正常运行的基础上加一层皮。但是你一旦对一段代码加上try，就等于显示地承诺编译器，对这段代码可能抛出的异常进行捕获而非向上抛出处理。如果是普通异常，编译器要求必须用catch捕获以便进一步处理；如果运行时异常，捕获然后丢弃并且+finally扫尾处理，或者加上catch捕获以便进一步处理。</p>
<p>至于加上finally，则是在不管有没捕获异常，都要进行的“扫尾”处理。</p>
<h4 id="75-try-catch-finally-中，如果-catch-中-return-了，finally-还会执行吗？"><a href="#75-try-catch-finally-中，如果-catch-中-return-了，finally-还会执行吗？" class="headerlink" title="75. try-catch-finally 中，如果 catch 中 return 了，finally 还会执行吗？"></a>75. try-catch-finally 中，如果 catch 中 return 了，finally 还会执行吗？</h4><p>答：会执行，在 return 前执行。</p>
<p>代码示例1：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * java面试题--如果catch里面有return语句，finally里面的代码还会执行吗？</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinallyDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(getInt());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getInt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(a / <span class="number">0</span>);</span><br><span class="line">            a = <span class="number">20</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line">            a = <span class="number">30</span>;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * return a 在程序执行到这一步的时候，这里不是return a 而是 return 30；这个返回路径就形成了</span></span><br><span class="line"><span class="comment">             * 但是呢，它发现后面还有finally，所以继续执行finally的内容，a=40</span></span><br><span class="line"><span class="comment">             * 再次回到以前的路径,继续走return 30，形成返回路径之后，这里的a就不是a变量了，而是常量30</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            a = <span class="number">40</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//      return a;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果：30</p>
<p>代码示例2：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java_02;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * java面试题--如果catch里面有return语句，finally里面的代码还会执行吗？</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinallyDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(getInt());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getInt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(a / <span class="number">0</span>);</span><br><span class="line">            a = <span class="number">20</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line">            a = <span class="number">30</span>;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * return a 在程序执行到这一步的时候，这里不是return a 而是 return 30；这个返回路径就形成了</span></span><br><span class="line"><span class="comment">             * 但是呢，它发现后面还有finally，所以继续执行finally的内容，a=40</span></span><br><span class="line"><span class="comment">             * 再次回到以前的路径,继续走return 30，形成返回路径之后，这里的a就不是a变量了，而是常量30</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            a = <span class="number">40</span>;</span><br><span class="line">            <span class="keyword">return</span> a; <span class="comment">//如果这样，就又重新形成了一条返回路径，由于只能通过1个return返回，所以这里直接返回40</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//      return a;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果：40</p>
<h4 id="76-常见的异常类有哪些？"><a href="#76-常见的异常类有哪些？" class="headerlink" title="76. 常见的异常类有哪些？"></a>76. 常见的异常类有哪些？</h4><ul>
<li>NullPointerException：当应用程序试图访问空对象时，则抛出该异常。</li>
<li>SQLException：提供关于数据库访问错误或其他错误信息的异常。</li>
<li>IndexOutOfBoundsException：指示某排序索引（例如对数组、字符串或向量的排序）超出范围时抛出。</li>
<li>NumberFormatException：当应用程序试图将字符串转换成一种数值类型，但该字符串不能转换为适当格式时，抛出该异常。</li>
<li>FileNotFoundException：当试图打开指定路径名表示的文件失败时，抛出此异常。</li>
<li>IOException：当发生某种I/O异常时，抛出此异常。此类是失败或中断的I/O操作生成的异常的通用类。</li>
<li>ClassCastException：当试图将对象强制转换为不是实例的子类时，抛出该异常。</li>
<li>ArrayStoreException：试图将错误类型的对象存储到一个对象数组时抛出的异常。</li>
<li>IllegalArgumentException：抛出的异常表明向方法传递了一个不合法或不正确的参数。</li>
<li>ArithmeticException：当出现异常的运算条件时，抛出此异常。例如，一个整数“除以零”时，抛出此类的一个实例。</li>
<li>NegativeArraySizeException：如果应用程序试图创建大小为负的数组，则抛出该异常。</li>
<li>NoSuchMethodException：无法找到某一特定方法时，抛出该异常。</li>
<li>SecurityException：由安全管理器抛出的异常，指示存在安全侵犯。</li>
<li>UnsupportedOperationException：当不支持请求的操作时，抛出该异常。</li>
<li>RuntimeExceptionRuntimeException：是那些可能在Java虚拟机正常运行期间抛出的异常的超类。</li>
</ul>
<h2 id="八、网络"><a href="#八、网络" class="headerlink" title="八、网络"></a>八、网络</h2><h4 id="77-http-响应码-301-和-302-代表的是什么？有什么区别？"><a href="#77-http-响应码-301-和-302-代表的是什么？有什么区别？" class="headerlink" title="77. http 响应码 301 和 302 代表的是什么？有什么区别？"></a>77. http 响应码 301 和 302 代表的是什么？有什么区别？</h4><p>答：301，302 都是HTTP状态的编码，都代表着某个URL发生了转移。</p>
<p>区别：</p>
<ul>
<li>301 redirect: 301 代表永久性转移(Permanently Moved)。</li>
<li>302 redirect: 302 代表暂时性转移(Temporarily Moved )。</li>
</ul>
<h4 id="78-forward-和-redirect-的区别？"><a href="#78-forward-和-redirect-的区别？" class="headerlink" title="78. forward 和 redirect 的区别？"></a>78. forward 和 redirect 的区别？</h4><p>Forward和Redirect代表了两种请求转发方式：直接转发和间接转发。</p>
<p><strong>直接转发方式</strong>（Forward），客户端和浏览器只发出一次请求，Servlet、HTML、JSP或其它信息资源，由第二个信息资源响应该请求，在请求对象request中，保存的对象对于每个信息资源是共享的。</p>
<p><strong>间接转发方式</strong>（Redirect）实际是两次HTTP请求，服务器端在响应第一次请求的时候，让浏览器再向另外一个URL发出请求，从而达到转发的目的。</p>
<p><strong>举个通俗的例子：</strong></p>
<p>直接转发就相当于：“A找B借钱，B说没有，B去找C借，借到借不到都会把消息传递给A”；</p>
<p>间接转发就相当于：“A找B借钱，B说没有，让A去找C借”。</p>
<h4 id="79-简述-tcp-和-udp的区别？"><a href="#79-简述-tcp-和-udp的区别？" class="headerlink" title="79. 简述 tcp 和 udp的区别？"></a>79. 简述 tcp 和 udp的区别？</h4><ul>
<li>TCP面向连接（如打电话要先拨号建立连接）;UDP是无连接的，即发送数据之前不需要建立连接。</li>
<li>CP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保证可靠交付。</li>
<li>cp通过校验和，重传控制，序号标识，滑动窗口、确认应答实现可靠传输。如丢包时的重发控制，还可以对次序乱掉的分包进行顺序控制。</li>
<li>UDP具有较好的实时性，工作效率比TCP高，适用于对高速传输和实时性有较高的通信或广播通信。</li>
<li>每一条TCP连接只能是点到点的;UDP支持一对一，一对多，多对一和多对多的交互通信。</li>
<li>TCP对系统资源要求较多，UDP对系统资源要求较少。</li>
</ul>
<h4 id="80-tcp-为什么要三次握手，两次不行吗？为什么？"><a href="#80-tcp-为什么要三次握手，两次不行吗？为什么？" class="headerlink" title="80. tcp 为什么要三次握手，两次不行吗？为什么？"></a>80. tcp 为什么要三次握手，两次不行吗？为什么？</h4><p>为了实现可靠数据传输， TCP 协议的通信双方， 都必须维护一个序列号， 以标识发送出去的数据包中， 哪些是已经被对方收到的。 三次握手的过程即是通信双方相互告知序列号起始值， 并确认对方已经收到了序列号起始值的必经步骤。</p>
<p>如果只是两次握手， 至多只有连接发起方的起始序列号能被确认， 另一方选择的序列号则得不到确认。</p>
<h4 id="81-说一下-tcp-粘包是怎么产生的？"><a href="#81-说一下-tcp-粘包是怎么产生的？" class="headerlink" title="81. 说一下 tcp 粘包是怎么产生的？"></a>81. 说一下 tcp 粘包是怎么产生的？</h4><p>①. 发送方产生粘包</p>
<p>采用TCP协议传输数据的客户端与服务器经常是保持一个长连接的状态（一次连接发一次数据不存在粘包），双方在连接不断开的情况下，可以一直传输数据；但当发送的数据包过于的小时，那么TCP协议默认的会启用Nagle算法，将这些较小的数据包进行合并发送（缓冲区数据发送是一个堆压的过程）；这个合并过程就是在发送缓冲区中进行的，也就是说数据发送出来它已经是粘包的状态了。</p>
<p><img src="https://img-blog.csdnimg.cn/20190403202154257.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTMyNTE2OTAyMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> ②. 接收方产生粘包</p>
<p>接收方采用TCP协议接收数据时的过程是这样的：数据到底接收方，从网络模型的下方传递至传输层，传输层的TCP协议处理是将其放置接收缓冲区，然后由应用层来主动获取（C语言用recv、read等函数）；这时会出现一个问题，就是我们在程序中调用的读取数据函数不能及时的把缓冲区中的数据拿出来，而下一个数据又到来并有一部分放入的缓冲区末尾，等我们读取数据时就是一个粘包。（放数据的速度 &gt; 应用层拿数据速度） <img src="https://img-blog.csdnimg.cn/20190403202229293.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTMyNTE2OTAyMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4 id="82-OSI-的七层模型都有哪些？"><a href="#82-OSI-的七层模型都有哪些？" class="headerlink" title="82. OSI 的七层模型都有哪些？"></a>82. OSI 的七层模型都有哪些？</h4><ul>
<li>应用层：网络服务与最终用户的一个接口。</li>
<li>表示层：数据的表示、安全、压缩。</li>
<li>会话层：建立、管理、终止会话。</li>
<li>传输层：定义传输数据的协议端口号，以及流控和差错校验。</li>
<li>网络层：进行逻辑地址寻址，实现不同网络之间的路径选择。</li>
<li>数据链路层：建立逻辑连接、进行硬件地址寻址、差错校验等功能。</li>
<li>物理层：建立、维护、断开物理连接。</li>
</ul>
<h4 id="83-get-和-post-请求有哪些区别？"><a href="#83-get-和-post-请求有哪些区别？" class="headerlink" title="83. get 和 post 请求有哪些区别？"></a>83. get 和 post 请求有哪些区别？</h4><ul>
<li>GET在浏览器回退时是无害的，而POST会再次提交请求。</li>
<li>GET产生的URL地址可以被Bookmark，而POST不可以。</li>
<li>GET请求会被浏览器主动cache，而POST不会，除非手动设置。</li>
<li>GET请求只能进行url编码，而POST支持多种编码方式。</li>
<li>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</li>
<li>GET请求在URL中传送的参数是有长度限制的，而POST没有。</li>
<li>参数的数据类型，GET只接受ASCII字符，而POST没有限制。</li>
<li>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。</li>
<li>GET参数通过URL传递，POST放在Request body中。</li>
</ul>
<h4 id="84-如何实现跨域？"><a href="#84-如何实现跨域？" class="headerlink" title="84. 如何实现跨域？"></a>84. 如何实现跨域？</h4><p><strong>方式一：图片ping或script标签跨域</strong></p>
<p><strong>图片ping</strong>常用于跟踪用户点击页面或动态广告曝光次数。<br> <strong>script标签</strong>可以得到从其他来源数据，这也是JSONP依赖的根据。</p>
<p><strong>方式二：JSONP跨域</strong></p>
<p>JSONP（JSON with Padding）是数据格式JSON的一种“使用模式”，可以让网页从别的网域要数据。根据 XmlHttpRequest 对象受到同源策略的影响，而利用 </p>
<ul>
<li>只能使用Get请求</li>
<li>不能注册success、error等事件监听函数，不能很容易的确定JSONP请求是否失败</li>
<li>JSONP是从其他域中加载代码执行，容易受到跨站请求伪造的攻击，其安全性无法确保</li>
</ul>
<p><strong>方式三：CORS</strong></p>
<p>Cross-Origin Resource Sharing（CORS）跨域资源共享是一份浏览器技术的规范，提供了 Web  服务从不同域传来沙盒脚本的方法，以避开浏览器的同源策略，确保安全的跨域数据传输。现代浏览器使用CORS在API容器如XMLHttpRequest来减少HTTP请求的风险来源。与 JSONP 不同，CORS 除了 GET 要求方法以外也支持其他的 HTTP 要求。服务器一般需要增加如下响应头的一种或几种：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">Access-Control-Allow-Methods: POST, GET, OPTIONS</span><br><span class="line">Access-Control-Allow-Headers: X-PINGOTHER, Content-Type</span><br><span class="line">Access-Control-Max-Age: <span class="number">86400</span></span><br></pre></td></tr></table></figure>

<p>跨域请求默认不会携带Cookie信息，如果需要携带，请配置下述参数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">"Access-Control-Allow-Credentials"</span>: <span class="keyword">true</span></span><br><span class="line"><span class="comment">// Ajax设置</span></span><br><span class="line"><span class="string">"withCredentials"</span>: <span class="keyword">true</span></span><br></pre></td></tr></table></figure>

<p><strong>方式四：window.name+iframe</strong></p>
<p>window.name通过在iframe（一般动态创建i）中加载跨域HTML文件来起作用。然后，<a href="http://xn--HTMLwindow-jv2pp7evpj2k84fhw3cxmbqzbzy2ixe2av98bskvhotia606ev90gsrhriu.name" target="_blank" rel="noopener">HTML文件将传递给请求者的字符串内容赋值给window.name</a>。然后，请求者可以检索window.name值作为响应。</p>
<ul>
<li>iframe标签的跨域能力；</li>
<li>indow.name属性值在文档刷新后依旧存在的能力（且最大允许2M左右）。</li>
</ul>
<p>每个iframe都有包裹它的window，而这个window是top window的子窗口。contentWindow属性返回元素的Window对象。你可以使用这个Window对象来访问iframe的文档及其内部DOM。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- </span><br><span class="line"> 下述用端口 </span><br><span class="line"> <span class="number">10000</span>表示：domainA</span><br><span class="line"> <span class="number">10001</span>表示：domainB</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- localhost:<span class="number">10000</span> --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> iframe = document.createElement(<span class="string">'iframe'</span>);</span><br><span class="line">  iframe.style.display = <span class="string">'none'</span>; <span class="comment">// 隐藏</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> state = <span class="number">0</span>; <span class="comment">// 防止页面无限刷新</span></span><br><span class="line">  iframe.onload = function() &#123;</span><br><span class="line">      <span class="keyword">if</span>(state === <span class="number">1</span>) &#123;</span><br><span class="line">          console.log(JSON.parse(iframe.contentWindow.name));</span><br><span class="line">          <span class="comment">// 清除创建的iframe</span></span><br><span class="line">          iframe.contentWindow.document.write(<span class="string">''</span>);</span><br><span class="line">          iframe.contentWindow.close();</span><br><span class="line">          document.body.removeChild(iframe);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(state === <span class="number">0</span>) &#123;</span><br><span class="line">          state = <span class="number">1</span>;</span><br><span class="line">          <span class="comment">// 加载完成，指向当前域，防止错误(proxy.html为空白页面)</span></span><br><span class="line">          <span class="comment">// Blocked a frame with origin "http://localhost:10000" from accessing a cross-origin frame.</span></span><br><span class="line">          iframe.contentWindow.location = <span class="string">'http://localhost:10000/proxy.html'</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  iframe.src = <span class="string">'http://localhost:10001'</span>;</span><br><span class="line">  document.body.appendChild(iframe);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- localhost:<span class="number">10001</span> --&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">...</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  window.name = JSON.stringify(&#123;a: <span class="number">1</span>, b: <span class="number">2</span>&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><strong>方式五：window.postMessage()</strong></p>
<p>HTML5新特性，可以用来向其他所有的 window 对象发送消息。需要注意的是我们必须要保证所有的脚本执行完才发送 MessageEvent，如果在函数执行的过程中调用了它，就会让后面的函数超时无法执行。</p>
<p>下述代码实现了跨域存储localStorage</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- </span><br><span class="line"> 下述用端口 </span><br><span class="line"> <span class="number">10000</span>表示：domainA</span><br><span class="line"> <span class="number">10001</span>表示：domainB</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- localhost:<span class="number">10000</span> --&gt;</span><br><span class="line">&lt;iframe src=<span class="string">"http://localhost:10001/msg.html"</span> name=<span class="string">"myPostMessage"</span> style=<span class="string">"display:none;"</span>&gt;</span><br><span class="line">&lt;/iframe&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="function">function <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      LSsetItem(<span class="string">'test'</span>, <span class="string">'Test: '</span> + <span class="keyword">new</span> Date());</span><br><span class="line">      LSgetItem(<span class="string">'test'</span>, function(value) &#123;</span><br><span class="line">          console.log(<span class="string">'value: '</span> + value);</span><br><span class="line">      &#125;);</span><br><span class="line">      LSremoveItem(<span class="string">'test'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> callbacks = &#123;&#125;;</span><br><span class="line">  window.addEventListener(<span class="string">'message'</span>, function(event) &#123;</span><br><span class="line">      <span class="keyword">if</span> (event.source === frames[<span class="string">'myPostMessage'</span>]) &#123;</span><br><span class="line">          console.log(event)</span><br><span class="line">          var data = /^#localStorage#(\d+)(null)?#([\S\s]*)/.exec(event.data);</span><br><span class="line">          <span class="keyword">if</span> (data) &#123;</span><br><span class="line">              <span class="keyword">if</span> (callbacks[data[<span class="number">1</span>]]) &#123;</span><br><span class="line">                  callbacks[data[<span class="number">1</span>]](data[<span class="number">2</span>] === <span class="string">'null'</span> ? <span class="keyword">null</span> : data[<span class="number">3</span>]);</span><br><span class="line">              &#125;</span><br><span class="line">              delete callbacks[data[<span class="number">1</span>]];</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> domain = <span class="string">'*'</span>;</span><br><span class="line">  <span class="comment">// 增加</span></span><br><span class="line">  <span class="function">function <span class="title">LSsetItem</span><span class="params">(key, value)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> obj = &#123;</span><br><span class="line">          setItem: key,</span><br><span class="line">          value: value</span><br><span class="line">      &#125;;</span><br><span class="line">      frames[<span class="string">'myPostMessage'</span>].postMessage(JSON.stringify(obj), domain);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获取</span></span><br><span class="line">  <span class="function">function <span class="title">LSgetItem</span><span class="params">(key, callback)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> identifier = <span class="keyword">new</span> Date().getTime();</span><br><span class="line">      <span class="keyword">var</span> obj = &#123;</span><br><span class="line">          identifier: identifier,</span><br><span class="line">          getItem: key</span><br><span class="line">      &#125;;</span><br><span class="line">      callbacks[identifier] = callback;</span><br><span class="line">      frames[<span class="string">'myPostMessage'</span>].postMessage(JSON.stringify(obj), domain);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 删除</span></span><br><span class="line">  <span class="function">function <span class="title">LSremoveItem</span><span class="params">(key)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> obj = &#123;</span><br><span class="line">          removeItem: key</span><br><span class="line">      &#125;;</span><br><span class="line">      frames[<span class="string">'myPostMessage'</span>].postMessage(JSON.stringify(obj), domain);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- localhost:<span class="number">10001</span> --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  window.addEventListener(<span class="string">'message'</span>, function(event) &#123;</span><br><span class="line">    console.log(<span class="string">'Receiver debugging'</span>, event);</span><br><span class="line">    <span class="keyword">if</span> (event.origin == <span class="string">'http://localhost:10000'</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> data = JSON.parse(event.data);</span><br><span class="line">      <span class="keyword">if</span> (<span class="string">'setItem'</span> in data) &#123;</span><br><span class="line">        localStorage.setItem(data.setItem, data.value);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">'getItem'</span> in data) &#123;</span><br><span class="line">        <span class="keyword">var</span> gotItem = localStorage.getItem(data.getItem);</span><br><span class="line">        event.source.postMessage(</span><br><span class="line">          <span class="string">'#localStorage#'</span> + data.identifier +</span><br><span class="line">          (gotItem === <span class="keyword">null</span> ? <span class="string">'null#'</span> : <span class="string">'#'</span> + gotItem),</span><br><span class="line">          event.origin</span><br><span class="line">        );</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">'removeItem'</span> in data) &#123;</span><br><span class="line">        localStorage.removeItem(data.removeItem);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="keyword">false</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>注意Safari一下，会报错：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Blocked a frame with origin “http:<span class="comment">//localhost:10001” from </span></span><br><span class="line">accessing a frame with origin “http:<span class="comment">//localhost:10000“. </span></span><br><span class="line">Protocols, domains, and ports must match.</span><br><span class="line"></span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure>

<p>避免该错误，可以在Safari浏览器中勾选开发菜单==&gt;停用跨域限制。或者只能使用服务器端转存的方式实现，因为Safari浏览器默认只支持CORS跨域请求。</p>
<p><strong>方式六：修改document.domain跨子域</strong></p>
<p>前提条件：这两个域名必须属于同一个基础域名!而且所用的协议，端口都要一致，否则无法利用document.domain进行跨域，所以只能跨子域</p>
<p>在根域范围内，允许把domain属性的值设置为它的上一级域。例如，在”<a href="http://aaa.xxx.com" target="_blank" rel="noopener">aaa.xxx.com</a>”域内，可以把domain设置为 “<a href="http://xxx.com" target="_blank" rel="noopener">xxx.com</a>” 但不能设置为 “<a href="http://xxx.org" target="_blank" rel="noopener">xxx.org</a>” 或者”com”。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">现在存在两个域名aaa.xxx.com和bbb.xxx.com。在aaa下嵌入bbb的页面，</span><br><span class="line">由于其document.name不一致，无法在aaa下操作bbb的js。</span><br><span class="line">可以在aaa和bbb下通过js将document.name = <span class="string">'xxx.com'</span>;</span><br><span class="line">设置一致，来达到互相访问的作用。</span><br><span class="line"></span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure>

<p><strong>方式七：WebSocket</strong></p>
<p>WebSocket protocol 是HTML5一种新的协议。它实现了浏览器与服务器全双工通信，同时允许跨域通讯，是server push技术的一种很棒的实现。相关文章，请查看：WebSocket、WebSocket-SockJS</p>
<p>需要注意：WebSocket对象不支持DOM 2级事件侦听器，必须使用DOM 0级语法分别定义各个事件。</p>
<p><strong>方式八：代理</strong></p>
<p>同源策略是针对浏览器端进行的限制，可以通过服务器端来解决该问题</p>
<p>DomainA客户端（浏览器） ==&gt; DomainA服务器 ==&gt; DomainB服务器 ==&gt; DomainA客户端（浏览器）</p>
<h4 id="85-说一下-JSONP-实现原理？"><a href="#85-说一下-JSONP-实现原理？" class="headerlink" title="85.说一下 JSONP 实现原理？"></a>85.说一下 JSONP 实现原理？</h4><p>jsonp 即  json+padding，动态创建script标签，利用script标签的src属性可以获取任何域下的js脚本，通过这个特性(也可以说漏洞)，服务器端不再返回json格式，而是返回一段调用某个函数的js代码，在src中进行了调用，这样实现了跨域。</p>
<h2 id="九、设计模式"><a href="#九、设计模式" class="headerlink" title="九、设计模式"></a>九、设计模式</h2><h4 id="86-说一下你熟悉的设计模式？"><a href="#86-说一下你熟悉的设计模式？" class="headerlink" title="86. 说一下你熟悉的设计模式？"></a>86. 说一下你熟悉的设计模式？</h4><p>参考：<a href="http://mp.weixin.qq.com/s?__biz=MzIwMTY0NDU3Nw==&mid=2651938221&idx=1&sn=9cb29d1eb0fdbdb5f976306b08d5bdcc&chksm=8d0f32e3ba78bbf547c6039038682706a2eaf83002158c58060d5eb57bdd83eb966a1e223ef6&scene=21#wechat_redirect" target="_blank" rel="noopener">常用的设计模式汇总，超详细！</a></p>
<h4 id="87-简单工厂和抽象工厂有什么区别？"><a href="#87-简单工厂和抽象工厂有什么区别？" class="headerlink" title="87. 简单工厂和抽象工厂有什么区别？"></a>87. 简单工厂和抽象工厂有什么区别？</h4><p><strong>简单工厂模式</strong>：</p>
<p>这个模式本身很简单而且使用在业务较简单的情况下。一般用于小项目或者具体产品很少扩展的情况（这样工厂类才不用经常更改）。</p>
<p>它由三种角色组成：</p>
<ul>
<li>工厂类角色：这是本模式的核心，含有一定的商业逻辑和判断逻辑，根据逻辑不同，产生具体的工厂产品。如例子中的Driver类。</li>
<li>抽象产品角色：它一般是具体产品继承的父类或者实现的接口。由接口或者抽象类来实现。如例中的Car接口。</li>
<li>具体产品角色：工厂类所创建的对象就是此角色的实例。在java中由一个具体类实现，如例子中的Benz、Bmw类。</li>
</ul>
<p> 来用类图来清晰的表示下的它们之间的关系：</p>
<p><img src="https://img-blog.csdnimg.cn/20190329004034280.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NoYWRvd196ZWQ=,size_16,color_FFFFFF,t_70" alt="img"></p>
<p><strong>抽象工厂模式：</strong></p>
<p>先来认识下什么是产品族： 位于不同产品等级结构中，功能相关联的产品组成的家族。</p>
<p><img src="https://img-blog.csdnimg.cn/20190329004053707.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NoYWRvd196ZWQ=,size_16,color_FFFFFF,t_70" alt="img"></p>
<p>图中的BmwCar和BenzCar就是两个产品树（产品层次结构）；而如图所示的BenzSportsCar和BmwSportsCar就是一个产品族。他们都可以放到跑车家族中，因此功能有所关联。同理BmwBussinessCar和BenzBusinessCar也是一个产品族。</p>
<p><strong>可以这么说，它和工厂方法模式的区别就在于需要创建对象的复杂程度上。而且抽象工厂模式是三个里面最为抽象、最具一般性的。抽象工厂模式的用意为：给客户端提供一个接口，可以创建多个产品族中的产品对象。</strong></p>
<p>而且使用抽象工厂模式还要满足一下条件：</p>
<ol>
<li>系统中有多个产品族，而系统一次只可能消费其中一族产品</li>
<li>同属于同一个产品族的产品以其使用。</li>
</ol>
<p>来看看抽象工厂模式的各个角色（和工厂方法的如出一辙）：</p>
<ul>
<li>抽象工厂角色： 这是工厂方法模式的核心，它与应用程序无关。是具体工厂角色必须实现的接口或者必须继承的父类。在java中它由抽象类或者接口来实现。</li>
<li>具体工厂角色：它含有和具体业务逻辑有关的代码。由应用程序调用以创建对应的具体产品的对象。在java中它由具体的类来实现。</li>
<li>抽象产品角色：它是具体产品继承的父类或者是实现的接口。在java中一般有抽象类或者接口来实现。</li>
<li>具体产品角色：具体工厂角色所创建的对象就是此角色的实例。在java中由具体的类来实现。</li>
</ul>
<h2 id="十、Spring-Spring-MVC"><a href="#十、Spring-Spring-MVC" class="headerlink" title="十、Spring / Spring MVC"></a>十、Spring / Spring MVC</h2><h4 id="88-为什么要使用-spring？"><a href="#88-为什么要使用-spring？" class="headerlink" title="88. 为什么要使用 spring？"></a>88. 为什么要使用 spring？</h4><p><strong>1.简介</strong></p>
<ul>
<li>目的：解决企业应用开发的复杂性</li>
<li>功能：使用基本的JavaBean代替EJB，并提供了更多的企业应用功能</li>
<li>范围：任何Java应用</li>
</ul>
<p>简单来说，Spring是一个轻量级的控制反转(IoC)和面向切面(AOP)的容器框架。</p>
<p><strong>2.轻量</strong>　</p>
<p>从大小与开销两方面而言Spring都是轻量的。完整的Spring框架可以在一个大小只有1MB多的JAR文件里发布。并且Spring所需的处理开销也是微不足道的。此外，Spring是非侵入式的：典型地，Spring应用中的对象不依赖于Spring的特定类。</p>
<p><strong>3.控制反转</strong>　　</p>
<p>Spring通过一种称作控制反转（IoC）的技术促进了松耦合。当应用了IoC，一个对象依赖的其它对象会通过被动的方式传递进来，而不是这个对象自己创建或者查找依赖对象。你可以认为IoC与JNDI相反——不是对象从容器中查找依赖，而是容器在对象初始化时不等对象请求就主动将依赖传递给它。</p>
<p><strong>4.面向切面</strong>　　</p>
<p>Spring提供了面向切面编程的丰富支持，允许通过分离应用的业务逻辑与系统级服务（例如审计（auditing）和事务（transaction）管理）进行内聚性的开发。应用对象只实现它们应该做的——完成业务逻辑——仅此而已。它们并不负责（甚至是意识）其它的系统级关注点，例如日志或事务支持。</p>
<p><strong>5.容器</strong></p>
<p>Spring包含并管理应用对象的配置和生命周期，在这个意义上它是一种容器，你可以配置你的每个bean如何被创建——基于一个可配置原型（prototype），你的bean可以创建一个单独的实例或者每次需要时都生成一个新的实例——以及它们是如何相互关联的。然而，Spring不应该被混同于传统的重量级的EJB容器，它们经常是庞大与笨重的，难以使用。</p>
<p><strong>6.框架</strong></p>
<p>Spring可以将简单的组件配置、组合成为复杂的应用。在Spring中，应用对象被声明式地组合，典型地是在一个XML文件里。Spring也提供了很多基础功能（事务管理、持久化框架集成等等），将应用逻辑的开发留给了你。</p>
<p>所有Spring的这些特征使你能够编写更干净、更可管理、并且更易于测试的代码。它们也为Spring中的各种模块提供了基础支持。</p>
<h4 id="89-解释一下什么是-aop？"><a href="#89-解释一下什么是-aop？" class="headerlink" title="89. 解释一下什么是 aop？"></a>89. 解释一下什么是 aop？</h4><p>AOP（Aspect-Oriented Programming，面向切面编程），可以说是OOP（Object-Oriented  Programing，面向对象编程）的补充和完善。OOP引入封装、继承和多态性等概念来建立一种对象层次结构，用以模拟公共行为的一个集合。当我们需要为分散的对象引入公共行为的时候，OOP则显得无能为力。也就是说，OOP允许你定义从上到下的关系，但并不适合定义从左到右的关系。例如日志功能。日志代码往往水平地散布在所有对象层次中，而与它所散布到的对象的核心功能毫无关系。对于其他类型的代码，如安全性、异常处理和透明的持续性也是如此。这种散布在各处的无关的代码被称为横切（cross-cutting）代码，在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。</p>
<p>而AOP技术则恰恰相反，它利用一种称为“横切”的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其名为“Aspect”，即方面。所谓“方面”，简单地说，就是将那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可操作性和可维护性。AOP代表的是一个横向的关系，如果说“对象”是一个空心的圆柱体，其中封装的是对象的属性和行为；那么面向方面编程的方法，就仿佛一把利刃，将这些空心圆柱体剖开，以获得其内部的消息。而剖开的切面，也就是所谓的“方面”了。然后它又以巧夺天功的妙手将这些剖开的切面复原，不留痕迹。</p>
<p>使用“横切”技术，AOP把软件系统分为两个部分：核心关注点和横切关注点。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。横切关注点的一个特点是，他们经常发生在核心关注点的多处，而各处都基本相似。比如权限认证、日志、事务处理。Aop 的作用在于分离系统中的各种关注点，将核心关注点和横切关注点分离开来。正如Avanade公司的高级方案构架师Adam  Magee所说，AOP的核心思想就是“将应用程序中的商业逻辑同对其提供支持的通用服务进行分离。”</p>
<h4 id="90-解释一下什么是-ioc？"><a href="#90-解释一下什么是-ioc？" class="headerlink" title="90. 解释一下什么是 ioc？"></a>90. 解释一下什么是 ioc？</h4><p>IOC是Inversion of Control的缩写，多数书籍翻译成“控制反转”。</p>
<p>1996年，Michael Mattson在一篇有关探讨面向对象框架的文章中，首先提出了IOC  这个概念。对于面向对象设计及编程的基本思想，前面我们已经讲了很多了，不再赘述，简单来说就是把复杂系统分解成相互合作的对象，这些对象类通过封装以后，内部实现对外部是透明的，从而降低了解决问题的复杂度，而且可以灵活地被重用和扩展。</p>
<p>IOC理论提出的观点大体是这样的：借助于“第三方”实现具有依赖关系的对象之间的解耦。如下图：</p>
<p><img src="https://img-blog.csdnimg.cn/20190329004147894.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NoYWRvd196ZWQ=,size_16,color_FFFFFF,t_70" alt="img"></p>
<p>图 IOC解耦过程</p>
<p>大家看到了吧，由于引进了中间位置的“第三方”，也就是IOC容器，使得A、B、C、D这4个对象没有了耦合关系，齿轮之间的传动全部依靠“第三方”了，全部对象的控制权全部上缴给“第三方”IOC容器，所以，IOC容器成了整个系统的关键核心，它起到了一种类似“粘合剂”的作用，把系统中的所有对象粘合在一起发挥作用，如果没有这个“粘合剂”，对象与对象之间会彼此失去联系，这就是有人把IOC容器比喻成“粘合剂”的由来。</p>
<p>我们再来做个试验：把上图中间的IOC容器拿掉，然后再来看看这套系统：</p>
<p><img src="https://img-blog.csdnimg.cn/20190329004205575.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NoYWRvd196ZWQ=,size_16,color_FFFFFF,t_70" alt="img"></p>
<p>图 拿掉IOC容器后的系统</p>
<p>我们现在看到的画面，就是我们要实现整个系统所需要完成的全部内容。这时候，A、B、C、D这4个对象之间已经没有了耦合关系，彼此毫无联系，这样的话，当你在实现A的时候，根本无须再去考虑B、C和D了，对象之间的依赖关系已经降低到了最低程度。所以，如果真能实现IOC容器，对于系统开发而言，这将是一件多么美好的事情，参与开发的每一成员只要实现自己的类就可以了，跟别人没有任何关系！</p>
<p>我们再来看看，控制反转(IOC)到底为什么要起这么个名字？我们来对比一下：</p>
<p>软件系统在没有引入IOC容器之前，如图1所示，对象A依赖于对象B，那么对象A在初始化或者运行到某一点的时候，自己必须主动去创建对象B或者使用已经创建的对象B。无论是创建还是使用对象B，控制权都在自己手上。</p>
<p>软件系统在引入IOC容器之后，这种情形就完全改变了，如图3所示，由于IOC容器的加入，对象A与对象B之间失去了直接联系，所以，当对象A运行到需要对象B的时候，IOC容器会主动创建一个对象B注入到对象A需要的地方。</p>
<p>通过前后的对比，我们不难看出来：对象A获得依赖对象B的过程,由主动行为变为了被动行为，控制权颠倒过来了，这就是“控制反转”这个名称的由来。</p>
<h4 id="91-spring-有哪些主要模块？"><a href="#91-spring-有哪些主要模块？" class="headerlink" title="91. spring 有哪些主要模块？"></a>91. spring 有哪些主要模块？</h4><p>Spring框架至今已集成了20多个模块。这些模块主要被分如下图所示的核心容器、数据访问/集成,、Web、AOP（面向切面编程）、工具、消息和测试模块。</p>
<p><img src="https://img-blog.csdnimg.cn/20190329004225554.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NoYWRvd196ZWQ=,size_16,color_FFFFFF,t_70" alt="img"></p>
<p>更多信息：howtodoinjava.com/java-spring-framework-tutorials/</p>
<h4 id="92-spring-常用的注入方式有哪些？"><a href="#92-spring-常用的注入方式有哪些？" class="headerlink" title="92. spring 常用的注入方式有哪些？"></a>92. spring 常用的注入方式有哪些？</h4><p>Spring通过DI（依赖注入）实现IOC（控制反转），常用的注入方式主要有三种：</p>
<ol>
<li>构造方法注入</li>
<li>setter注入</li>
<li>基于注解的注入</li>
</ol>
<h4 id="93-spring-中的-bean-是线程安全的吗？"><a href="#93-spring-中的-bean-是线程安全的吗？" class="headerlink" title="93. spring 中的 bean 是线程安全的吗？"></a>93. spring 中的 bean 是线程安全的吗？</h4><p>Spring容器中的Bean是否线程安全，容器本身并没有提供Bean的线程安全策略，因此可以说spring容器中的Bean本身不具备线程安全的特性，但是具体还是要结合具体scope的Bean去研究。</p>
<h4 id="94-spring-支持几种-bean-的作用域？"><a href="#94-spring-支持几种-bean-的作用域？" class="headerlink" title="94. spring 支持几种 bean 的作用域？"></a>94. spring 支持几种 bean 的作用域？</h4><p>当通过spring容器创建一个Bean实例时，不仅可以完成Bean实例的实例化，还可以为Bean指定特定的作用域。Spring支持如下5种作用域：</p>
<ul>
<li>singleton：单例模式，在整个Spring IoC容器中，使用singleton定义的Bean将只有一个实例</li>
<li>prototype：原型模式，每次通过容器的getBean方法获取prototype定义的Bean时，都将产生一个新的Bean实例</li>
<li>request：对于每次HTTP请求，使用request定义的Bean都将产生一个新实例，即每次HTTP请求将会产生不同的Bean实例。只有在Web应用中使用Spring时，该作用域才有效</li>
<li>session：对于每次HTTP Session，使用session定义的Bean豆浆产生一个新实例。同样只有在Web应用中使用Spring时，该作用域才有效</li>
<li>globalsession：每个全局的HTTP Session，使用session定义的Bean都将产生一个新实例。典型情况下，仅在使用portlet context的时候有效。同样只有在Web应用中使用Spring时，该作用域才有效</li>
</ul>
<p>其中比较常用的是singleton和prototype两种作用域。对于singleton作用域的Bean，每次请求该Bean都将获得相同的实例。容器负责跟踪Bean实例的状态，负责维护Bean实例的生命周期行为；如果一个Bean被设置成prototype作用域，程序每次请求该id的Bean，Spring都会新建一个Bean实例，然后返回给程序。在这种情况下，Spring容器仅仅使用new 关键字创建Bean实例，一旦创建成功，容器不在跟踪实例，也不会维护Bean实例的状态。</p>
<p>如果不指定Bean的作用域，Spring默认使用singleton作用域。Java在创建Java实例时，需要进行内存申请；销毁实例时，需要完成垃圾回收，这些工作都会导致系统开销的增加。因此，prototype作用域Bean的创建、销毁代价比较大。而singleton作用域的Bean实例一旦创建成功，可以重复使用。因此，除非必要，否则尽量避免将Bean被设置成prototype作用域。</p>
<h4 id="95-spring-自动装配-bean-有哪些方式？"><a href="#95-spring-自动装配-bean-有哪些方式？" class="headerlink" title="95. spring 自动装配 bean 有哪些方式？"></a>95. spring 自动装配 bean 有哪些方式？</h4><p>Spring容器负责创建应用程序中的bean同时通过ID来协调这些对象之间的关系。作为开发人员，我们需要告诉Spring要创建哪些bean并且如何将其装配到一起。</p>
<p>spring中bean装配有两种方式：</p>
<ul>
<li>隐式的bean发现机制和自动装配</li>
<li>在java代码或者XML中进行显示配置</li>
</ul>
<p>当然这些方式也可以配合使用。</p>
<h4 id="96-spring-事务实现方式有哪些？"><a href="#96-spring-事务实现方式有哪些？" class="headerlink" title="96. spring 事务实现方式有哪些？"></a>96. spring 事务实现方式有哪些？</h4><ol>
<li>编程式事务管理对基于 POJO 的应用来说是唯一选择。我们需要在代码中调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。</li>
<li>基于 TransactionProxyFactoryBean 的声明式事务管理</li>
<li>基于 @Transactional 的声明式事务管理</li>
<li>基于 Aspectj AOP 配置事务</li>
</ol>
<h4 id="97-说一下-spring-的事务隔离？"><a href="#97-说一下-spring-的事务隔离？" class="headerlink" title="97. 说一下 spring 的事务隔离？"></a>97. 说一下 spring 的事务隔离？</h4><p>事务隔离级别指的是一个事务对数据的修改与另一个并行的事务的隔离程度，当多个事务同时访问相同数据时，如果没有采取必要的隔离机制，就可能发生以下问题：</p>
<ul>
<li>脏读：一个事务读到另一个事务未提交的更新数据。</li>
<li>幻读：例如第一个事务对一个表中的数据进行了修改，比如这种修改涉及到表中的“全部数据行”。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入“一行新数据”。那么，以后就会发生操作第一个事务的用户发现表中还存在没有修改的数据行，就好象发生了幻觉一样。</li>
<li>不可重复读：比方说在同一个事务中先后执行两条一模一样的select语句，期间在此次事务中没有执行过任何DDL语句，但先后得到的结果不一致，这就是不可重复读。</li>
</ul>
<h4 id="98-说一下-spring-mvc-运行流程？"><a href="#98-说一下-spring-mvc-运行流程？" class="headerlink" title="98. 说一下 spring mvc 运行流程？"></a>98. 说一下 spring mvc 运行流程？</h4><p><strong>Spring MVC运行流程图：</strong></p>
<p><img src="https://img-blog.csdnimg.cn/20190329004255659.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NoYWRvd196ZWQ=,size_16,color_FFFFFF,t_70" alt="img"></p>
<p><strong>Spring运行流程描述：</strong></p>
<ol>
<li><p>用户向服务器发送请求，请求被Spring 前端控制Servlet DispatcherServlet捕获；</p>
</li>
<li><p>DispatcherServlet对请求URL进行解析，得到请求资源标识符（URI）。然后根据该URI，调用HandlerMapping获得该Handler配置的所有相关的对象（包括Handler对象以及Handler对象对应的拦截器），最后以HandlerExecutionChain对象的形式返回； </p>
</li>
<li><p>DispatcherServlet 根据获得的Handler，选择一个合适的HandlerAdapter；（附注：如果成功获得HandlerAdapter后，此时将开始执行拦截器的preHandler(…)方法）</p>
</li>
<li><p>提取Request中的模型数据，填充Handler入参，开始执行Handler（Controller)。 在填充Handler的入参过程中，根据你的配置，Spring将帮你做一些额外的工作：</p>
<ul>
<li>HttpMessageConveter： 将请求消息（如Json、xml等数据）转换成一个对象，将对象转换为指定的响应信息</li>
<li>数据转换：对请求消息进行数据转换。如String转换成Integer、Double等</li>
<li>数据根式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等</li>
<li>数据验证： 验证数据的有效性（长度、格式等），验证结果存储到BindingResult或Error中</li>
</ul>
</li>
<li><p>Handler执行完成后，向DispatcherServlet 返回一个ModelAndView对象；</p>
</li>
<li><p>根据返回的ModelAndView，选择一个适合的ViewResolver（必须是已经注册到Spring容器中的ViewResolver)返回给DispatcherServlet ；</p>
</li>
<li><p>ViewResolver 结合Model和View，来渲染视图；</p>
</li>
<li><p>将渲染结果返回给客户端。</p>
</li>
</ol>
<h4 id="99-spring-mvc-有哪些组件？"><a href="#99-spring-mvc-有哪些组件？" class="headerlink" title="99. spring mvc 有哪些组件？"></a>99. spring mvc 有哪些组件？</h4><p>Spring MVC的核心组件：</p>
<ol>
<li>DispatcherServlet：中央控制器，把请求给转发到具体的控制类</li>
<li>Controller：具体处理请求的控制器</li>
<li>HandlerMapping：映射处理器，负责映射中央处理器转发给controller时的映射策略</li>
<li>ModelAndView：服务层返回的数据和视图层的封装类</li>
<li>ViewResolver：视图解析器，解析具体的视图</li>
<li>Interceptors ：拦截器，负责拦截我们定义的请求然后做处理工作</li>
</ol>
<h4 id="100-RequestMapping-的作用是什么？"><a href="#100-RequestMapping-的作用是什么？" class="headerlink" title="100. @RequestMapping 的作用是什么？"></a>100. @RequestMapping 的作用是什么？</h4><p>RequestMapping是一个用来处理请求地址映射的注解，可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。</p>
<p>RequestMapping注解有六个属性，下面我们把她分成三类进行说明。</p>
<p><strong>value， method：</strong></p>
<ul>
<li>value：指定请求的实际地址，指定的地址可以是URI Template 模式（后面将会说明）；</li>
<li>method：指定请求的method类型， GET、POST、PUT、DELETE等；</li>
</ul>
<p><strong>consumes，produces</strong></p>
<ul>
<li>consumes：指定处理请求的提交内容类型（Content-Type），例如application/json, text/html；</li>
<li>produces：指定返回的内容类型，仅当request请求头中的(Accept)类型中包含该指定类型才返回；</li>
</ul>
<p><strong>params，headers</strong></p>
<ul>
<li>params： 指定request中必须包含某些参数值是，才让该方法处理。</li>
<li>headers：指定request中必须包含某些指定的header值，才能让该方法处理请求。</li>
</ul>
<h4 id="101-Autowired-的作用是什么？"><a href="#101-Autowired-的作用是什么？" class="headerlink" title="101. @Autowired 的作用是什么？"></a>101. @Autowired 的作用是什么？</h4><p><strong>《@Autowired用法详解》：blog.csdn.net/u013257679/article/details/52295106</strong></p>
<h2 id="十一、Spring-Boot与Spring-Cloud"><a href="#十一、Spring-Boot与Spring-Cloud" class="headerlink" title="十一、Spring Boot与Spring Cloud"></a>十一、Spring Boot与Spring Cloud</h2><h4 id="102-什么是-spring-boot？"><a href="#102-什么是-spring-boot？" class="headerlink" title="102. 什么是 spring boot？"></a>102. 什么是 spring boot？</h4><p>在Spring框架这个大家族中，产生了很多衍生框架，比如  Spring、SpringMvc框架等，Spring的核心内容在于控制反转(IOC)和依赖注入(DI),所谓控制反转并非是一种技术，而是一种思想，在操作方面是指在spring配置文件中创建，依赖注入即为由spring容器为应用程序的某个对象提供资源，比如 引用对象、常量数据等。</p>
<p>SpringBoot是一个框架，一种全新的编程规范，他的产生简化了框架的使用，所谓简化是指简化了Spring众多框架中所需的大量且繁琐的配置文件，所以 Spring Boot是一个服务于框架的框架，服务范围是简化配置文件。</p>
<h4 id="103-为什么要用-spring-boot？"><a href="#103-为什么要用-spring-boot？" class="headerlink" title="103. 为什么要用 spring boot？"></a>103. 为什么要用 spring boot？</h4><p> Spring Boot使编码变简单</p>
<h4 id="104-spring-boot-核心配置文件是什么？"><a href="#104-spring-boot-核心配置文件是什么？" class="headerlink" title="104. spring boot 核心配置文件是什么？"></a>104. spring boot 核心配置文件是什么？</h4><p>Spring Boot提供了两种常用的配置文件：</p>
<ul>
<li>properties文件</li>
<li>yml文件</li>
</ul>
<h4 id="105-spring-boot-配置文件有哪几种类型？它们有什么区别？"><a href="#105-spring-boot-配置文件有哪几种类型？它们有什么区别？" class="headerlink" title="105. spring boot 配置文件有哪几种类型？它们有什么区别？"></a>105. spring boot 配置文件有哪几种类型？它们有什么区别？</h4><p>Spring  Boot提供了两种常用的配置文件，分别是properties文件和yml文件。相对于properties文件而言，yml文件更年轻，也有很多的坑。可谓成也萧何败萧何，yml通过空格来确定层级关系，使配置文件结构跟清晰，但也会因为微不足道的空格而破坏了层级关系。</p>
<h4 id="106-spring-boot-有哪些方式可以实现热部署？"><a href="#106-spring-boot-有哪些方式可以实现热部署？" class="headerlink" title="106. spring boot 有哪些方式可以实现热部署？"></a>106. spring boot 有哪些方式可以实现热部署？</h4><p>SpringBoot热部署实现有两种方式：</p>
<p>①. 使用spring loaded</p>
<p>在项目中添加如下代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- springBoot编译插件--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- spring热部署 --&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 该依赖在此处下载不下来，可以放置在build标签外部下载完成后再粘贴进plugin中 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springloaded<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>添加完毕后需要使用mvn指令运行：</p>
<p>首先找到IDEA中的Edit configurations ,然后进行如下操作：（点击左上角的”+”,然后选择maven将出现右侧面板，在红色划线部位输入如图所示指令，你可以为该指令命名(此处命名为MvnSpringBootRun)）</p>
<p><img src="https://img-blog.csdnimg.cn/20190403230646692.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTMyNTE2OTAyMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">点击保存将会在IDEA项目运行部位出现，点击绿色箭头运行即可<br> <img src="https://img-blog.csdnimg.cn/2019040323070447.png" alt="在这里插入图片描述"><br> ②. 使用spring-boot-devtools</p>
<p>在项目的pom文件中添加依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--热部署jar--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后：使用 shift+ctrl+alt+”/“ （IDEA中的快捷键） 选择”Registry” 然后勾选 compiler.automake.allow.when.app.running</p>
<h4 id="107-jpa-和-hibernate-有什么区别？"><a href="#107-jpa-和-hibernate-有什么区别？" class="headerlink" title="107. jpa 和 hibernate 有什么区别？"></a>107. jpa 和 hibernate 有什么区别？</h4><ul>
<li>JPA Java Persistence API，是Java EE 5的标准ORM接口，也是ejb3规范的一部分。</li>
<li>Hibernate，当今很流行的ORM框架，是JPA的一个实现，但是其功能是JPA的超集。</li>
<li>JPA和Hibernate之间的关系，可以简单的理解为JPA是标准接口，Hibernate是实现。那么Hibernate是如何实现与JPA的这种关系的呢。Hibernate主要是通过三个组件来实现的，及hibernate-annotation、hibernate-entitymanager和hibernate-core。</li>
<li>ibernate-annotation是Hibernate支持annotation方式配置的基础，它包括了标准的JPA annotation以及Hibernate自身特殊功能的annotation。</li>
<li>hibernate-core是Hibernate的核心实现，提供了Hibernate所有的核心功能。</li>
<li>hibernate-entitymanager实现了标准的JPA，可以把它看成hibernate-core和JPA之间的适配器，它并不直接提供ORM的功能，而是对hibernate-core进行封装，使得Hibernate符合JPA的规范。</li>
</ul>
<h4 id="108-什么是-spring-cloud？"><a href="#108-什么是-spring-cloud？" class="headerlink" title="108. 什么是 spring cloud？"></a>108. 什么是 spring cloud？</h4><p>从字面理解，Spring Cloud 就是致力于分布式系统、云服务的框架。</p>
<p>Spring Cloud 是整个 Spring 家族中新的成员，是最近云服务火爆的必然产物。</p>
<p>Spring Cloud 为开发人员提供了快速构建分布式系统中一些常见模式的工具，例如：<br> <img src="https://img-blog.csdnimg.cn/20190403230900922.png" alt="在这里插入图片描述"><br> 使用 Spring Cloud 开发人员可以开箱即用的实现这些模式的服务和应用程序。这些服务可以任何环境下运行，包括分布式环境，也包括开发人员自己的笔记本电脑以及各种托管平台。</p>
<h4 id="109-spring-cloud-断路器的作用是什么？"><a href="#109-spring-cloud-断路器的作用是什么？" class="headerlink" title="109. spring cloud 断路器的作用是什么？"></a>109. spring cloud 断路器的作用是什么？</h4><p>在Spring Cloud中使用了Hystrix  来实现断路器的功能，断路器可以防止一个应用程序多次试图执行一个操作，即很可能失败，允许它继续而不等待故障恢复或者浪费 CPU  周期，而它确定该故障是持久的。断路器模式也使应用程序能够检测故障是否已经解决，如果问题似乎已经得到纠正，应用程序可以尝试调用操作。</p>
<p>断路器增加了稳定性和灵活性，以一个系统，提供稳定性，而系统从故障中恢复，并尽量减少此故障的对性能的影响。它可以帮助快速地拒绝对一个操作，即很可能失败，而不是等待操作超时（或者不返回）的请求，以保持系统的响应时间。如果断路器提高每次改变状态的时间的事件，该信息可以被用来监测由断路器保护系统的部件的健康状况，或以提醒管理员当断路器跳闸，以在打开状态。</p>
<h4 id="110-spring-cloud-的核心组件有哪些？"><a href="#110-spring-cloud-的核心组件有哪些？" class="headerlink" title="110. spring cloud 的核心组件有哪些？"></a>110. spring cloud 的核心组件有哪些？</h4><p>①. 服务发现——Netflix Eureka</p>
<p>一个RESTful服务，用来定位运行在AWS地区（Region）中的中间层服务。由两个组件组成：Eureka服务器和Eureka客户端。Eureka服务器用作服务注册服务器。Eureka客户端是一个java客户端，用来简化与服务器的交互、作为轮询负载均衡器，并提供服务的故障切换支持。Netflix在其生产环境中使用的是另外的客户端，它提供基于流量、资源利用率以及出错状态的加权负载均衡。</p>
<p>②. 客服端负载均衡——Netflix Ribbon</p>
<p>Ribbon，主要提供客户侧的软件负载均衡算法。Ribbon客户端组件提供一系列完善的配置选项，比如连接超时、重试、重试算法等。Ribbon内置可插拔、可定制的负载均衡组件。</p>
<p>③. 断路器——Netflix Hystrix</p>
<p>断路器可以防止一个应用程序多次试图执行一个操作，即很可能失败，允许它继续而不等待故障恢复或者浪费 CPU 周期，而它确定该故障是持久的。断路器模式也使应用程序能够检测故障是否已经解决。如果问题似乎已经得到纠正，应用程序可以尝试调用操作。</p>
<p>④. 服务网关——Netflix Zuul</p>
<p>类似nginx，反向代理的功能，不过netflix自己增加了一些配合其他组件的特性。</p>
<p>⑤. 分布式配置——Spring Cloud Config</p>
<p>这个还是静态的，得配合Spring Cloud Bus实现动态的配置更新。</p>
<h2 id="十二、hibernate"><a href="#十二、hibernate" class="headerlink" title="十二、hibernate"></a>十二、hibernate</h2><h4 id="111-为什么要使用-hibernate？"><a href="#111-为什么要使用-hibernate？" class="headerlink" title="111. 为什么要使用 hibernate？"></a>111. 为什么要使用 hibernate？</h4><ul>
<li>对JDBC访问数据库的代码做了封装，大大简化了数据访问层繁琐的重复性代码。</li>
<li>Hibernate是一个基于JDBC的主流持久化框架，是一个优秀的ORM实现。他很大程度的简化DAO层的编码工作</li>
<li>hibernate使用Java反射机制，而不是字节码增强程序来实现透明性。</li>
<li>hibernate的性能非常好，因为它是个轻量级框架。映射的灵活性很出色。它支持各种关系数据库，从一对一到多对多的各种复杂关系。</li>
</ul>
<h4 id="112-什么是-ORM-框架？"><a href="#112-什么是-ORM-框架？" class="headerlink" title="112. 什么是 ORM 框架？"></a>112. 什么是 ORM 框架？</h4><p>对象-关系映射（Object-Relational  Mapping，简称ORM），面向对象的开发方法是当今企业级应用开发环境中的主流开发方法，关系数据库是企业级应用环境中永久存放数据的主流数据存储系统。对象和关系数据是业务实体的两种表现形式，业务实体在内存中表现为对象，在数据库中表现为关系数据。内存中的对象之间存在关联和继承关系，而在数据库中，关系数据无法直接表达多对多关联和继承关系。因此，对象-关系映射(ORM)系统一般以中间件的形式存在，主要实现程序对象到关系数据库数据的映射.</p>
<h4 id="113-hibernate-中如何在控制台查看打印的-sql-语句？"><a href="#113-hibernate-中如何在控制台查看打印的-sql-语句？" class="headerlink" title="113. hibernate 中如何在控制台查看打印的 sql 语句？"></a>113. hibernate 中如何在控制台查看打印的 sql 语句？</h4><p>参考：<a href="http://blog.csdn.net/Randy_Wang_/article/details/79460306" target="_blank" rel="noopener">blog.csdn.net/Randy_Wang_/article/details/79460306</a></p>
<h4 id="114-hibernate-有几种查询方式？"><a href="#114-hibernate-有几种查询方式？" class="headerlink" title="114. hibernate 有几种查询方式？"></a>114. hibernate 有几种查询方式？</h4><ul>
<li>hql查询</li>
<li>sql查询</li>
<li>条件查询</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">hql查询，sql查询，条件查询</span><br><span class="line"></span><br><span class="line">HQL:  Hibernate Query Language. 面向对象的写法:</span><br><span class="line">Query query = session.createQuery(<span class="string">"from Customer where name = ?"</span>);</span><br><span class="line">query.setParameter(<span class="number">0</span>, <span class="string">"苍老师"</span>);</span><br><span class="line">Query.list();</span><br><span class="line"></span><br><span class="line">QBC:  Query By Criteria.(条件查询)</span><br><span class="line">Criteria criteria = session.createCriteria(Customer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">criteria.add(Restrictions.eq(<span class="string">"name"</span>, <span class="string">"花姐"</span>));</span><br><span class="line">List&lt;Customer&gt; list = criteria.list();</span><br><span class="line"></span><br><span class="line">SQL:</span><br><span class="line">SQLQuery query = session.createSQLQuery(<span class="string">"select * from customer"</span>);</span><br><span class="line">List&lt;Object[]&gt; list = query.list();</span><br><span class="line"></span><br><span class="line">SQLQuery query = session.createSQLQuery(<span class="string">"select * from customer"</span>);</span><br><span class="line">query.addEntity(Customer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">List&lt;Customer&gt; list = query.list();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Hql： 具体分类</span><br><span class="line"><span class="number">1</span>、 属性查询 <span class="number">2</span>、 参数查询、命名参数查询 <span class="number">3</span>、 关联查询 <span class="number">4</span>、 分页查询 <span class="number">5</span>、 统计函数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HQL和SQL的区别</span><br><span class="line"></span><br><span class="line">HQL是面向对象查询操作的，SQL是结构化查询语言 是面向数据库表结构的</span><br></pre></td></tr></table></figure>

<h4 id="115-hibernate-实体类可以被定义为-final-吗？"><a href="#115-hibernate-实体类可以被定义为-final-吗？" class="headerlink" title="115. hibernate 实体类可以被定义为 final 吗？"></a>115. hibernate 实体类可以被定义为 final 吗？</h4><p>可以将Hibernate的实体类定义为final类，但这种做法并不好。因为Hibernate会使用代理模式在延迟关联的情况下提高性能，如果你把实体类定义成final类之后，因为  Java不允许对final类进行扩展，所以Hibernate就无法再使用代理了，如此一来就限制了使用可以提升性能的手段。不过，如果你的持久化类实现了一个接口而且在该接口中声明了所有定义于实体类中的所有public的方法轮到话，你就能够避免出现前面所说的不利后果。</p>
<h4 id="116-在-hibernate-中使用-Integer-和-int-做映射有什么区别？"><a href="#116-在-hibernate-中使用-Integer-和-int-做映射有什么区别？" class="headerlink" title="116. 在 hibernate 中使用 Integer 和 int 做映射有什么区别？"></a>116. 在 hibernate 中使用 Integer 和 int 做映射有什么区别？</h4><p>在Hibernate中，如果将OID定义为Integer类型，那么Hibernate就可以根据其值是否为null而判断一个对象是否是临时的，如果将OID定义为了int类型，还需要在hbm映射文件中设置其unsaved-value属性为0。</p>
<h4 id="117-hibernate-是如何工作的？"><a href="#117-hibernate-是如何工作的？" class="headerlink" title="117. hibernate 是如何工作的？"></a>117. hibernate 是如何工作的？</h4><p>hibernate工作原理：<br> <img src="https://img-blog.csdnimg.cn/20190403231419411.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTMyNTE2OTAyMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4 id="118-get-和-load-的区别？"><a href="#118-get-和-load-的区别？" class="headerlink" title="118. get()和 load()的区别？"></a>118. get()和 load()的区别？</h4><ul>
<li>load() 没有使用对象的其他属性的时候，没有SQL  延迟加载</li>
<li>get() 没有使用对象的其他属性的时候，也生成了SQL  立即加载</li>
</ul>
<h4 id="119-说一下-hibernate-的缓存机制？"><a href="#119-说一下-hibernate-的缓存机制？" class="headerlink" title="119. 说一下 hibernate 的缓存机制？"></a>119. 说一下 hibernate 的缓存机制？</h4><p>Hibernate中的缓存分为一级缓存和二级缓存。</p>
<p>一级缓存就是  Session 级别的缓存，在事务范围内有效是,内置的不能被卸载。二级缓存是  SesionFactory级别的缓存，从应用启动到应用结束有效。是可选的，默认没有二级缓存，需要手动开启。保存数据库后，缓存在内存中保存一份，如果更新了数据库就要同步更新。</p>
<p>什么样的数据适合存放到第二级缓存中？<br> <img src="https://img-blog.csdnimg.cn/20190403231533818.png" alt="在这里插入图片描述"><br> 扩展：hibernate的二级缓存默认是不支持分布式缓存的。使用  memcahe,redis等中央缓存来代替二级缓存。</p>
<h4 id="120-hibernate-对象有哪些状态？"><a href="#120-hibernate-对象有哪些状态？" class="headerlink" title="120. hibernate 对象有哪些状态？"></a>120. hibernate 对象有哪些状态？</h4><p>hibernate里对象有三种状态：</p>
<ol>
<li>Transient（瞬时）：对象刚new出来，还没设id，设了其他值。</li>
<li>Persistent（持久）：调用了save()、saveOrUpdate()，就变成Persistent，有id。</li>
<li>etached（脱管）：当session  close()完之后，变成Detached。</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20190403231622847.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTMyNTE2OTAyMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4 id="121-在-hibernate-中-getCurrentSession-和-openSession-的区别是什么？"><a href="#121-在-hibernate-中-getCurrentSession-和-openSession-的区别是什么？" class="headerlink" title="121. 在 hibernate 中 getCurrentSession 和 openSession 的区别是什么？"></a>121. 在 hibernate 中 getCurrentSession 和 openSession 的区别是什么？</h4><p>openSession 从字面上可以看得出来，是打开一个新的session对象，而且每次使用都是打开一个新的session，假如连续使用多次，则获得的session不是同一个对象，并且使用完需要调用close方法关闭session。</p>
<p>getCurrentSession  ，从字面上可以看得出来，是获取当前上下文一个session对象，当第一次使用此方法时，会自动产生一个session对象，并且连续使用多次时，得到的session都是同一个对象，这就是与openSession的区别之一，简单而言，getCurrentSession 就是：如果有已经使用的，用旧的，如果没有，建新的。</p>
<p>注意：在实际开发中，往往使用getCurrentSession多，因为一般是处理同一个事务（即是使用一个数据库的情况），所以在一般情况下比较少使用openSession或者说openSession是比较老旧的一套接口了。</p>
<p><strong>hibernate 实体类必须要有无参构造函数吗？为什么？</strong></p>
<p>必须，因为hibernate框架会调用这个默认构造方法来构造实例对象，即Class类的newInstance方法，这个方法就是通过调用默认构造方法来创建实例对象的。</p>
<p>另外再提醒一点，如果你没有提供任何构造方法，虚拟机会自动提供默认构造方法（无参构造器），但是如果你提供了其他有参数的构造方法的话，虚拟机就不再为你提供默认构造方法，这时必须手动把无参构造器写在代码里，否则new Xxxx()是会报错的，所以默认的构造方法不是必须的，只在有多个构造方法时才是必须的，这里“必须”指的是“必须手动写出来”。</p>
<h2 id="十三、MyBatis"><a href="#十三、MyBatis" class="headerlink" title="十三、MyBatis"></a>十三、MyBatis</h2><h4 id="122-mybatis-中-和-的区别是什么？"><a href="#122-mybatis-中-和-的区别是什么？" class="headerlink" title="122. mybatis 中 #{}和 ${}的区别是什么？"></a>122. mybatis 中 #{}和 ${}的区别是什么？</h4><p>#{}是预编译处理，KaTeX parse error: Expected ‘EOF’, got ‘#’ at position 21: …串替换； Mybatis在处理#̲{}时，会将sql中的#{}替…{}时，就是把${}替换成变量的值；<br> 使用#{}可以有效的防止SQL注入，提高系统安全性。</p>
<h4 id="123-mybatis-有几种分页方式？"><a href="#123-mybatis-有几种分页方式？" class="headerlink" title="123. mybatis 有几种分页方式？"></a>123. mybatis 有几种分页方式？</h4><p>数组分页<br>sql分页<br>拦截器分页<br>RowBounds分页</p>
<h4 id="124-mybatis-逻辑分页和物理分页的区别是什么？"><a href="#124-mybatis-逻辑分页和物理分页的区别是什么？" class="headerlink" title="124. mybatis 逻辑分页和物理分页的区别是什么？"></a>124. mybatis 逻辑分页和物理分页的区别是什么？</h4><p>物理分页速度上并不一定快于逻辑分页，逻辑分页速度上也并不一定快于物理分页。<br>物理分页总是优于逻辑分页：没有必要将属于数据库端的压力加诸到应用端来，就算速度上存在优势,然而其它性能上的优点足以弥补这个缺点。</p>
<h4 id="125-mybatis-是否支持延迟加载？延迟加载的原理是什么？"><a href="#125-mybatis-是否支持延迟加载？延迟加载的原理是什么？" class="headerlink" title="125. mybatis 是否支持延迟加载？延迟加载的原理是什么？"></a>125. mybatis 是否支持延迟加载？延迟加载的原理是什么？</h4><p>Mybatis仅支持association关联对象和collection关联集合对象的延迟加载，association指的就是一对一，collection指的就是一对多查询。在Mybatis配置文件中，可以配置是否启用延迟加载lazyLoadingEnabled=true|false。</p>
<p>它的原理是，使用CGLIB创建目标对象的代理对象，当调用目标方法时，进入拦截器方法，比如调用a.getB().getName()，拦截器invoke()方法发现a.getB()是null值，那么就会单独发送事先保存好的查询关联B对象的sql，把B查询上来，然后调用a.setB(b)，于是a的对象b属性就有值了，接着完成a.getB().getName()方法的调用。这就是延迟加载的基本原理。</p>
<p>当然了，不光是Mybatis，几乎所有的包括Hibernate，支持延迟加载的原理都是一样的。</p>
<h4 id="126-说一下-mybatis-的一级缓存和二级缓存？"><a href="#126-说一下-mybatis-的一级缓存和二级缓存？" class="headerlink" title="126. 说一下 mybatis 的一级缓存和二级缓存？"></a>126. 说一下 mybatis 的一级缓存和二级缓存？</h4><p>一级缓存: 基于 PerpetualCache 的 HashMap 本地缓存，其存储作用域为 Session，当 Session flush 或 close 之后，该 Session 中的所有 Cache 就将清空，默认打开一级缓存。</p>
<p>二级缓存与一级缓存其机制相同，默认也是采用 PerpetualCache，HashMap 存储，不同在于其存储作用域为  Mapper(Namespace)，并且可自定义存储源，如  Ehcache。默认不打开二级缓存，要开启二级缓存，使用二级缓存属性类需要实现Serializable序列化接口(可用来保存对象的状态),可在它的映射文件中配置 ；</p>
<p>对于缓存数据更新机制，当某一个作用域(一级缓存 Session/二级缓存Namespaces)的进行了C/U/D 操作后，默认该作用域下所有 select 中的缓存将被 clear。</p>
<h4 id="127-mybatis-和-hibernate-的区别有哪些？"><a href="#127-mybatis-和-hibernate-的区别有哪些？" class="headerlink" title="127. mybatis 和 hibernate 的区别有哪些？"></a>127. mybatis 和 hibernate 的区别有哪些？</h4><p>（1）Mybatis和hibernate不同，它不完全是一个ORM框架，因为MyBatis需要程序员自己编写Sql语句。</p>
<p>（2）Mybatis直接编写原生态sql，可以严格控制sql执行性能，灵活度高，非常适合对关系数据模型要求不高的软件开发，因为这类软件需求变化频繁，一但需求变化要求迅速输出成果。但是灵活的前提是mybatis无法做到数据库无关性，如果需要实现支持多种数据库的软件，则需要自定义多套sql映射文件，工作量大。</p>
<p>（3）Hibernate对象/关系映射能力强，数据库无关性好，对于关系模型要求高的软件，如果用hibernate开发可以节省很多代码，提高效率。</p>
<h4 id="128-mybatis-有哪些执行器（Executor）？"><a href="#128-mybatis-有哪些执行器（Executor）？" class="headerlink" title="128. mybatis 有哪些执行器（Executor）？"></a>128. mybatis 有哪些执行器（Executor）？</h4><p>Mybatis有三种基本的执行器（Executor）：</p>
<p>SimpleExecutor：每执行一次update或select，就开启一个Statement对象，用完立刻关闭Statement对象。<br> ReuseExecutor：执行update或select，以sql作为key查找Statement对象，存在就使用，不存在就创建，用完后，不关闭Statement对象，而是放置于Map内，供下一次使用。简言之，就是重复使用Statement对象。<br> BatchExecutor：执行update（没有select，JDBC批处理不支持select），将所有sql都添加到批处理中（addBatch()），等待统一执行（executeBatch()），它缓存了多个Statement对象，每个Statement对象都是addBatch()完毕后，等待逐一执行executeBatch()批处理。与JDBC批处理相同。</p>
<h4 id="129-mybatis-分页插件的实现原理是什么？"><a href="#129-mybatis-分页插件的实现原理是什么？" class="headerlink" title="129. mybatis 分页插件的实现原理是什么？"></a>129. mybatis 分页插件的实现原理是什么？</h4><p>分页插件的基本原理是使用Mybatis提供的插件接口，实现自定义插件，在插件的拦截方法内拦截待执行的sql，然后重写sql，根据dialect方言，添加对应的物理分页语句和物理分页参数。</p>
<h4 id="130-mybatis-如何编写一个自定义插件？"><a href="#130-mybatis-如何编写一个自定义插件？" class="headerlink" title="130. mybatis 如何编写一个自定义插件？"></a>130. mybatis 如何编写一个自定义插件？</h4><p>转自：<a href="http://blog.csdn.net/qq_30051265/article/details/80266434" target="_blank" rel="noopener">blog.csdn.net/qq_30051265/article/details/80266434</a></p>
<p>Mybatis自定义插件针对Mybatis四大对象（Executor、StatementHandler 、ParameterHandler 、ResultSetHandler ）进行拦截，具体拦截方式为：<br> Executor：拦截执行器的方法(log记录)<br> StatementHandler ：拦截Sql语法构建的处理<br> ParameterHandler ：拦截参数的处理<br> ResultSetHandler ：拦截结果集的处理</p>
<p>Mybatis自定义插件必须实现Interceptor接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line">    <span class="function">Object <span class="title">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable</span>;</span><br><span class="line">    <span class="function">Object <span class="title">plugin</span><span class="params">(Object target)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>intercept方法：拦截器具体处理逻辑方法<br> plugin方法：根据签名signatureMap生成动态代理对象<br> setProperties方法：设置Properties属性<br> 自定义插件demo：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ExamplePlugin.java</span></span><br><span class="line"><span class="meta">@Intercepts</span>(&#123;<span class="meta">@Signature</span>(</span><br><span class="line">  type= Executor<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">  <span class="title">method</span> </span>= <span class="string">"update"</span>,</span><br><span class="line">  args = &#123;MappedStatement<span class="class">.<span class="keyword">class</span>,<span class="title">Object</span>.<span class="title">class</span>&#125;)&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ExamplePlugin</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">  Object target = invocation.getTarget(); <span class="comment">//被代理对象</span></span><br><span class="line">  Method method = invocation.getMethod(); <span class="comment">//代理方法</span></span><br><span class="line">  Object[] args = invocation.getArgs(); <span class="comment">//方法参数</span></span><br><span class="line">  <span class="comment">// do something ...... 方法拦截前执行代码块</span></span><br><span class="line">  Object result = invocation.proceed();</span><br><span class="line">  <span class="comment">// do something .......方法拦截后执行代码块</span></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">plugin</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Plugin.wrap(target, <span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一个@Intercepts可以配置多个@Signature，@Signature中的参数定义如下：<br> type：表示拦截的类，这里是Executor的实现类；<br> method：表示拦截的方法，这里是拦截Executor的update方法；<br> args：表示方法参数。</p>
<h2 id="十四、MySQL"><a href="#十四、MySQL" class="headerlink" title="十四、MySQL"></a>十四、MySQL</h2><h4 id="131-数据库的三范式是什么？"><a href="#131-数据库的三范式是什么？" class="headerlink" title="131. 数据库的三范式是什么？"></a>131. 数据库的三范式是什么？</h4><p>第一范式：强调的是列的原子性，即数据库表的每一列都是不可分割的原子数据项。<br>第二范式：要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性。<br>第三范式：任何非主属性不依赖于其它非主属性。</p>
<h4 id="132-一张自增表里面总共有-7-条数据，删除了最后-2-条数据，重启-mysql-数据库，又插入了一条数据，此时-id-是几？"><a href="#132-一张自增表里面总共有-7-条数据，删除了最后-2-条数据，重启-mysql-数据库，又插入了一条数据，此时-id-是几？" class="headerlink" title="132. 一张自增表里面总共有 7 条数据，删除了最后 2 条数据，重启 mysql 数据库，又插入了一条数据，此时 id 是几？"></a>132. 一张自增表里面总共有 7 条数据，删除了最后 2 条数据，重启 mysql 数据库，又插入了一条数据，此时 id 是几？</h4><p>表类型如果是 MyISAM ，那 id 就是 8。<br>表类型如果是 InnoDB，那 id 就是 6。</p>
<p>InnoDB 表只会把自增主键的最大 id 记录在内存中，所以重启之后会导致最大 id 丢失。</p>
<h4 id="133-如何获取当前数据库版本？"><a href="#133-如何获取当前数据库版本？" class="headerlink" title="133. 如何获取当前数据库版本？"></a>133. 如何获取当前数据库版本？</h4><p>使用 select version() 获取当前 MySQL 数据库版本。</p>
<h4 id="134-说一下-ACID-是什么？"><a href="#134-说一下-ACID-是什么？" class="headerlink" title="134. 说一下 ACID 是什么？"></a>134. 说一下 ACID 是什么？</h4><p>Atomicity（原子性）：一个事务（transaction）中的所有操作，或者全部完成，或者全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被恢复（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。即，事务不可分割、不可约简。<br>Consistency（一致性）：在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设约束、触发器、级联回滚等。<br>Isolation（隔离性）：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable  read）和串行化（Serializable）。<br>Durability（持久性）：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</p>
<h4 id="135-char-和-varchar-的区别是什么？"><a href="#135-char-和-varchar-的区别是什么？" class="headerlink" title="135. char 和 varchar 的区别是什么？"></a>135. char 和 varchar 的区别是什么？</h4><p>char(n) ：固定长度类型，比如订阅 char(10)，当你输入”abc”三个字符的时候，它们占的空间还是 10 个字节，其他 7 个是空字节。<br>chat 优点：效率高；缺点：占用空间；适用场景：存储密码的 md5 值，固定长度的，使用 char 非常合适。<br>varchar(n) ：可变长度，存储的值是每个值占用的字节再加上一个用来记录其长度的字节的长度。<br>所以，从空间上考虑 varcahr 比较合适；从效率上考虑 char 比较合适，二者使用需要权衡。</p>
<h4 id="136-float-和-double-的区别是什么？"><a href="#136-float-和-double-的区别是什么？" class="headerlink" title="136. float 和 double 的区别是什么？"></a>136. float 和 double 的区别是什么？</h4><p>float 最多可以存储 8 位的十进制数，并在内存中占 4 字节。<br> double 最可可以存储 16 位的十进制数，并在内存中占 8 字节。</p>
<h4 id="137-mysql-的内连接、左连接、右连接有什么区别？"><a href="#137-mysql-的内连接、左连接、右连接有什么区别？" class="headerlink" title="137. mysql 的内连接、左连接、右连接有什么区别？"></a>137. mysql 的内连接、左连接、右连接有什么区别？</h4><p>内连接关键字：inner join；左连接：left join；右连接：right join。</p>
<p>内连接是把匹配的关联数据显示出来；左连接是左边的表全部显示出来，右边的表显示出符合条件的数据；右连接正好相反。</p>
<h4 id="138-mysql-索引是怎么实现的？"><a href="#138-mysql-索引是怎么实现的？" class="headerlink" title="138. mysql 索引是怎么实现的？"></a>138. mysql 索引是怎么实现的？</h4><p>索引是满足某种特定查找算法的数据结构，而这些数据结构会以某种方式指向数据，从而实现高效查找数据。</p>
<p>具体来说 MySQL 中的索引，不同的数据引擎实现有所不同，但目前主流的数据库引擎的索引都是 B+ 树实现的，B+ 树的搜索效率，可以到达二分法的性能，找到数据区域之后就找到了完整的数据结构了，所有索引的性能也是更好的。</p>
<h4 id="139-怎么验证-mysql-的索引是否满足需求？"><a href="#139-怎么验证-mysql-的索引是否满足需求？" class="headerlink" title="139. 怎么验证 mysql 的索引是否满足需求？"></a>139. 怎么验证 mysql 的索引是否满足需求？</h4><p>使用 explain 查看 SQL 是如何执行查询语句的，从而分析你的索引是否满足需求。</p>
<p>explain 语法：explain select * from table where type=1。</p>
<h4 id="140-说一下数据库的事务隔离？"><a href="#140-说一下数据库的事务隔离？" class="headerlink" title="140. 说一下数据库的事务隔离？"></a>140. 说一下数据库的事务隔离？</h4><p>MySQL 的事务隔离是在 MySQL. ini 配置文件里添加的，在文件的最后添加：transaction-isolation = REPEATABLE-READ</p>
<p>可用的配置值：READ-UNCOMMITTED、READ-COMMITTED、REPEATABLE-READ、SERIALIZABLE。</p>
<p>READ-UNCOMMITTED：未提交读，最低隔离级别、事务未提交前，就可被其他事务读取（会出现幻读、脏读、不可重复读）。<br>READ-COMMITTED：提交读，一个事务提交后才能被其他事务读取到（会造成幻读、不可重复读）。<br>REPEATABLE-READ：可重复读，默认级别，保证多次读取同一个数据时，其值都和事务开始时候的内容是一致，禁止读取到别的事务未提交的数据（会造成幻读）。<br>SERIALIZABLE：序列化，代价最高最可靠的隔离级别，该隔离级别能防止脏读、不可重复读、幻读。</p>
<p>脏读 ：表示一个事务能够读取另一个事务中还未提交的数据。比如，某个事务尝试插入记录 A，此时该事务还未提交，然后另一个事务尝试读取到了记录 A。</p>
<p>不可重复读 ：是指在一个事务内，多次读同一数据。</p>
<p>幻读 ：指同一个事务内多次查询返回的结果集不一样。比如同一个事务 A 第一次查询时候有 n 条记录，但是第二次同等条件下查询却有 n+1  条记录，这就好像产生了幻觉。发生幻读的原因也是另外一个事务新增或者删除或者修改了第一个事务结果集里面的数据，同一个记录的数据内容被修改了，所有数据行的记录就变多或者变少了。</p>
<h4 id="141-说一下-mysql-常用的引擎？"><a href="#141-说一下-mysql-常用的引擎？" class="headerlink" title="141. 说一下 mysql 常用的引擎？"></a>141. 说一下 mysql 常用的引擎？</h4><p>InnoDB 引擎：MySQL  的默认引擎，InnoDB 引擎提供了对数据库 acid  事务的支持，并且还提供了行级锁和外键的约束，它的设计的目标就是处理大数据容量的数据库系统。MySQL 运行的时候，InnoDB  会在内存中建立缓冲池，用于缓冲数据和索引。但是该引擎是不支持全文搜索，同时启动也比较的慢，它是不会保存表的行数的，所以当进行 select  count(*) from table  指令的时候，需要进行扫描全表。由于锁的粒度小，写操作是不会锁定全表的,所以在并发度较高的场景下使用会提升效率的。</p>
<p>MyIASM 引擎：不提供事务的支持，也不支持行级锁和外键。因此当执行插入和更新语句时，即执行写操作的时候需要锁定这个表，所以会导致效率会降低。不过和 InnoDB 不同的是，MyIASM 引擎是保存了表的行数，于是当进行 select count(*) from table  语句时，可以直接的读取已经保存的值而不需要进行扫描全表。所以，如果表的读操作远远多于写操作时，并且不需要事务的支持的，可以将 MyIASM  作为数据库引擎的首选。</p>
<h4 id="142-说一下-mysql-的行锁和表锁？"><a href="#142-说一下-mysql-的行锁和表锁？" class="headerlink" title="142. 说一下 mysql 的行锁和表锁？"></a>142. 说一下 mysql 的行锁和表锁？</h4><p>MyISAM 只支持表锁，InnoDB 支持表锁和行锁，默认为行锁。</p>
<p>表级锁：开销小，加锁快，不会出现死锁。锁定粒度大，发生锁冲突的概率最高，并发量最低。<br>行级锁：开销大，加锁慢，会出现死锁。锁力度小，发生锁冲突的概率小，并发度最高。</p>
<h4 id="143-说一下乐观锁和悲观锁？"><a href="#143-说一下乐观锁和悲观锁？" class="headerlink" title="143. 说一下乐观锁和悲观锁？"></a>143. 说一下乐观锁和悲观锁？</h4><p>乐观锁：每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在提交更新的时候会判断一下在此期间别人有没有去更新这个数据。<br>悲观锁：每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会阻止，直到这个锁被释放。</p>
<p>数据库的乐观锁需要自己实现，在表里面添加一个 version 字段，每次修改成功值加 1，这样每次修改的时候先对比一下，自己拥有的 version 和数据库现在的 version 是否一致，如果不一致就不修改，这样就实现了乐观锁。</p>
<h4 id="144-mysql-问题排查都有哪些手段？"><a href="#144-mysql-问题排查都有哪些手段？" class="headerlink" title="144. mysql 问题排查都有哪些手段？"></a>144. mysql 问题排查都有哪些手段？</h4><p>使用 show processlist 命令查看当前所有连接信息。<br>使用 explain 命令查询 SQL 语句执行计划。<br>开启慢查询日志，查看慢查询的 SQL。</p>
<h4 id="145-如何做-mysql-的性能优化？"><a href="#145-如何做-mysql-的性能优化？" class="headerlink" title="145. 如何做 mysql 的性能优化？"></a>145. 如何做 mysql 的性能优化？</h4><p>为搜索字段创建索引。<br>避免使用 select *，列出需要查询的字段。<br>垂直分割分表。<br>选择正确的存储引擎。</p>
<h2 id="十五、Redis"><a href="#十五、Redis" class="headerlink" title="十五、Redis"></a>十五、Redis</h2><h4 id="146-redis-是什么？都有哪些使用场景？"><a href="#146-redis-是什么？都有哪些使用场景？" class="headerlink" title="146. redis 是什么？都有哪些使用场景？"></a>146. redis 是什么？都有哪些使用场景？</h4><p>Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p>
<p>Redis 使用场景：<br> 数据高并发的读写<br> 海量数据的读写<br> 对扩展性要求高的数据</p>
<h4 id="147-redis-有哪些功能？"><a href="#147-redis-有哪些功能？" class="headerlink" title="147. redis 有哪些功能？"></a>147. redis 有哪些功能？</h4><p>数据缓存功能<br> 分布式锁的功能<br> 支持数据持久化<br> 支持事务<br> 支持消息队列</p>
<h4 id="148-redis-和-memecache-有什么区别？"><a href="#148-redis-和-memecache-有什么区别？" class="headerlink" title="148. redis 和 memecache 有什么区别？"></a>148. redis 和 memecache 有什么区别？</h4><p>memcached所有的值均是简单的字符串，redis作为其替代者，支持更为丰富的数据类型<br> redis的速度比memcached快很多<br> redis可以持久化其数据</p>
<h4 id="149-redis-为什么是单线程的？"><a href="#149-redis-为什么是单线程的？" class="headerlink" title="149. redis 为什么是单线程的？"></a>149. redis 为什么是单线程的？</h4><p>因为 cpu 不是 Redis 的瓶颈，Redis 的瓶颈最有可能是机器内存或者网络带宽。既然单线程容易实现，而且 cpu 又不会成为瓶颈，那就顺理成章地采用单线程的方案了。</p>
<p>关于 Redis 的性能，官方网站也有，普通笔记本轻松处理每秒几十万的请求。</p>
<p>而且单线程并不代表就慢 nginx 和 nodejs 也都是高性能单线程的代表。</p>
<h4 id="150-什么是缓存穿透？怎么解决？"><a href="#150-什么是缓存穿透？怎么解决？" class="headerlink" title="150. 什么是缓存穿透？怎么解决？"></a>150. 什么是缓存穿透？怎么解决？</h4><p>缓存穿透：指查询一个一定不存在的数据，由于缓存是不命中时需要从数据库查询，查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到数据库去查询，造成缓存穿透。</p>
<p>解决方案：最简单粗暴的方法如果一个查询返回的数据为空（不管是数据不存在，还是系统故障），我们就把这个空结果进行缓存，但它的过期时间会很短，最长不超过五分钟。</p>
<h4 id="151-redis-支持的数据类型有哪些？"><a href="#151-redis-支持的数据类型有哪些？" class="headerlink" title="151. redis 支持的数据类型有哪些？"></a>151. redis 支持的数据类型有哪些？</h4><p>string、list、hash、set、zset。</p>
<h4 id="152-redis-支持的-java-客户端都有哪些？"><a href="#152-redis-支持的-java-客户端都有哪些？" class="headerlink" title="152. redis 支持的 java 客户端都有哪些？"></a>152. redis 支持的 java 客户端都有哪些？</h4><p>Redisson、Jedis、lettuce等等，官方推荐使用Redisson。</p>
<h4 id="153-jedis-和-redisson-有哪些区别？"><a href="#153-jedis-和-redisson-有哪些区别？" class="headerlink" title="153. jedis 和 redisson 有哪些区别？"></a>153. jedis 和 redisson 有哪些区别？</h4><p>Jedis是Redis的Java实现的客户端，其API提供了比较全面的Redis命令的支持。</p>
<p>Redisson实现了分布式和可扩展的Java数据结构，和Jedis相比，功能较为简单，不支持字符串操作，不支持排序、事务、管道、分区等Redis特性。Redisson的宗旨是促进使用者对Redis的关注分离，从而让使用者能够将精力更集中地放在处理业务逻辑上。</p>
<h4 id="154-怎么保证缓存和数据库数据的一致性？"><a href="#154-怎么保证缓存和数据库数据的一致性？" class="headerlink" title="154. 怎么保证缓存和数据库数据的一致性？"></a>154. 怎么保证缓存和数据库数据的一致性？</h4><p>合理设置缓存的过期时间。<br> 新增、更改、删除数据库操作时同步更新 Redis，可以使用事物机制来保证数据的一致性。</p>
<h4 id="155-redis-持久化有几种方式？"><a href="#155-redis-持久化有几种方式？" class="headerlink" title="155. redis 持久化有几种方式？"></a>155. redis 持久化有几种方式？</h4><p>Redis 的持久化有两种方式，或者说有两种策略：</p>
<p>RDB（Redis Database）：指定的时间间隔能对你的数据进行快照存储。<br> AOF（Append Only File）：每一个收到的写命令都通过write函数追加到文件中。</p>
<h4 id="156-redis-怎么实现分布式锁？"><a href="#156-redis-怎么实现分布式锁？" class="headerlink" title="156. redis 怎么实现分布式锁？"></a>156. redis 怎么实现分布式锁？</h4><p>Redis 分布式锁其实就是在系统里面占一个“坑”，其他程序也要占“坑”的时候，占用成功了就可以继续执行，失败了就只能放弃或稍后重试。</p>
<p>占坑一般使用 setnx(set if not exists)指令，只允许被一个程序占有，使用完调用 del 释放锁。</p>
<h4 id="157-redis-分布式锁有什么缺陷？"><a href="#157-redis-分布式锁有什么缺陷？" class="headerlink" title="157. redis 分布式锁有什么缺陷？"></a>157. redis 分布式锁有什么缺陷？</h4><p>Redis 分布式锁不能解决超时的问题，分布式锁有一个超时时间，程序的执行如果超出了锁的超时时间就会出现问题，锁时间默认30S， 有个watch dog自动延期机制， 如果超过30S程序还希望持有锁， 会自动延长锁时间</p>
<h4 id="158-redis-如何做内存优化？"><a href="#158-redis-如何做内存优化？" class="headerlink" title="158. redis 如何做内存优化？"></a>158. redis 如何做内存优化？</h4><p>尽可能使用散列表（hashes），散列表（是说散列表里面存储的数少）使用的内存非常小，所以你应该尽可能的将你的数据模型抽象到一个散列表里面。</p>
<p>比如你的web系统中有一个用户对象，不要为这个用户的名称，姓氏，邮箱，密码设置单独的key,而是应该把这个用户的所有信息存储到一张散列表里面。</p>
<h4 id="159-redis-淘汰策略有哪些？"><a href="#159-redis-淘汰策略有哪些？" class="headerlink" title="159. redis 淘汰策略有哪些？"></a>159. redis 淘汰策略有哪些？</h4><p>volatile-lru：从已设置过期时间的数据集（server. db[i]. expires）中挑选最近最少使用的数据淘汰。<br> volatile-ttl：从已设置过期时间的数据集（server. db[i]. expires）中挑选将要过期的数据淘汰。<br> volatile-random：从已设置过期时间的数据集（server. db[i]. expires）中任意选择数据淘汰。<br> allkeys-lru：从数据集（server. db[i]. dict）中挑选最近最少使用的数据淘汰。<br> allkeys-random：从数据集（server. db[i]. dict）中任意选择数据淘汰。<br> no-enviction（驱逐）：禁止驱逐数据。</p>
<h4 id="160-redis-常见的性能问题有哪些？该如何解决？"><a href="#160-redis-常见的性能问题有哪些？该如何解决？" class="headerlink" title="160. redis 常见的性能问题有哪些？该如何解决？"></a>160. redis 常见的性能问题有哪些？该如何解决？</h4><p>主服务器写内存快照，会阻塞主线程的工作，当快照比较大时对性能影响是非常大的，会间断性暂停服务，所以主服务器最好不要写内存快照。<br> Redis 主从复制的性能问题，为了主从复制的速度和连接的稳定性，主从库最好在同一个局域网内。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue笔记--axios</title>
    <url>/vue-axios/</url>
    <content><![CDATA[<h1 id="十二、Vue与axios"><a href="#十二、Vue与axios" class="headerlink" title="十二、Vue与axios"></a>十二、Vue与axios</h1><h2 id="1、axios的简单使用"><a href="#1、axios的简单使用" class="headerlink" title="1、axios的简单使用"></a>1、axios的简单使用</h2><ul>
<li><p>支持多种请求方式</p>
<ul>
<li><p>axios(config)</p>
</li>
<li><p>axios.request(config)</p>
</li>
<li><p>axios.get(url[, config])</p>
</li>
<li><p>axios.delete(url[, config])</p>
<a id="more"></a>
</li>
<li><p>axios.head(url[, config])</p>
</li>
<li><p>axios.post(url[, data[, config]])</p>
</li>
<li><p>axios.put(url[, data[, config]])</p>
</li>
<li><p>axios.patch(url[, data[, config]])</p>
</li>
</ul>
</li>
</ul>
<p>安装axios</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install axios --save</span><br></pre></td></tr></table></figure>

<p>简单使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span></span><br><span class="line">axios(&#123;</span><br><span class="line">  url: <span class="string">"xxxxxx"</span>,</span><br><span class="line">  <span class="comment">// 设置请求方式，默认是get请求</span></span><br><span class="line">  method: <span class="string">"post"</span>,</span><br><span class="line">  <span class="comment">// 专门针对get请求的参数拼接</span></span><br><span class="line">  params: &#123;</span><br><span class="line">    info: <span class="string">"test"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="2、axios的并发请求"><a href="#2、axios的并发请求" class="headerlink" title="2、axios的并发请求"></a>2、axios的并发请求</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.all([axios(&#123;</span><br><span class="line">  url: <span class="string">"xxxxxx"</span></span><br><span class="line">&#125;), axios(&#123;</span><br><span class="line">  url: <span class="string">"xxxxxx"</span></span><br><span class="line">&#125;)]).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="3、axios的配置"><a href="#3、axios的配置" class="headerlink" title="3、axios的配置"></a>3、axios的配置</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.defaults.baseURL=<span class="string">"xxxxxx"</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>请求地址</p>
<p>url: “xxxxxx”</p>
</li>
<li><p>请求类型</p>
<p>method: “get”</p>
</li>
<li><p>请求路径</p>
<p>baseURL: “xxxxxx”</p>
</li>
<li><p>请求前的数据处理</p>
<p>transformRequest: [function(data){}]</p>
</li>
<li><p>请求后的数据处理</p>
<p>transformResponse: [function(data){}]</p>
</li>
<li><p>自定义的请求头</p>
<p>headers{“x-Requested-With”: “XMLHttpRequest”}</p>
</li>
<li><p>URL查询对象</p>
<p>params: {id: 1}</p>
</li>
<li><p>查询对象的序列化函数</p>
<p>paramsSerializer: function(params){}</p>
</li>
<li><p>request body</p>
<p>data: {key: “aa”}</p>
</li>
<li><p>超时设置</p>
<p>timeout: 1000</p>
</li>
<li><p>跨域是否带token</p>
<p>withCredentials: false</p>
</li>
<li><p>自定义请求处理</p>
<p>adapter: function(resolve, reject, config){}</p>
</li>
<li><p>身份验证信息</p>
<p>auth: {uname: “xxx”, pwd: 123}</p>
</li>
<li><p>响应的数据格式json/blob/document/arraybuffer/text/stream</p>
<p>responseType: “json”</p>
</li>
</ul>
<h2 id="4、axios实例与模块封装"><a href="#4、axios实例与模块封装" class="headerlink" title="4、axios实例与模块封装"></a>4、axios实例与模块封装</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">  baseURL: <span class="string">"xxxxxx"</span>,</span><br><span class="line">  timeout: <span class="number">5000</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">instance(&#123;</span><br><span class="line">  url: <span class="string">"xxxxxx"</span></span><br><span class="line">  method: <span class="string">"post"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">    timeout: <span class="number">5000</span>,</span><br><span class="line">    baseURL: <span class="string">"xxxxxx"</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> instance(config)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">request(&#123;</span><br><span class="line">  url: <span class="string">"xxxxxx"</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="5、axios拦截器"><a href="#5、axios拦截器" class="headerlink" title="5、axios拦截器"></a>5、axios拦截器</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">    timeout: <span class="number">5000</span>,</span><br><span class="line">    baseURL: <span class="string">"xxxxxx"</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  instance.interceptors.request.use(</span><br><span class="line">    config =&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> config</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">    err =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br><span class="line">  instance.interceptors.response.use(</span><br><span class="line">    res =&gt; &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// return res</span></span><br><span class="line">      <span class="keyword">return</span> res.data</span><br><span class="line">    &#125;,</span><br><span class="line">    err =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">return</span> instance(config)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">request(&#123;</span><br><span class="line">  url: <span class="string">"xxxxxx"</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue</category>
        <category>Vuejs</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>axios</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue笔记--Vuex</title>
    <url>/vue-vuex/</url>
    <content><![CDATA[<h1 id="十一、Vue与Vuex"><a href="#十一、Vue与Vuex" class="headerlink" title="十一、Vue与Vuex"></a>十一、Vue与Vuex</h1><h2 id="1、Vuex的属性和使用"><a href="#1、Vuex的属性和使用" class="headerlink" title="1、Vuex的属性和使用"></a>1、Vuex的属性和使用</h2><p>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式</strong>。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。Vuex 也集成到 Vue 的官方调试工具 <a href="https://github.com/vuejs/vue-devtools" target="_blank" rel="noopener">devtools extension</a><a href="https://github.com/vuejs/vue-devtools" target="_blank" rel="noopener"> </a>，提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试功能。</p>
<a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="comment">// 可以理解为全局变量，</span></span><br><span class="line">  state: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//修改state最好不要自己修改，要通过mutations修改，必须是同步方法</span></span><br><span class="line">  mutations: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 类似computed，还可以有第二个参数getters，重复使用mutations里的方法，如果有自定义的参数就返回一个函数</span></span><br><span class="line">  getters: &#123;</span><br><span class="line">      </span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  modules: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>修改实例（mutations）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    counter: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    <span class="comment">// 定义方法</span></span><br><span class="line">    increment(state) &#123;</span><br><span class="line">      state.counter++</span><br><span class="line">    &#125;,</span><br><span class="line">    decrement(state) &#123;</span><br><span class="line">      state.counter--</span><br><span class="line">    &#125;,</span><br><span class="line">    incrementNum(state, n) &#123;</span><br><span class="line">      state.counter += n.Number</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  modules: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;$store.state.counter&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"addition"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"subtraction"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"addNumber"</span>&gt;</span>+10<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">"App"</span>,</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">        message: <span class="string">"Vuex test"</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      addition() &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.$store.commit(<span class="string">"increment"</span>)</span></span><br><span class="line">      &#125;,</span><br><span class="line">      subtraction() &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.$store.commit(<span class="string">"decrement"</span>)</span></span><br><span class="line">      &#125;,</span><br><span class="line">      addNumber() &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> n = &#123;Number: <span class="number">10</span>&#125;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.$store.commit(<span class="string">"incrementNum"</span>, n)</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 第二种写法，注意传入的参数不同</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// this.$store.commit(&#123;</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//   type: "incrementNum",</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//   n</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// &#125;)</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>计算实例（getters）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    counter: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    <span class="comment">// 定义方法</span></span><br><span class="line">    increment(state) &#123;</span><br><span class="line">      state.counter++</span><br><span class="line">    &#125;,</span><br><span class="line">    decrement(state) &#123;</span><br><span class="line">      state.counter--</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    powerStates(state) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.counter * state.counter</span><br><span class="line">    &#125;,</span><br><span class="line">    addNumone(state, getters) &#123;</span><br><span class="line">      <span class="keyword">return</span> getters.powerStates + <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    addNum(state, getters) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getters.powerStates + n</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  modules: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;$store.state.counter&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;$store.getters.powerStates&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;$store.getters.addNumone&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;$store.getters.addNum(10)&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>异步实例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    counter: <span class="number">0</span>,</span><br><span class="line">    info: &#123;</span><br><span class="line">      name: <span class="string">"async"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    asyncTest(state) &#123;</span><br><span class="line">      <span class="comment">// state.info["gender"] = "男"</span></span><br><span class="line">      Vue.set(state.info, <span class="string">"gender"</span>, <span class="string">"男"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    asyncTest(context) &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        context.commit(<span class="string">"asyncTest"</span>)</span><br><span class="line">      &#125;, <span class="number">2000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  modules: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  &#123;&#123;$store.state.info&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"asyncTest"</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">"App"</span>,</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">        message: <span class="string">"Vuex test"</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      asyncTest() &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.$store.dispatch(<span class="string">"asyncTest"</span>)</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>模块实例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  state: &#123; ... &#125;,</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;,</span><br><span class="line">  getters: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> moduleB = &#123;</span><br><span class="line">  state: &#123; ... &#125;,</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    a: moduleA,</span><br><span class="line">    b: moduleB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.state.a <span class="comment">// -&gt; moduleA 的状态</span></span><br><span class="line">store.state.b <span class="comment">// -&gt; moduleB 的状态</span></span><br></pre></td></tr></table></figure>

<p>对于模块内部的 mutation 和 getter，接收的第一个参数是<strong>模块的局部状态对象</strong>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  state: &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      <span class="comment">// 这里的 `state` 对象是模块的局部状态</span></span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  getters: &#123;</span><br><span class="line">    doubleCount (state) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.count * <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同样，对于模块内部的 action，局部状态通过 <code>context.state</code> 暴露出来，根节点状态则为 <code>context.rootState</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  actions: &#123;</span><br><span class="line">    incrementIfOddOnRootSum (&#123; state, commit, rootState &#125;) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((state.count + rootState.count) % <span class="number">2</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        commit(<span class="string">'increment'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于模块内部的 getter，根节点状态会作为第三个参数暴露出来：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  getters: &#123;</span><br><span class="line">    sumWithRootCount (state, getters, rootState) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.count + rootState.count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue</category>
        <category>Vuejs</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue笔记--路由</title>
    <url>/vue-ronter/</url>
    <content><![CDATA[<h1 id="九、Vue路由"><a href="#九、Vue路由" class="headerlink" title="九、Vue路由"></a>九、Vue路由</h1><h2 id="1、前端渲染和后端渲染的区别"><a href="#1、前端渲染和后端渲染的区别" class="headerlink" title="1、前端渲染和后端渲染的区别"></a>1、前端渲染和后端渲染的区别</h2><p>后端渲染：后端处理URL和页面之间的映射关系，服务器直接生产渲染好对应的HTML页，返回给客户端进行展示</p>
<p>前端渲染：浏览器显示的大部分内容都是由前端写的js代码在浏览器中执行，最终渲染出来的网页</p>
<ul>
<li><p>前后端分离阶段</p>
<ul>
<li><p>随着Ajax的出现，有了前后端分离的开发模式</p>
</li>
<li><p>后端只提供API来返回数据，前端通过Ajax获取数据，并且可以通过JavaScript将数据渲染到页面中</p>
<a id="more"></a>
</li>
<li><p>这样做的最大优点是前后端责任的清晰，后端专注于数据上，前端专注于交互和可视化上</p>
</li>
<li><p>并且当移动端(IOS/Android)出现后，后端不需要进行任何处理，仍然使用之前的一套API即可</p>
</li>
<li><p>目前很多的网站仍然采用这种模式开发</p>
</li>
</ul>
</li>
<li><p>单页面富应用阶段</p>
<ul>
<li>其实SPA最主要的特点就是前后端分离的基础上加了一层前端路由</li>
<li>也就是前端来维护一套路由规则</li>
</ul>
</li>
</ul>
<h2 id="2、URL的hash和HTML5的history"><a href="#2、URL的hash和HTML5的history" class="headerlink" title="2、URL的hash和HTML5的history"></a>2、URL的hash和HTML5的history</h2><ol>
<li><p>URL的hash</p>
<p>可以通过更改location.hash的值更改URL，不会进行跳转</p>
</li>
<li><p>HTML5的history</p>
<p>可以通过history.pushState({}, ‘’, “haha”)改变URL，实际上它是相当于一个压入栈的操作，history.back()可以进行出栈操作，对URL的变化可以做一个保存</p>
<p>还可以通过history.replaceState({}, ‘’, “www”)改变URL的值，直接改变，浏览器不会有记录保存</p>
<p>history.go(-1) = history.back()，history.go(1) = history.forward()则等价于history.go(1)，以上三个接口等同于浏览器前进后退</p>
</li>
</ol>
<h2 id="3、Vue-router安装与配置方式"><a href="#3、Vue-router安装与配置方式" class="headerlink" title="3、Vue-router安装与配置方式"></a>3、Vue-router安装与配置方式</h2><ol>
<li><p>通过Vue.use()，安装这个插件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line">Vue.use(VueRouter)</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建Vue-router对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  <span class="comment">// 配置路径和组件之间的映射关系</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 默认重定向</span></span><br><span class="line">    path: <span class="string">""</span>,</span><br><span class="line">    redirect: <span class="string">"/home"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    name: <span class="string">'Home'</span>,</span><br><span class="line">    component: Home</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/about'</span>,</span><br><span class="line">    name: <span class="string">'About'</span>,</span><br><span class="line">    <span class="comment">// route level code-splitting</span></span><br><span class="line">    <span class="comment">// this generates a separate chunk (about.[hash].js) for this route</span></span><br><span class="line">    <span class="comment">// which is lazy-loaded when the route is visited.</span></span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "about" */</span> <span class="string">'../views/About.vue'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes,</span><br><span class="line">  mode: <span class="string">"history"</span>,</span><br><span class="line">  <span class="comment">// active统一配置</span></span><br><span class="line">  linkActiveClass: <span class="string">"active"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>将Vue-router对象传入到Vue实例中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h2 id="4、使用router"><a href="#4、使用router" class="headerlink" title="4、使用router"></a>4、使用router</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"nav"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--          tag指定之后渲染成什么标签，replace使用replaceState --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--      &lt;router-link to="/home" active-class="active" replace&gt;Home&lt;/router-link&gt; |--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--      &lt;router-link to="/about" active-class="active" replace&gt;About&lt;/router-link&gt;--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/home"</span> <span class="attr">replace</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> |</span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/about"</span> <span class="attr">replace</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"homeClick()"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"aboutClick()"</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">"App"</span>,</span></span><br><span class="line">    methods: &#123;</span><br><span class="line">      homeClick() &#123;</span><br><span class="line"><span class="actionscript">        <span class="comment">// 通过代码的方式修改路径</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// this.$router.push("/home")</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.$router.replace(<span class="string">"/home"</span>)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"home"</span>)</span></span><br><span class="line">      &#125;,</span><br><span class="line">      aboutClick() &#123;</span><br><span class="line"><span class="actionscript">        <span class="comment">// this.$router.push("/about")</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.$router.replace(<span class="string">"/about"</span>)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"about"</span>)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5、动态路由"><a href="#5、动态路由" class="headerlink" title="5、动态路由"></a>5、动态路由</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: <span class="string">"/user/:id"</span>,</span><br><span class="line">    component: User</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>user界面<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>user内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;$route.params.id&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">"User"</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"'/user/' + user"</span> <span class="attr">replace</span>&gt;</span>User<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        user: "zhangsan"</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6、路由懒加载"><a href="#6、路由懒加载" class="headerlink" title="6、路由懒加载"></a>6、路由懒加载</h2><p>当打包加载应用时，JavaScript包会变得非常大，影响页面的加载</p>
<p>如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就更加高效了</p>
<p>懒加载的方式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// component: () =&gt; import(/* webpackChunkName: "about" */ '../views/About.vue')</span></span><br><span class="line"><span class="comment">// 路由的懒加载</span></span><br><span class="line">component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">"../views/About"</span>)</span><br></pre></td></tr></table></figure>

<h2 id="7、路由的嵌套使用"><a href="#7、路由的嵌套使用" class="headerlink" title="7、路由的嵌套使用"></a>7、路由的嵌套使用</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: <span class="string">'/home'</span>,</span><br><span class="line">    name: <span class="string">'Home'</span>,</span><br><span class="line">    component: Home,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 这里注意要写的是news，/home/news也可以</span></span><br><span class="line">        path: <span class="string">""</span>,</span><br><span class="line">        redirect: <span class="string">"news"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">"news"</span>,</span><br><span class="line">        component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">"../components/News"</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">"message"</span>,</span><br><span class="line">        component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">"../components/Message"</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>然后在Home.vue中写入组件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是Home组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/home/news"</span> <span class="attr">replace</span>&gt;</span>News<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/home/message"</span> <span class="attr">replace</span>&gt;</span>Message<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">'Home'</span>,</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="8、传递参数"><a href="#8、传递参数" class="headerlink" title="8、传递参数"></a>8、传递参数</h2><p>动态路由方式可以传递参数</p>
<p>还可以通过query来传递参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: <span class="string">"/profile"</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">"../components/Profile"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用时</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是Profile组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;$route.query.name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">"Profile"</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123;path: '/profile', query: &#123;name: 'lisi'&#125;&#125;"</span> <span class="attr">replace</span>&gt;</span>Profile<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 也可以使用方法 --&gt;</span></span><br><span class="line">profile() &#123;</span><br><span class="line">        this.$router.replace(&#123;</span><br><span class="line">          path: "/profile",</span><br><span class="line">          query: &#123;</span><br><span class="line">            name: "lisi"</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="9、全局导航守卫"><a href="#9、全局导航守卫" class="headerlink" title="9、全局导航守卫"></a>9、全局导航守卫</h2><p>监听跳转的过程，并对一些动作做出处理</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局守卫</span></span><br><span class="line"><span class="comment">// 前置守卫（guard）</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">(to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">document</span>.title = to.matched[<span class="number">0</span>].meta.title;</span><br><span class="line">  next();</span><br><span class="line">&#125;))</span><br><span class="line"><span class="comment">// 后置钩子（hook）</span></span><br><span class="line"><span class="comment">// 不需要next</span></span><br><span class="line">router.afterEach(<span class="function">(<span class="params">(to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  </span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 并且对每一个路由设置meta元数据（描述数据的数据），例如</span></span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">"/user/:id"</span>,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: <span class="string">"用户"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">"../views/User"</span>)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<h2 id="10、路由和组件内守卫"><a href="#10、路由和组件内守卫" class="headerlink" title="10、路由和组件内守卫"></a>10、路由和组件内守卫</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 路由内守卫</span></span><br><span class="line">&#123;</span><br><span class="line">  path: <span class="string">"/user/:id"</span>,</span><br><span class="line">  meta: &#123;</span><br><span class="line">    title: <span class="string">"用户"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">"../views/User"</span>),</span><br><span class="line">  beforeEnter: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"进入用户界面"</span>)</span><br><span class="line">    next()</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件内守卫</span></span><br><span class="line"><span class="keyword">const</span> Foo = &#123;</span><br><span class="line">  template: <span class="string">`...`</span>,</span><br><span class="line">  beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// 在渲染该组件的对应路由被 confirm 前调用</span></span><br><span class="line">    <span class="comment">// 不！能！获取组件实例 `this`</span></span><br><span class="line">    <span class="comment">// 因为当守卫执行前，组件实例还没被创建</span></span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteUpdate (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// 在当前路由改变，但是该组件被复用时调用</span></span><br><span class="line">    <span class="comment">// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span></span><br><span class="line">    <span class="comment">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span></span><br><span class="line">    <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// 导航离开该组件的对应路由时调用</span></span><br><span class="line">    <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="11、keep-alive与代码复用"><a href="#11、keep-alive与代码复用" class="headerlink" title="11、keep-alive与代码复用"></a>11、keep-alive与代码复用</h2><p>每次离开首页，点击关于，首页的dom都会被销毁，加上keep-alive可以使它保存在缓存中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>include</code> 和 <code>exclude</code> 属性允许组件有条件地缓存。二者都可以用逗号分隔字符串、正则表达式或一个数组来表示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 逗号分隔字符串 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">include</span>=<span class="string">"a,b"</span>&gt;</span><span class="comment">&lt;!-- 不要随便加空格 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"view"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 正则表达式 (使用 `v-bind`) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">:include</span>=<span class="string">"/a|b/"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"view"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 数组 (使用 `v-bind`) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">:include</span>=<span class="string">"['a', 'b']"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"view"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue</category>
        <category>Vuejs</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-boot笔记--监管</title>
    <url>/spring-boot-actuator/</url>
    <content><![CDATA[<h1 id="十三、Spring-Boot与监管"><a href="#十三、Spring-Boot与监管" class="headerlink" title="十三、Spring Boot与监管"></a>十三、Spring Boot与监管</h1><h2 id="1、监控端点测试"><a href="#1、监控端点测试" class="headerlink" title="1、监控端点测试"></a>1、监控端点测试</h2><p>Spring Boot可以为我们提供准生产环境下的应用监控和管理功能。我们可以通过HTTP，JMX，SSH协议来进行操作，自动得到审计、健康及指标信息</p>
<a id="more"></a>

<table>
<thead>
<tr>
<th>id</th>
<th>描述</th>
<th>默认是否启用</th>
</tr>
</thead>
<tbody><tr>
<td>auditevents</td>
<td>显示当前应用程序的审计事件信息</td>
<td>Yes</td>
</tr>
<tr>
<td>beans</td>
<td>显示应用Spring Beans的完整列表</td>
<td>Yes</td>
</tr>
<tr>
<td>caches</td>
<td>显示可用缓存信息</td>
<td>Yes</td>
</tr>
<tr>
<td>conditions</td>
<td>显示自动装配类的状态及及应用信息</td>
<td>Yes</td>
</tr>
<tr>
<td>configprops</td>
<td>显示所有 @ConfigurationProperties 列表</td>
<td>Yes</td>
</tr>
<tr>
<td>env</td>
<td>显示 ConfigurableEnvironment 中的属性</td>
<td>Yes</td>
</tr>
<tr>
<td>flyway</td>
<td>显示 Flyway 数据库迁移信息</td>
<td>Yes</td>
</tr>
<tr>
<td>health</td>
<td>显示应用的健康信息（未认证只显示status，认证显示全部信息详情）</td>
<td>Yes</td>
</tr>
<tr>
<td>info</td>
<td>显示任意的应用信息</td>
<td>Yes</td>
</tr>
<tr>
<td>liquibase</td>
<td>展示Liquibase 数据库迁移</td>
<td>Yes</td>
</tr>
<tr>
<td>metrics</td>
<td>展示当前应用的 metrics 信息</td>
<td>Yes</td>
</tr>
<tr>
<td>mappings</td>
<td>显示所有 @RequestMapping 路径集列表</td>
<td>Yes</td>
</tr>
<tr>
<td>scheduledtasks</td>
<td>显示应用程序中的计划任务</td>
<td>Yes</td>
</tr>
<tr>
<td>sessions</td>
<td>允许从Spring会话支持的会话存储中检索和删除用户会话。</td>
<td>Yes</td>
</tr>
<tr>
<td>shutdown</td>
<td>允许应用以优雅的方式关闭（默认情况下不启用）</td>
<td>No</td>
</tr>
<tr>
<td>threaddump</td>
<td>执行一个线程dump</td>
<td>Yes</td>
</tr>
<tr>
<td>httptrace</td>
<td>显示HTTP跟踪信息（默认显示最后100个HTTP请求 - 响应交换）</td>
<td>Yes</td>
</tr>
<tr>
<td>heapdump</td>
<td>返回一个GZip压缩的hprof堆dump文件</td>
<td>Yes</td>
</tr>
<tr>
<td>prometheus</td>
<td>Prometheus服务器抓取的格式显示metrics信息</td>
<td>Yes</td>
</tr>
</tbody></table>
<p>只需要配置文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 放开Actuator Web REST 端点,否则访问不到</span></span><br><span class="line"><span class="meta">management.endpoint.beans.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">management.endpoints.web.base-path</span>=<span class="string">/actuator</span></span><br><span class="line"><span class="meta">management.endpoints.web.exposure.include</span>=<span class="string">*</span></span><br></pre></td></tr></table></figure>

<p>访问localhost:8080/actuator/health，可以知道应用健康信息</p>
<h3 id="2、自定义端点"><a href="#2、自定义端点" class="headerlink" title="2、自定义端点"></a>2、自定义端点</h3><p>我们可以按照两种策略来自定义：</p>
<ul>
<li>@Endpoint 同时支持JMX和http</li>
<li>@JmxEndpoint 只支持JMX技术</li>
<li>@WebEndpoint 只支持http</li>
</ul>
<p>通过在一个端点类上添加上面其中一个来表明该类是一个端点类。<br> 在类的方法使用@ReadOperation，@WriteOperation或@DeleteOperation，这分别会映射到Http中的 GET、POST、DELETE（对http来说）。  以下是我们自定义的一个端点：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Endpoint</span>(id = <span class="string">"ceshi"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeaturesEndpoint</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> Map&lt;String, Feature&gt; features = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">   <span class="meta">@ReadOperation</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Map&lt;String, Feature&gt; <span class="title">features</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> features;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@ReadOperation</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Feature <span class="title">feature</span><span class="params">(@Selector String name)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> features.get(name);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@WriteOperation</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureFeature</span><span class="params">(@Selector String name, Feature feature)</span> </span>&#123;</span><br><span class="line">       features.put(name, feature);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@DeleteOperation</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteFeature</span><span class="params">(@Selector String name)</span> </span>&#123;</span><br><span class="line">       features.remove(name);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Feature</span> </span>&#123;</span><br><span class="line">       <span class="keyword">private</span> Boolean enabled;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// getters、setters方法 </span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Spring Boot</category>
        <category>Actuator</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Actuator</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-boot笔记--分布式</title>
    <url>/spring-boot-distributed/</url>
    <content><![CDATA[<h1 id="十二、Spring-Boot与分布式"><a href="#十二、Spring-Boot与分布式" class="headerlink" title="十二、Spring Boot与分布式"></a>十二、Spring Boot与分布式</h1><h2 id="1、分布式应用"><a href="#1、分布式应用" class="headerlink" title="1、分布式应用"></a>1、分布式应用</h2><p>在分布式系统中，国内常用zookeeper+dubbo组合，而Spring Boot推荐使用全栈的Spring，Spring Boot+Spring Cloud</p>
<h2 id="2、ZooKeeper、Dubbo"><a href="#2、ZooKeeper、Dubbo" class="headerlink" title="2、ZooKeeper、Dubbo"></a>2、ZooKeeper、Dubbo</h2><p><strong>ZooKeeper</strong>是一个分布式的，开放源码的分布式应用程序协调服务。它是一个分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等</p>
<p><strong>Dubbo</strong>是Alibaba开源的分布式服务框架，它的最大特点是按照分层的方式来架构，使用这种方式可以是各个层之间解耦合（或者最大限度的松耦合）。从服务模型的角度来看，Dubbo采用的是一种非常简单的模型，要么是提供方提供服务，要么是消费方消费服务，所以基于这一点可以抽象出提供方（Provider）和消费服务方（Consumer）两个角色</p>
<a id="more"></a>

<h2 id="3、Docker安装ZooKeeper"><a href="#3、Docker安装ZooKeeper" class="headerlink" title="3、Docker安装ZooKeeper"></a>3、Docker安装ZooKeeper</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">安装</span><br><span class="line">docker pull zookeeper</span><br><span class="line">运行这里只指定了2181端口</span><br><span class="line">docker run --name mykeeper -p 2181:2181 --restart always -d [id]</span><br></pre></td></tr></table></figure>

<h2 id="4、使用Dubbo"><a href="#4、使用Dubbo" class="headerlink" title="4、使用Dubbo"></a>4、使用Dubbo</h2><p>首先创建一个空项目，新建模块provider-ticket（服务提供者）和consumer-user（用户）</p>
<p>这里注意依赖很重要，本人是Spring Boot2.2.4，所用依赖为</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-recipes<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li><p>将服务提供者注册到注册中心</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">在service包下创建一个接口</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TicketService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTicket</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">编写一个实现类</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">// 注意是Dubbo的Service</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TicketServiceImpl</span> <span class="keyword">implements</span> <span class="title">TicketService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTicket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"三体"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableDubbo</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderTicketApplication</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<p>配置文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">dubbo.application.name</span>=<span class="string">provider-ticket</span></span><br><span class="line"><span class="meta">dubbo.registry.address</span>=<span class="string">zookeeper://192.168.1.18:2181</span></span><br><span class="line"><span class="meta">dubbo.scan.base-packages</span>=<span class="string">com.ms.ticket.service</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在消费者测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先把服务提供者的service包里的接口复制过来，注意包的路径要完全一样</span></span><br><span class="line"><span class="comment">// 然后在UserService下</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span></span><br><span class="line">    TicketService ticketService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String ticket = ticketService.getTicket();</span><br><span class="line">        System.out.println(<span class="string">"买到票了"</span>+ticket);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进行测试</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">UserService userService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    userService.hello();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">dubbo.application.name</span>=<span class="string">consumer-user</span></span><br><span class="line"><span class="meta">dubbo.registry.address</span>=<span class="string">zookeeper://192.168.1.18:2181</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="5、Spring-Cloud-Eureka"><a href="#5、Spring-Cloud-Eureka" class="headerlink" title="5、Spring Cloud-Eureka"></a>5、Spring Cloud-Eureka</h2><p>创建空项目，在创建consumer-user，eureka-server，provider-ticket三个项目</p>
<p><strong>eureka-server</strong>配置和使用</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8761</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka-server</span>  <span class="comment">#eureka实例的主机名</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span>  <span class="comment"># 不把本身也注册在eureka里</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span>  <span class="comment">#不从eureka上来获取服务注册信息</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServerApplication</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<p><strong>provider-ticket</strong>配置和使用</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">provider-ticket</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span>  <span class="comment">#注册服务使用服务的ip地址</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TicketService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTicket</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"地心引力"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TicketController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    TicketService service;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/ticket"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTicket</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> service.getTicket();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>consumer-user</strong>配置和使用</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8200</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consumer-user</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span>  <span class="comment">#注册服务使用服务的ip地址</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/buy"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">buyTicket</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 请求/ticket</span></span><br><span class="line">        String a = restTemplate.getForObject(<span class="string">"http://PROVIDER-TICKET/ticket"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> name+<span class="string">"购买了"</span>+a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启发现服务功能</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerUserApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumerUserApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用负载均衡机制</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Spring Boot</category>
        <category>Dubbo</category>
        <category>Eureka</category>
        <category>ZooKeeper</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>ZooKeeper</tag>
        <tag>Dubbo</tag>
        <tag>Eureka</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-boot笔记--安全</title>
    <url>/spring-boot-security/</url>
    <content><![CDATA[<h1 id="十一、Spring-Boot与安全"><a href="#十一、Spring-Boot与安全" class="headerlink" title="十一、Spring Boot与安全"></a>十一、Spring Boot与安全</h1><p>应用程序的两个主要区域是“认证”和“授权”（或者访问控制），这两个区域是Spring Security的两个目标</p>
<ul>
<li>“认证”（Authentication），是建立一个它声明的主体的过程（一个“个体”一般是指用户，设备或一些可以在你的应用程序中执行动作的其它系统）</li>
<li>“授权”（Authorization），指确定一个主体是否允许在你的应用程序执行一个动作的过程。为了抵达需要授权的店，主体的身份已经有认证过程建立</li>
<li>这个概念是通用的而不是只在Spring Security中</li>
</ul>
<a id="more"></a>

<h2 id="1、登录、认证、授权"><a href="#1、登录、认证、授权" class="headerlink" title="1、登录、认证、授权"></a>1、登录、认证、授权</h2><p>首先引入Spring Security</p>
<figure class="highlight xml"><figcaption><span>&lt;dependency&gt;</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>定制自己的配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// super.configure(http);</span></span><br><span class="line">        <span class="comment">// 定制请求的授权规则</span></span><br><span class="line">        http.authorizeRequests().antMatchers(<span class="string">"/"</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">"/hello/**"</span>).hasRole(<span class="string">"user"</span>)</span><br><span class="line">                .antMatchers(<span class="string">"/data/**"</span>).hasRole(<span class="string">"admin"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开启自动配置的登录功能</span></span><br><span class="line">        <span class="comment">// /login来到登录页</span></span><br><span class="line">        <span class="comment">// 错误来到/login?error</span></span><br><span class="line">        <span class="comment">// loginPage("/userlogin")自己的登录页</span></span><br><span class="line">        <span class="comment">// 默认post请求的/login代表处理登录，一旦自己定制登录页，loginPage的post请求就是登录</span></span><br><span class="line">        <span class="comment">// usernameParameter,passwordParameter设置登录表单的name</span></span><br><span class="line">        http.formLogin()</span><br><span class="line">            .usernameParameter(<span class="string">"user"</span>).passwordParameter(<span class="string">"pwd"</span>)</span><br><span class="line">            .loginPage(<span class="string">"/userlogin"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开启自动配置的注销功能</span></span><br><span class="line">        <span class="comment">// 访问logout表示用户注销，清空session</span></span><br><span class="line">        <span class="comment">// 注销成功返回到登录页面</span></span><br><span class="line">        <span class="comment">// logoutSuccessUrl("/")注销成功来到首页</span></span><br><span class="line">        http.logout().logoutSuccessUrl(<span class="string">"/"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开启记住我功能</span></span><br><span class="line">        <span class="comment">// 登录成功后，将cookie发给浏览器保存，以后访问页面会带上这个cookie</span></span><br><span class="line">        <span class="comment">// 点击注销会删除cookie</span></span><br><span class="line">        <span class="comment">// rememberMeParameter设置checkbox的name</span></span><br><span class="line">        http.rememberMe().rememberMeParameter(<span class="string">"remember"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// super.configure(auth);</span></span><br><span class="line">        <span class="comment">// 定制认证规则</span></span><br><span class="line">        auth.inMemoryAuthentication()</span><br><span class="line">                .withUser(<span class="string">"zhangsan"</span>).password(<span class="string">"123456"</span>).roles(<span class="string">"user"</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .withUser(<span class="string">"lisi"</span>).password(<span class="string">"qwer"</span>).roles(<span class="string">"data"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Spring Boot</category>
        <category>Spring Security</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Spring Security</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-boot笔记--任务</title>
    <url>/spring-boot-task/</url>
    <content><![CDATA[<h1 id="十、Spring-Boot与任务"><a href="#十、Spring-Boot与任务" class="headerlink" title="十、Spring Boot与任务"></a>十、Spring Boot与任务</h1><h2 id="1、异步任务"><a href="#1、异步任务" class="headerlink" title="1、异步任务"></a>1、异步任务</h2><ul>
<li><strong>同步方法</strong>调用一旦开始，调用者必须等到方法调用返回后，才能继续后续的行为。</li>
<li><strong>异步方法</strong>调用一旦开始，方法调用就会立即返回，调用者就可以继续后续的操作。而，异步方法通常会在另外一个线程中，“真实”地执行着。整个过程，不会阻碍调用者的工作</li>
</ul>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 告诉Spring Boot这是一个异步的方法</span></span><br><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"正在处理......"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">AsyncService asyncService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">    asyncService.hello();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启异步注解</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootTaskApplication</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<h2 id="2、定时任务"><a href="#2、定时任务" class="headerlink" title="2、定时任务"></a>2、定时任务</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// second(秒)、minute(分)、hour(时)、day of month(日)、month(月)、day of week(周几)</span></span><br><span class="line"><span class="comment">// 0 * * * * MON-FRI  周一到周五每一分钟0时都启动</span></span><br><span class="line"><span class="comment">// @Scheduled(cron = "0 * * * * WED")</span></span><br><span class="line"><span class="comment">// @Scheduled(cron = "0,1,2,3,4 * * * * WED")</span></span><br><span class="line"><span class="comment">// @Scheduled(cron = "0-4 * * * * WED")</span></span><br><span class="line"><span class="comment">// @Scheduled(cron = "0/4 * * * * WED")  每四秒执行一次</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Hello"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启定时注解</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootTaskApplication</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<p><strong>cron表达式</strong></p>
<table>
<thead>
<tr>
<th>字段</th>
<th>允许值</th>
<th>允许的特殊字符</th>
</tr>
</thead>
<tbody><tr>
<td>秒</td>
<td>0-59</td>
<td>, - * /</td>
</tr>
<tr>
<td>分</td>
<td>0-59</td>
<td>, - * /</td>
</tr>
<tr>
<td>小时</td>
<td>0-23</td>
<td>, - * /</td>
</tr>
<tr>
<td>日期</td>
<td>1-31</td>
<td>, - * ? / L W C</td>
</tr>
<tr>
<td>月份</td>
<td>1-12</td>
<td>, - * /</td>
</tr>
<tr>
<td>星期</td>
<td>0-7或SUN-SAT 0,7是SUN</td>
<td>, - * ? / L C #</td>
</tr>
</tbody></table>
<p><strong>特殊字符的含义</strong></p>
<table>
<thead>
<tr>
<th>特殊字符</th>
<th>代表含义</th>
</tr>
</thead>
<tbody><tr>
<td>,</td>
<td>枚举</td>
</tr>
<tr>
<td>-</td>
<td>区间</td>
</tr>
<tr>
<td>*</td>
<td>任意</td>
</tr>
<tr>
<td>/</td>
<td>步长</td>
</tr>
<tr>
<td>?</td>
<td>日/星期冲突匹配</td>
</tr>
<tr>
<td>L</td>
<td>最后</td>
</tr>
<tr>
<td>W</td>
<td>工作日</td>
</tr>
<tr>
<td>C</td>
<td>和calendar联系后计算过的值</td>
</tr>
<tr>
<td>#</td>
<td>星期，4#2，第2个星期四</td>
</tr>
</tbody></table>
<h2 id="3、邮件任务"><a href="#3、邮件任务" class="headerlink" title="3、邮件任务"></a>3、邮件任务</h2><p>首先设置一个邮箱，开启stmp和pop3服务，生成授权码，为了安全起见，我们不会使用密码，而是使用授权码发送邮件</p>
<p>导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Spring Boot配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.mail.username</span>=<span class="string">xxxxxxxxxxx@163.com</span></span><br><span class="line"><span class="meta">spring.mail.password</span>=<span class="string">xxxxxxxx</span></span><br><span class="line"><span class="meta">spring.mail.host</span>=<span class="string">smtp.163.com</span></span><br></pre></td></tr></table></figure>

<p>发送简单邮件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SimpleMailMessage mailMessage = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">    mailMessage.setSubject(<span class="string">"springboot邮件任务"</span>);</span><br><span class="line">    mailMessage.setText(<span class="string">"20200219邮件测试"</span>);</span><br><span class="line">    mailMessage.setTo(<span class="string">"xxxxxxxxxx@qq.com"</span>);</span><br><span class="line">    mailMessage.setFrom(<span class="string">"xxxxxxxxxxx@163.com"</span>);</span><br><span class="line">    javaMailSender.send(mailMessage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发送复杂邮件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个复杂的消息邮件</span></span><br><span class="line">    MimeMessage mimeMessage = javaMailSender.createMimeMessage();</span><br><span class="line">    MimeMessageHelper mimeMessageHelper = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        mimeMessageHelper = <span class="keyword">new</span> MimeMessageHelper(mimeMessage, <span class="keyword">true</span>);</span><br><span class="line">        mimeMessageHelper.setSubject(<span class="string">"springboot邮件任务"</span>);</span><br><span class="line">        mimeMessageHelper.setText(<span class="string">"&lt;b style='color: red'&gt;20200219复杂邮件测试&lt;/b&gt;"</span>, <span class="keyword">true</span>);</span><br><span class="line">        mimeMessageHelper.setTo(<span class="string">"xxxxxxxxxx@qq.com"</span>);</span><br><span class="line">        mimeMessageHelper.setFrom(<span class="string">"xxxxxxxxxxx@163.com"</span>);</span><br><span class="line">        mimeMessageHelper.addAttachment(<span class="string">"测试文件.jpg"</span>, <span class="keyword">new</span> File(<span class="string">"测试文件.jpg"</span>));</span><br><span class="line">        javaMailSender.send(mimeMessage);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (MessagingException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Spring Boot</category>
        <category>Async</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Async</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-boot笔记--检索</title>
    <url>/spring-boot-search/</url>
    <content><![CDATA[<h1 id="九、Spring-Boot与检索"><a href="#九、Spring-Boot与检索" class="headerlink" title="九、Spring Boot与检索"></a>九、Spring Boot与检索</h1><h2 id="1、docker下载使用Elasticsearch"><a href="#1、docker下载使用Elasticsearch" class="headerlink" title="1、docker下载使用Elasticsearch"></a>1、docker下载使用Elasticsearch</h2><p>下载Elasticsearch</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull elasticsearch</span><br></pre></td></tr></table></figure>

<p>启动</p>
<a id="more"></a>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network create somenetwork</span><br><span class="line">设置占用空间大小-e "ES_JAVA_OPTS=-Xms256m -Xmx256m"</span><br><span class="line">docker run --net somenetwork -e "ES_JAVA_OPTS=-Xms256m -Xmx256m" -d -p 9200:9200 -p 9300:9300 --name mysearch [id]</span><br></pre></td></tr></table></figure>

<p>输入IP地址:9200，出现json数据，就成功了</p>
<p>关于Elasticsearch的使用，就是使用Restful风格检索和插入数据，具体可看<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html" target="_blank" rel="noopener">《Elasticsearch 权威指南》中文版</a></p>
<h2 id="2、Spring-Data操作Elasticsearch"><a href="#2、Spring-Data操作Elasticsearch" class="headerlink" title="2、Spring Data操作Elasticsearch"></a>2、Spring Data操作Elasticsearch</h2>]]></content>
      <categories>
        <category>Spring Boot</category>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-boot笔记--Docker</title>
    <url>/spring-boot-docker/</url>
    <content><![CDATA[<h1 id="八、Spring-Boot与Docker"><a href="#八、Spring-Boot与Docker" class="headerlink" title="八、Spring Boot与Docker"></a>八、Spring Boot与Docker</h1><h2 id="1、Docker的安装"><a href="#1、Docker的安装" class="headerlink" title="1、Docker的安装"></a>1、Docker的安装</h2><ol>
<li><p>安装Linux虚拟机，这里我们使用一款免费开源的虚拟机软件<strong>Oracle VM VirtualBox</strong>，这款虚拟软件机体积小，而且是免费的，而虚拟机我使用的是最新的centos8版本</p>
</li>
<li><p>为了方便写命令，还可以使用客户端连接虚拟机，这里使用的是xshell6，可以免费下载非商用版本，<a href="https://www.netsarang.com/zh/free-for-home-school/" target="_blank" rel="noopener">家庭/学校免费版本</a>，填写姓名和邮箱，勾选两者，会把下载链接发送到邮箱</p>
</li>
<li><p>虚拟机网络设置，选择桥接网卡，有Wireless的是无线网卡，有Family Controller的是有线网卡，勾选高级里的接入网线</p>
<a id="more"></a>
</li>
<li><p><a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="noopener">参考Docker官方文档</a>，到时间2020-02-18时，在执行下面的命令时</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>

<p>会出错，因为containerd.io的版本问题，我们可以下载<a href="https://download.docker.com/linux/centos/7/x86_64/stable/Packages/" target="_blank" rel="noopener">最新版本</a>，然后再安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo dnf install https://download.docker.com/linux/centos/7/x86_64/stable/Packages/containerd.io-1.2.6-3.3.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>

<p>centos8里使用dnf代替yum但是yum仍可以使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="2、Docker的操作"><a href="#2、Docker的操作" class="headerlink" title="2、Docker的操作"></a>2、Docker的操作</h2><ol>
<li><p>检索</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker search ...</span><br></pre></td></tr></table></figure>
</li>
<li><p>拉取/下载</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull ...</span><br><span class="line">docker pull mysql:版本号</span><br><span class="line">不加：默认是最新版</span><br></pre></td></tr></table></figure>

<p>如果pull过慢，我使用的是阿里云的镜像加速器，首先得有阿里云的账号</p>
</li>
<li><p>查看本地所有镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">docker rmi images-id</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="3、docker容器操作"><a href="#3、docker容器操作" class="headerlink" title="3、docker容器操作"></a>3、docker容器操作</h2><p>首先有一个软件镜像，运行镜像产生一个容器（代表正在运行的软件）</p>
<ol>
<li><p>运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name [container-name] -d [image-name]</span><br><span class="line">	--name: 自定义容器名</span><br><span class="line">	-d: 后台运行</span><br><span class="line">	image-name: 指定镜像模板</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps</span><br><span class="line">查看运行中的容器</span><br><span class="line">docker ps -a</span><br><span class="line">查看是否有启动失败的容器，查看所有容器</span><br><span class="line">docker logs [id]</span><br><span class="line">查看启动失败原因，查看日志</span><br></pre></td></tr></table></figure>
</li>
<li><p>停止</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker stop [id]/[name]</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm [id]</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker start [id]</span><br></pre></td></tr></table></figure>
</li>
<li><p>端口映射</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-p 8080(主机端口):8080(容器端口)</span><br></pre></td></tr></table></figure>
</li>
<li><p>有时Linux的防火墙会禁止我们访问</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service firewalld status</span><br><span class="line">查看防火墙状态</span><br><span class="line">service firewalld stop</span><br><span class="line">关闭防火墙</span><br></pre></td></tr></table></figure>
</li>
<li><p>更多命令参考<a href="https://docs.docker.com/engine/reference/commandline/docker/" target="_blank" rel="noopener">官方文档</a></p>
</li>
</ol>
<h2 id="4、安装mysql"><a href="#4、安装mysql" class="headerlink" title="4、安装mysql"></a>4、安装mysql</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull mysql</span><br><span class="line"></span><br><span class="line">错误的启动</span><br><span class="line">docker run --name mydata -d mysql</span><br><span class="line">mysql运行时必须指定密码</span><br><span class="line"></span><br><span class="line">在docker hub搜索镜像时，也有介绍如何启动镜像</span><br><span class="line">正确的启动</span><br><span class="line">docker run -p 3306:3306 --name mydata -e MYSQL_ROOT_PASSWORD=123456 -d mysql</span><br><span class="line"></span><br><span class="line">但是用Navicat连接还会出现错误</span><br><span class="line">2059错误: Authentication plugin 'caching_sha2_password' cannot be loaded</span><br><span class="line"></span><br><span class="line">解决方法：</span><br><span class="line">1. docker exec -it 236b2624632d(你的id) bash  进入容器，在容器中执行命令</span><br><span class="line">2. mysql -u root -p  连接mysql</span><br><span class="line">3. alter user 'root'@'%' identified with mysql_native_password by '123456';</span><br><span class="line">   将用户的加密方式改为mysql_native_password</span><br><span class="line">4. flush privileges;  使权限配置项立即生效</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如果在使用docker过程中出现错误</span><br><span class="line">docker: Error response from daemon: driver failed programming external connectivity on endpoint mydata (33a937d07a142ebc1dad11c33adccfbe6fb68071a5d1043f8f40c527c15d4ec4):  (iptables failed: iptables --wait -t nat -A DOCKER -p tcp -d 0/0 --dport 3306 -j DNAT --to-destination 172.17.0.2:3306 ! -i docker0: iptables: No chain/target/match by that name.</span><br><span class="line"></span><br><span class="line">重启即可</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">几个其它的操作</span><br><span class="line">docker run --name some-mysql -v /my/custom:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span><br><span class="line"></span><br><span class="line">将主机的/my/custom文件夹挂载到mysql docker容器中的/etc/mysql/conf.d文件夹里面</span><br><span class="line">改mysql的配置只需要把mysql配置文件放在/my/custom</span><br><span class="line"></span><br><span class="line">docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br><span class="line"></span><br><span class="line">不用配置文件，配置mysql</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Spring Boot</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Docker</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue笔记--VueCLI脚手架</title>
    <url>/Vue%E7%AC%94%E8%AE%B0-VueCLI%E8%84%9A%E6%89%8B%E6%9E%B6/</url>
    <content><![CDATA[<h1 id="九、脚手架的使用"><a href="#九、脚手架的使用" class="headerlink" title="九、脚手架的使用"></a>九、脚手架的使用</h1><h2 id="1-VueCLI2的使用"><a href="#1-VueCLI2的使用" class="headerlink" title="1.VueCLI2的使用"></a>1.VueCLI2的使用</h2><p><strong>VueCLI2的文件解释</strong></p>
<p>build文件夹和config都是配置相关</p>
<p>.babelrc就是将ES6转为ES5，适配更多浏览器的配置文件</p>
<p>.editorconfig对文本进行统一</p>
<p>.eslintignore对配置的文件进行格式忽略</p>
<a id="more"></a>

<p>.gitignore对配置的文件进行git上传忽略</p>
<p>.eslintrc代码检测的配置</p>
<p>.postcssrc对css转化的配置</p>
<p>package.json管理node包，指定一个大概的版本</p>
<p>package-lock.json真实的版本</p>
<p>eslint虽然可以规范代码，但是有些规范和我们的习惯有些不同，如果想关掉它，可以在config里将useESlint改为false</p>
<p>Vue程序运行过程</p>
<p>先将template转换为抽象语法树（abstract syntax tree）缩写为ast，然后编译为一个render函数，再将render函数转换为一个虚拟dom，最后转换为一个真实dom</p>
<p><strong>runtime-compiler</strong></p>
<p>template -&gt; ast -&gt; render -&gt; vdom -&gt; UI</p>
<p><strong>runtime-only</strong></p>
<p>render -&gt; vdom -&gt; UI</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// App.vue本身就是组件</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#app"</span>,</span><br><span class="line">  template: <span class="string">"&lt;App/&gt;"</span>,</span><br><span class="line">  components: &#123;</span><br><span class="line">    App</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#app"</span>,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一种类型也可以写为</span></span><br><span class="line"><span class="comment">// createElement实际上就是h这个函数</span></span><br><span class="line"><span class="comment">// createElement("标签", &#123;标签的属性&#125;, [数组的内容])</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#app"</span>, </span><br><span class="line">  render: <span class="function"><span class="keyword">function</span> (<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 普通用法</span></span><br><span class="line">    <span class="comment">// render会把#app的内容替换为h2标签</span></span><br><span class="line">    <span class="keyword">return</span> createElement(<span class="string">"h2"</span>, </span><br><span class="line">      &#123;<span class="attr">class</span>: <span class="string">"box"</span>&#125;, </span><br><span class="line">      [<span class="string">"Hello World"</span>])</span><br><span class="line">    <span class="comment">// 这样h2里会有一个按钮</span></span><br><span class="line">    <span class="keyword">return</span> createElement(<span class="string">"h2"</span>, </span><br><span class="line">      &#123;<span class="attr">class</span>: <span class="string">"box"</span>&#125;, </span><br><span class="line">      [<span class="string">"Hello World"</span>, createElement(<span class="string">"button"</span>, [<span class="string">"按钮"</span>])])</span><br><span class="line">    <span class="comment">//也可以传入一个组件，例如下面这个cpn组件</span></span><br><span class="line">    <span class="keyword">return</span> createElement(cpn)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cpn = &#123;</span><br><span class="line">  template: <span class="string">"&lt;div&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;"</span>,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果在之后的开发中，你仍然用template，就需要选择Runtime-Compiler</p>
<p>如果在之后的开发中，使用的是.vue文件开发，那么可以选择Runtime-only</p>
<h2 id="2、VueCLI3的使用"><a href="#2、VueCLI3的使用" class="headerlink" title="2、VueCLI3的使用"></a>2、VueCLI3的使用</h2><ol>
<li>Please pick  a preset: (Use arrow keys)<ul>
<li>default (babel, eslint)</li>
<li>Manually select features (选项按空格选中和取消)</li>
</ul>
</li>
<li>Check the features needed for you project<ul>
<li>Babel</li>
<li>TypeScript</li>
<li>Progresssive Web App (PWA) Support</li>
<li>Router (路由)</li>
<li>Vuex</li>
<li>CSS Pre-processors (CSS 预处理器)</li>
<li>Linter / Formatter (ESLint)</li>
<li>Unit Testing (单元测试)</li>
<li>E2E Testing (端到端测试)</li>
</ul>
</li>
<li>Where do you prefer placing config for Babel, ESLint, etc.?<ul>
<li>In dedicated config files (单独的配置文件)</li>
<li>In package.json (写到package.json里)</li>
</ul>
</li>
<li>Save this as a preset for future project ? (保存一个自己的配置)</li>
<li>Save preset as: (保存配置的名字)</li>
</ol>
<h2 id="3、VueCLI3配置"><a href="#3、VueCLI3配置" class="headerlink" title="3、VueCLI3配置"></a>3、VueCLI3配置</h2><p>可以使用vue ui来设置</p>
<p>也可以创建一个vue.config.js</p>
]]></content>
      <categories>
        <category>Vue</category>
        <category>Vuejs</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>VueCLI</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue笔记--组件化</title>
    <url>/vue-component/</url>
    <content><![CDATA[<h1 id="八、Vue组件化"><a href="#八、Vue组件化" class="headerlink" title="八、Vue组件化"></a>八、Vue组件化</h1><h2 id="1、组件创建的步骤"><a href="#1、组件创建的步骤" class="headerlink" title="1、组件创建的步骤"></a>1、组件创建的步骤</h2><ol>
<li>调用Vue.extend()方法创建组件构造器</li>
<li>调用Vue.component()方法注册组件</li>
<li>在Vue实例的作用范围内使用组件</li>
</ol>
<a id="more"></a>

<h2 id="2、Vue组件的基本使用"><a href="#2、Vue组件的基本使用" class="headerlink" title="2、Vue组件的基本使用"></a>2、Vue组件的基本使用</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ms-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">ms-cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ms-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">ms-cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ms-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">ms-cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ms-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">ms-cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> cpnC = Vue.extend(&#123;</span></span><br><span class="line">      template: `</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line">          测试</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line">      `</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">"ms-cpn"</span>, cpnC);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="actionscript">        message: <span class="string">"hello"</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3、全局组件和局部组件"><a href="#3、全局组件和局部组件" class="headerlink" title="3、全局组件和局部组件"></a>3、全局组件和局部组件</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ms-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">ms-cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ms-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">ms-cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ms-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">ms-cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ms-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">ms-cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> cpnC = Vue.extend(&#123;</span></span><br><span class="line">      template: `</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line">          测试</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line">      `</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// Vue.component("ms-cpn", cpnC);  //全局组件，可以在多个Vue实例下启用</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="actionscript">        message: <span class="string">"hello"</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      components: &#123;</span><br><span class="line"><span class="actionscript">        msCpn: cpnC  <span class="comment">//局部组件</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4、父组件与子组件"><a href="#4、父组件与子组件" class="headerlink" title="4、父组件与子组件"></a>4、父组件与子组件</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ms-cpn2</span>&gt;</span><span class="tag">&lt;/<span class="name">ms-cpn2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// cpnC1就是子组件</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> cpnC1 = Vue.extend(&#123;</span></span><br><span class="line">      template: `</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line">          测试</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line">      `</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// cpnC2就是父组件</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> cpnC2 = Vue.extend(&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 注意子组件要用有一个根元素包括他</span></span></span><br><span class="line">      template: `</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">ms-cpn1</span>&gt;</span><span class="tag">&lt;/<span class="name">ms-cpn1</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line">            测试2</span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">      `,</span><br><span class="line">      components: &#123;</span><br><span class="line"><span class="actionscript">        <span class="comment">// 在组件里注册后，就可以在组件里使用</span></span></span><br><span class="line">        msCpn1: cpnC1 </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// Vue.component("ms-cpn", cpnC);  //全局组件，可以在多个Vue实例下启用</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 也可以把app看成一个组件，root组件</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="actionscript">        message: <span class="string">"hello"</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      components: &#123;</span><br><span class="line"><span class="actionscript">        msCpn2: cpnC2  <span class="comment">//局部组件，只注册了cpnC2，是不能使用cpnC1的，即使是父子关系</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5、组件语法糖"><a href="#5、组件语法糖" class="headerlink" title="5、组件语法糖"></a>5、组件语法糖</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ms-cpn2</span>&gt;</span><span class="tag">&lt;/<span class="name">ms-cpn2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 全局组件的语法糖</span></span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">"msCpn1"</span>,&#123;</span></span><br><span class="line">      template: `</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line">          测试</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line">      `</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 局部组件的语法糖</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="actionscript">        message: <span class="string">"hello"</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      components: &#123;</span><br><span class="line">        msCpn2: &#123;</span><br><span class="line"><span class="actionscript">        <span class="comment">// 注意子组件要用有一个根元素包括他</span></span></span><br><span class="line">          template: `</span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">              <span class="tag">&lt;<span class="name">ms-cpn1</span>&gt;</span><span class="tag">&lt;/<span class="name">ms-cpn1</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">              <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line">                测试2</span><br><span class="line"><span class="handlebars"><span class="xml">              <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">          `,</span><br><span class="line">          components: &#123;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 在组件里注册后，就可以在组件里使用</span></span></span><br><span class="line">            msCpn1: &#123;</span><br><span class="line">              template: `</span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line">                  测试</span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line">              `</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="6、模板分离与组件访问data"><a href="#6、模板分离与组件访问data" class="headerlink" title="6、模板分离与组件访问data"></a>6、模板分离与组件访问data</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ms-cpn1</span>&gt;</span><span class="tag">&lt;/<span class="name">ms-cpn1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 第一种写法 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/x-template"</span> <span class="attr">id</span>=<span class="string">"cpn1"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      测试：</span><span class="template-variable">&#123;&#123;message&#125;&#125;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 第二种写法 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"cpn2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">      测试</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 全局组件的语法糖</span></span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">"msCpn1"</span>,&#123;</span></span><br><span class="line"><span class="actionscript">      template: <span class="string">"#cpn1"</span>,</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 组件里的data必须是一个函数，为什么必须是一个函数</span></span></span><br><span class="line">      /*</span><br><span class="line">        组件是一个模板，每次使用这个组件，都会按着模板复制一个实例，而所有实例用的data都是模板中的，共享的，</span><br><span class="line">        这里把data项改成函数后每次复制都会调用函数为每个实例生成一份单独的data</span><br><span class="line">      */</span><br><span class="line">      data() &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">          message: <span class="string">"hehehe"</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 局部组件的语法糖</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="actionscript">        message: <span class="string">"hello"</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="7、父子组件通信"><a href="#7、父子组件通信" class="headerlink" title="7、父子组件通信"></a>7、父子组件通信</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这里@render-test不能用驼峰 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ="renderTest"不写renderTest会默认把this.$emit传入的值传进去 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ms-cpn1</span> @<span class="attr">render-test</span>=<span class="string">"renderTest"</span>&gt;</span><span class="tag">&lt;/<span class="name">ms-cpn1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 第一种写法 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/x-template"</span> <span class="attr">id</span>=<span class="string">"cpn1"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        测试cpn1：</span><span class="template-variable">&#123;&#123;message&#125;&#125;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-for</span>=<span class="string">"category in categories"</span> @<span class="attr">click</span>=<span class="string">"btnClick(category)"</span>&gt;</span></span><span class="template-variable">&#123;&#123;category&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">ms-cpn2</span> <span class="attr">:messageInfo</span>=<span class="string">"messageInfo"</span>&gt;</span><span class="tag">&lt;/<span class="name">ms-cpn2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 第二种写法 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"cpn2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">      测试cpn2：&#123;&#123;messageInfo&#125;&#125;</span><br><span class="line">      &#123;&#123;games&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> msCpn2 = &#123;</span></span><br><span class="line"><span class="actionscript">      template: <span class="string">"#cpn2"</span>,</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 数组写法</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// props: ["message"]</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 对象写法</span></span></span><br><span class="line">      props: &#123;</span><br><span class="line"><span class="actionscript">        <span class="comment">// 还可以限制类型</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// message: String,</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 多种类型</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// message: [String, Number],</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 还可以有默认值</span></span></span><br><span class="line">        messageInfo: &#123;</span><br><span class="line"><span class="javascript">          type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">default</span>: <span class="string">"default"</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 必须传值，不传报错</span></span></span><br><span class="line"><span class="actionscript">          required: <span class="literal">true</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        games: &#123;</span><br><span class="line"><span class="javascript">          type: <span class="built_in">Array</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 类型是对象和数组时，默认值必须是一个函数</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">default</span>() &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> []</span></span><br><span class="line">          &#125;,</span><br><span class="line"><span class="actionscript">          <span class="comment">// 自定义验证</span></span></span><br><span class="line">          validator(value) &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> <span class="literal">true</span></span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> msCpn1 = &#123;</span></span><br><span class="line"><span class="actionscript">      template: <span class="string">"#cpn1"</span>,</span></span><br><span class="line">      data() &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">          messageInfo: <span class="string">"hehehe"</span>,</span></span><br><span class="line"><span class="actionscript">          categories: [<span class="string">"Vue"</span>, <span class="string">"Spring Boot"</span>, <span class="string">"react"</span>]</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        btnClick(value) &#123;</span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(value);</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 发射事件</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 这里不能用驼峰</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.$emit(<span class="string">"render-test"</span>, value);</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      props: &#123;</span><br><span class="line">        message: &#123;</span><br><span class="line"><span class="javascript">          type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">default</span>: <span class="string">"neeee"</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      components: &#123;</span><br><span class="line">        msCpn2</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="actionscript">        message: <span class="string">"hello"</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        renderTest(value) &#123;</span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(value+<span class="string">" renderTest被点击了"</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      components: &#123;</span><br><span class="line">        msCpn1</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="8、父子通信结合双向绑定"><a href="#8、父子通信结合双向绑定" class="headerlink" title="8、父子通信结合双向绑定"></a>8、父子通信结合双向绑定</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"cpn"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;number1&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;number2&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;snum1&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;snum2&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- &lt;input type="text" v-model="snum1"&gt; --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">:value</span>=<span class="string">"snum1"</span> @<span class="attr">input</span>=<span class="string">"renderNum"</span> <span class="attr">id</span>=<span class="string">"snum1"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- &lt;input type="text" v-model="snum2"&gt; --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">:value</span>=<span class="string">"snum2"</span> @<span class="attr">input</span>=<span class="string">"renderNum"</span> <span class="attr">id</span>=<span class="string">"snum2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span> <span class="attr">:number1</span>=<span class="string">"num1"</span> <span class="attr">:number2</span>=<span class="string">"num2"</span> @<span class="attr">render</span>=<span class="string">"getChange"</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="actionscript">        message: <span class="string">"hello"</span>,</span></span><br><span class="line">        num1: 1,</span><br><span class="line">        num2: 0,</span><br><span class="line">      &#125;,</span><br><span class="line">      components: &#123;</span><br><span class="line">        cpn: &#123;</span><br><span class="line"><span class="actionscript">          template: <span class="string">"#cpn"</span>,</span></span><br><span class="line">          props: &#123;</span><br><span class="line"><span class="javascript">            number1: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">            number2: <span class="built_in">Number</span>,</span></span><br><span class="line">          &#125;,</span><br><span class="line">          data() &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">              snum1: <span class="keyword">this</span>.number1,</span></span><br><span class="line"><span class="actionscript">              snum2: <span class="keyword">this</span>.number2,</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          methods: &#123;</span><br><span class="line">            renderNum(event) &#123;</span><br><span class="line"><span class="javascript">              <span class="built_in">console</span>.log(<span class="string">"renderNum"</span>, event.target.id, event.target.value)</span></span><br><span class="line"><span class="actionscript">              <span class="keyword">if</span> (event.target.id == <span class="string">"snum1"</span>)&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.snum1 = event.target.value</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.$emit(<span class="string">"render"</span>, <span class="string">"snum1"</span>, <span class="keyword">this</span>.snum1)</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.snum2 = event.target.value * <span class="number">100</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.$emit(<span class="string">"render"</span>, <span class="string">"snum2"</span>, <span class="keyword">this</span>.snum2)</span></span><br><span class="line"><span class="actionscript">              &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.snum2 = event.target.value</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.$emit(<span class="string">"render"</span>, <span class="string">"snum2"</span>, <span class="keyword">this</span>.snum2)</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.snum1 = event.target.value / <span class="number">100</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.$emit(<span class="string">"render"</span>, <span class="string">"snum1"</span>, <span class="keyword">this</span>.snum1)</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        getChange(who, value) &#123;</span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">"getchange"</span>, who, value)</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">if</span> (who == <span class="string">"snum1"</span>)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.num1 = <span class="built_in">Number</span>(value)</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">else</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.num2 = <span class="built_in">Number</span>(value)</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="9、父子组件的访问"><a href="#9、父子组件的访问" class="headerlink" title="9、父子组件的访问"></a>9、父子组件的访问</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span> <span class="attr">ref</span>=<span class="string">"ceshi"</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"showMessage"</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"cpn"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>cpn测试<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="actionscript">        message: <span class="string">"hello"</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        showMessage() &#123;</span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">"app showMessage"</span>)</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 1、$children的使用</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="keyword">this</span>.$children)</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="keyword">this</span>.$children[<span class="number">0</span>].name)</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.$children[<span class="number">0</span>].showMessage()</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 2、$refs是使用</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          // 没给<span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span>加之前是空的</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs)</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs.ceshi)</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      components: &#123;</span><br><span class="line">        cpn: &#123;</span><br><span class="line">          data() &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">              name: <span class="string">"cpn name"</span></span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line"><span class="actionscript">          template: <span class="string">"#cpn"</span>,</span></span><br><span class="line">          methods: &#123;</span><br><span class="line">            showMessage() &#123;</span><br><span class="line"><span class="javascript">              <span class="built_in">console</span>.log(<span class="string">"cpn showMessage"</span>)</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="10、Vue插槽"><a href="#10、Vue插槽" class="headerlink" title="10、Vue插槽"></a>10、Vue插槽</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"getName"</span>&gt;</span>aaaa<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span> <span class="attr">ref</span>=<span class="string">"ceshi"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.baidu.com"</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span> <span class="attr">ref</span>=<span class="string">"aaa"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 使用子组件的插槽 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:ceshi</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>插槽的测试<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 两个hhhhhhh会一起输出 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>hhhhhhhhhhhhhhhhh<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:ceshi2</span>=<span class="string">"ma"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;ma.data&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>hhhhhhhhhhhhhhhhh<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"cpn"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>cpn测试<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 设置子组件的插槽 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 这里的按钮会变为默认值 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"ceshi"</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>插槽的默认<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"ceshi2"</span> <span class="attr">data</span>=<span class="string">"data数据"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"cpn1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>cpn1测试<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="actionscript">        message: <span class="string">"hello"</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line"></span><br><span class="line">      &#125;,</span><br><span class="line">      components: &#123;</span><br><span class="line">        cpn: &#123;</span><br><span class="line">          data() &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">              name: <span class="string">"cpn name"</span></span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line"><span class="actionscript">          template: <span class="string">"#cpn"</span>,</span></span><br><span class="line">          methods: &#123;</span><br><span class="line"></span><br><span class="line">          &#125;,</span><br><span class="line">          components: &#123;</span><br><span class="line">            cpn1: &#123;</span><br><span class="line"><span class="actionscript">              template: <span class="string">"#cpn1"</span>,</span></span><br><span class="line">              methods: &#123;</span><br><span class="line"></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="11、Vue编译作用域"><a href="#11、Vue编译作用域" class="headerlink" title="11、Vue编译作用域"></a>11、Vue编译作用域</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span> <span class="attr">v-show</span>=<span class="string">"isShow"</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"cpn"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>cpn组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-show</span>=<span class="string">"isShow"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="actionscript">        message: <span class="string">"hello"</span>,</span></span><br><span class="line"><span class="actionscript">        isShow: <span class="literal">true</span>,</span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        </span><br><span class="line">      &#125;,</span><br><span class="line">      components: &#123;</span><br><span class="line">        cpn: &#123;</span><br><span class="line"><span class="actionscript">          template: <span class="string">"#cpn"</span>,</span></span><br><span class="line">          data() &#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">            isShow: <span class="literal">false</span>,</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Vue</category>
        <category>Vuejs</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue笔记--表单绑定</title>
    <url>/vue-form/</url>
    <content><![CDATA[<h1 id="七、Vue表单绑定"><a href="#七、Vue表单绑定" class="headerlink" title="七、Vue表单绑定"></a>七、Vue表单绑定</h1><h2 id="1、input与data数据的双向绑定"><a href="#1、input与data数据的双向绑定" class="headerlink" title="1、input与data数据的双向绑定"></a>1、input与data数据的双向绑定</h2><p>双向绑定是指数据改变，input的value跟着改变，input的value改变，数据也跟着改变</p>
<a id="more"></a>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 还有另一种方法可以实现 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">:value</span>=<span class="string">"message"</span> @<span class="attr">input</span>=<span class="string">"message = $event.target.value"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="actionscript">        message: <span class="string">"hello"</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、各种input的绑定</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- text类型 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 还有另一种方法可以实现 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">:value</span>=<span class="string">"message"</span> @<span class="attr">input</span>=<span class="string">"message = $event.target.value"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- radio类型 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"male"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"male"</span> <span class="attr">value</span>=<span class="string">"男"</span> <span class="attr">v-model</span>=<span class="string">"gender"</span>&gt;</span>男</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"female"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"female"</span> <span class="attr">value</span>=<span class="string">"女"</span> <span class="attr">v-model</span>=<span class="string">"gender"</span>&gt;</span>女</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>选中了：&#123;&#123;gender&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- checkbox类型 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- checkbox单选框 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"license"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"license"</span> <span class="attr">v-model</span>=<span class="string">"isLicense"</span>&gt;</span>同意</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">:disabled</span>=<span class="string">"!isLicense"</span>&gt;</span>同意<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- checkbox多选框 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"计算机原理"</span> <span class="attr">v-model</span>=<span class="string">"books"</span>&gt;</span>计算机原理</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"C语言程序设计"</span> <span class="attr">v-model</span>=<span class="string">"books"</span>&gt;</span>C语言程序设计</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"python从开始到入土"</span> <span class="attr">v-model</span>=<span class="string">"books"</span>&gt;</span>python从开始到入土</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"Java从基础到高级"</span> <span class="attr">v-model</span>=<span class="string">"books"</span>&gt;</span>Java从基础到高级</span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>您的选择是：&#123;&#123;books&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- select类型 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"university"</span> <span class="attr">v-model</span>=<span class="string">"university"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"北京大学"</span>&gt;</span>北京大学<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"清华大学"</span>&gt;</span>清华大学<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"西安交通大学"</span>&gt;</span>西安交通大学<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>您的大学是：&#123;&#123;university&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="actionscript">        message: <span class="string">"hello"</span>,</span></span><br><span class="line"><span class="actionscript">        gender: <span class="string">'男'</span>,</span></span><br><span class="line"><span class="actionscript">        isLicense: <span class="literal">false</span>,</span></span><br><span class="line">        books: [],</span><br><span class="line"><span class="actionscript">        university: <span class="string">'北京大学'</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3、v-model的修饰符</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- lazy修饰符，当敲回车和失去焦点时才会改变 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"message"</span> <span class="attr">v-model.lazy</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- number修饰符，修改值默认是string类型，加了number后会变为number类型 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"score"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">id</span>=<span class="string">"score"</span> <span class="attr">v-model.number.lazy</span>=<span class="string">"score"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;score&#125;&#125;--&#123;&#123;typeof score&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- trim去除两端空格 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"name"</span> <span class="attr">v-model.trim.lazy</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="actionscript">        message: <span class="string">"hello"</span>,</span></span><br><span class="line">        score: 0,</span><br><span class="line"><span class="actionscript">        name: <span class="string">""</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
        <category>Vuejs</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue笔记--循环遍历</title>
    <url>/vue-cycle/</url>
    <content><![CDATA[<h1 id="六、Vue循环遍历"><a href="#六、Vue循环遍历" class="headerlink" title="六、Vue循环遍历"></a>六、Vue循环遍历</h1><h2 id="1、遍历数组"><a href="#1、遍历数组" class="headerlink" title="1、遍历数组"></a>1、遍历数组</h2><a id="more"></a>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"game in games"</span>&gt;</span>&#123;&#123;game&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 获取下标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(game, index) in games"</span>&gt;</span>&#123;&#123;index&#125;&#125;-&#123;&#123;game&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="actionscript">        message: <span class="string">"hello"</span>,</span></span><br><span class="line"><span class="actionscript">        games: [<span class="string">'Mincraft'</span>, <span class="string">'Warcraft III'</span>, <span class="string">'Ori'</span>]</span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2、遍历对象"><a href="#2、遍历对象" class="headerlink" title="2、遍历对象"></a>2、遍历对象</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果只获取一个值，获取的是value --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"value in game"</span>&gt;</span>&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 获取value和key --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(value, key) in game"</span>&gt;</span>&#123;&#123;key&#125;&#125;-&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 获取value、key和index --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(value, key, index) in game"</span>&gt;</span>&#123;&#123;index&#125;&#125;-&#123;&#123;key&#125;&#125;-&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="actionscript">        message: <span class="string">"hello"</span>,</span></span><br><span class="line">        game: &#123;</span><br><span class="line">          id: 1,</span><br><span class="line"><span class="actionscript">          name: <span class="string">'Ori'</span>,</span></span><br><span class="line">          price: 68</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3、绑定与不绑定key的区别"><a href="#3、绑定与不绑定key的区别" class="headerlink" title="3、绑定与不绑定key的区别"></a>3、绑定与不绑定key的区别</h2><p>使用v-for的时候尽量绑定key例如:key=”item”,这样例如在列表中间插入数据，会加快效率</p>
<h2 id="4、数组的响应式方法和非响应式方法"><a href="#4、数组的响应式方法和非响应式方法" class="headerlink" title="4、数组的响应式方法和非响应式方法"></a>4、数组的响应式方法和非响应式方法</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"game in games"</span> <span class="attr">:key</span>=<span class="string">"game"</span>&gt;</span>&#123;&#123;game&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"btnClick"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="actionscript">        message: <span class="string">"hello"</span>,</span></span><br><span class="line"><span class="actionscript">        games: [<span class="string">"WarCraft III"</span>, <span class="string">"StarCraft II"</span>, <span class="string">"Ori II"</span>]</span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        btnClick() &#123;</span><br><span class="line"><span class="actionscript">          <span class="comment">// 响应式</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 1、在队尾插入元素</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// this.games.push("ARK", "TouHou Project");</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 2、在队尾删除元素</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// this.games.pop();</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 3、删除数组的第一个元素</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// this.games.shift()</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 4、在数组最前面插入元素</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// this.games.unshift("ARK", "TouHou Project");</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 5、splice函数</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 删除元素 this.games.splice(2)默认删除第三个(包括第三个)之后的所有元素 this.games.splice(1,1)删除第二个本身</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 替换元素 this.games.splice(2, 1, "ARK", "TouHou Project")替换第二个后的元素(可理解为先删除第二个后的一个元素再插入)</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 插入元素 this.games.splice(2, 0, "ARK")插入在第二个元素之后</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 6、排序</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// this.games.sort();</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 7、数组反转</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// this.games.reverse();</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="comment">// 非响应式</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 通过索引修改数组的数据是非响应式的</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// this.games[0] = "WarCraft III Remake";</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 如果想修改值，可以使用splice，也可以使用Vue.set(要修改的对象, 索引值, 修改的值)</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// Vue.set(this.games, 0, "WarCraft III Remake");</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5、补充一些js高阶函数的使用"><a href="#5、补充一些js高阶函数的使用" class="headerlink" title="5、补充一些js高阶函数的使用"></a>5、补充一些js高阶函数的使用</h2><p>首先是Vue的filters</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">使用方式</span><br><span class="line">&#123;&#123;price | showPrice&#125;&#125;</span><br><span class="line"></span><br><span class="line">filters: &#123;</span><br><span class="line">  showPrice(price) &#123;</span><br><span class="line">    return "¥" + price.toFixed(2);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还有关于循环遍历的使用方式以及filter、map、reduce函数的使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">        <span class="comment">// 默认是由get，set方法的fullname () &#123;&#125;就相当于调用了get方法，set方法一般不用</span></span><br><span class="line">        fullname () &#123;</span><br><span class="line">          <span class="comment">// 关于let和const在for中的应用可以看  https://www.cnblogs.com/SamWeb/p/10659352.html</span></span><br><span class="line">          <span class="comment">// 1、普通的for循环</span></span><br><span class="line">          <span class="comment">// let num = 0;</span></span><br><span class="line">          <span class="comment">// for(let i=0; i&lt;this.games.length; i++)&#123;</span></span><br><span class="line">          <span class="comment">//   num += this.games[i].price;</span></span><br><span class="line">          <span class="comment">// &#125;</span></span><br><span class="line">          <span class="comment">// 2、forin循环</span></span><br><span class="line">          <span class="comment">// for (const i in this.games) &#123;</span></span><br><span class="line">          <span class="comment">//   console.log(i+ "---" + this.games[i]);</span></span><br><span class="line">          <span class="comment">// &#125;</span></span><br><span class="line">          <span class="comment">// 3、forof循环</span></span><br><span class="line">          <span class="comment">// for (const game of this.games) &#123;</span></span><br><span class="line">          <span class="comment">//   console.log(game);</span></span><br><span class="line">          <span class="comment">// &#125;</span></span><br><span class="line">          <span class="comment">// 4、filter函数的使用</span></span><br><span class="line">          <span class="comment">// nums = [11,23,4,6,78,100]</span></span><br><span class="line">          <span class="comment">// let filter =nums.filter(function (n) &#123;</span></span><br><span class="line">          <span class="comment">//   return n&lt;100;  返回一个true或false，true则放进一个数组里</span></span><br><span class="line">          <span class="comment">// &#125;);</span></span><br><span class="line">          <span class="comment">// console.log(filter);</span></span><br><span class="line">          <span class="comment">// 5、map函数的使用</span></span><br><span class="line">          <span class="comment">// nums = [11,23,4,6,78,100]</span></span><br><span class="line">          <span class="comment">// let map = nums.map(function (n) &#123;</span></span><br><span class="line">          <span class="comment">//   return n*2;  返回一个处理过的数组</span></span><br><span class="line">          <span class="comment">// &#125;)</span></span><br><span class="line">          <span class="comment">// console.log(map)</span></span><br><span class="line">          <span class="comment">// 6、reduce函数的使用</span></span><br><span class="line">          <span class="comment">// nums = [11,23,4,6,78,100]</span></span><br><span class="line">          <span class="comment">// let reduce = nums.reduce(function (preValue, n) &#123;</span></span><br><span class="line">          <span class="comment">//   return preValue+n;  preValue是上一次return的值</span></span><br><span class="line">          <span class="comment">// &#125;, 0);</span></span><br><span class="line">          <span class="comment">// 第一次运行 0,11</span></span><br><span class="line">          <span class="comment">// 第二次运行 11,23</span></span><br><span class="line">          <span class="comment">// 第三次运行 34,4</span></span><br><span class="line">          <span class="comment">// 还可以写链式函数</span></span><br><span class="line">          <span class="comment">// nums = [11,23,4,6,78,100]</span></span><br><span class="line">          <span class="comment">// let mapReduce = nums.filter(function (n) &#123;</span></span><br><span class="line">          <span class="comment">//   return n &lt;78;</span></span><br><span class="line">          <span class="comment">// &#125;).map(function (n)&#123;</span></span><br><span class="line">          <span class="comment">//   return n*2;</span></span><br><span class="line">          <span class="comment">// &#125;).reduce(function (preValue,n)&#123;</span></span><br><span class="line">          <span class="comment">//   return preValue+n;</span></span><br><span class="line">          <span class="comment">// &#125;, 0);</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">// 此外，还有一个箭头函数的写法，另外关于this的指向问题，请参考https://blog.csdn.net/weixin_39936058/article/details/87971593</span></span><br><span class="line">          <span class="comment">// 正常函数写法</span></span><br><span class="line">          <span class="comment">// [1,2,3].map(function (x) &#123;</span></span><br><span class="line">          <span class="comment">//   return x + x;</span></span><br><span class="line">          <span class="comment">// &#125;);</span></span><br><span class="line">          </span><br><span class="line">          <span class="comment">// 箭头函数写法</span></span><br><span class="line">          <span class="comment">// [1,2,3].map(x =&gt; x + x);</span></span><br><span class="line">          <span class="comment">// let mapReduce = nums.filter(n =&gt; n&gt;78).map(n =&gt; n*2).reduce((preValue,n) =&gt; preValue+n, 0)</span></span><br><span class="line">          </span><br><span class="line">        &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
        <category>Vuejs</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue笔记--事件监听和条件判断</title>
    <url>/vue-listenerandif/</url>
    <content><![CDATA[<h1 id="五、Vue事件监听和条件判断"><a href="#五、Vue事件监听和条件判断" class="headerlink" title="五、Vue事件监听和条件判断"></a>五、Vue事件监听和条件判断</h1><h2 id="1、v-on的基本使用"><a href="#1、v-on的基本使用" class="headerlink" title="1、v-on的基本使用"></a>1、v-on的基本使用</h2><p>可以查看之前的计数器案例</p>
<a id="more"></a>

<h2 id="2、v-on参数"><a href="#2、v-on参数" class="headerlink" title="2、v-on参数"></a>2、v-on参数</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"btu1"</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"btu2"</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"btu2(123, $event)"</span>&gt;</span>按钮3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="actionscript">        message: <span class="string">"hello"</span></span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="actionscript">      <span class="comment">// event是浏览器产生的对象，会自动传入</span></span></span><br><span class="line">      methods: &#123;</span><br><span class="line">        btu1(event) &#123;</span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(event);</span></span><br><span class="line">        &#125;,</span><br><span class="line">        btu2(abc, event) &#123;</span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(abc);</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(event);</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3、v-on修饰符"><a href="#3、v-on修饰符" class="headerlink" title="3、v-on修饰符"></a>3、v-on修饰符</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">"divClick"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- stop修饰符阻止冒泡，只打印btn --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">"btnClick"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- prevent修饰符阻止默认行为，例如form提交不让浏览器自动提交，而是我们自己写函数 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 点击enter松开会触发事件，@keyup=""监听任何按键 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> @<span class="attr">keyup.enter</span>=<span class="string">"keyClick"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 只触发一次 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">"btnClick"</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="actionscript">        message: <span class="string">"hello"</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        divClick() &#123;</span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">"div"</span>);</span></span><br><span class="line">        &#125;,</span><br><span class="line">        btnClick() &#123;</span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">"btn"</span>);</span></span><br><span class="line">        &#125;,</span><br><span class="line">        keyClick() &#123;</span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">"enter"</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4、Vue条件判断"><a href="#4、Vue条件判断" class="headerlink" title="4、Vue条件判断"></a>4、Vue条件判断</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">"flag"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- v-else 元素必须紧跟在带 v-if 或者 v-else-if 的元素的后面，否则它将不会被识别。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">"flag"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-else</span>&gt;</span>else测试<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">"score&gt;=90"</span>&gt;</span>优秀<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-else-if</span>=<span class="string">"score&gt;=80"</span>&gt;</span>良好<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-else-if</span>=<span class="string">"score&gt;=60"</span>&gt;</span>及格<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-else</span>&gt;</span>不及格<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="actionscript">        message: <span class="string">"hello"</span>,</span></span><br><span class="line"><span class="actionscript">        flag: <span class="literal">true</span>,</span></span><br><span class="line">        score: 86</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5、登录类型切换案例"><a href="#5、登录类型切换案例" class="headerlink" title="5、登录类型切换案例"></a>5、登录类型切换案例</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">"isUser"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"username"</span>&gt;</span>用户账户<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"用户名"</span> <span class="attr">key</span>=<span class="string">"abc"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"email"</span>&gt;</span>用户邮箱<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"email"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"邮箱名"</span> <span class="attr">key</span>=<span class="string">"def"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"isUser = !isUser"</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="actionscript">        message: <span class="string">"hello"</span>,</span></span><br><span class="line"><span class="actionscript">        isUser: <span class="literal">true</span>,</span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Vue为了性能考虑会复用一些dom，例如在input输入数据后点击切换，会发现input里的东西还在，这就是因为vue复用了一些dom，加一个key=””就可以解决问题</p>
<h2 id="6、v-show的使用"><a href="#6、v-show的使用" class="headerlink" title="6、v-show的使用"></a>6、v-show的使用</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 区别当isShow为false时，v-if的元素不会存在于dom中，v-show只是增加了一个行内样式进行隐藏 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">"isShow"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-show</span>=<span class="string">"isShow"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="actionscript">        message: <span class="string">"hello"</span>,</span></span><br><span class="line"><span class="actionscript">        isShow: <span class="literal">true</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
        <category>Vuejs</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue笔记--计算属性</title>
    <url>/vue-calculate/</url>
    <content><![CDATA[<h1 id="四、Vue计算属性"><a href="#四、Vue计算属性" class="headerlink" title="四、Vue计算属性"></a>四、Vue计算属性</h1><h2 id="1、计算属性的使用"><a href="#1、计算属性的使用" class="headerlink" title="1、计算属性的使用"></a>1、计算属性的使用</h2><p>Vue计算属性的使用</p>
<a id="more"></a>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>总价格：&#123;&#123;fullname&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="actionscript">        message: <span class="string">"hello"</span>,</span></span><br><span class="line">        games: [</span><br><span class="line"><span class="actionscript">          &#123;id: <span class="number">1</span>, name: <span class="string">'Ori'</span>, price: <span class="number">68</span>&#125;,</span></span><br><span class="line"><span class="actionscript">          &#123;id: <span class="number">2</span>, name: <span class="string">'Warcraft III'</span>, price: <span class="number">256</span>&#125;,</span></span><br><span class="line"><span class="actionscript">          &#123;id: <span class="number">3</span>, name: <span class="string">'Starcraft II'</span>, price: <span class="number">168</span>&#125;,</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        </span><br><span class="line">      &#125;,</span><br><span class="line">      computed: &#123;</span><br><span class="line">        fullname () &#123;</span><br><span class="line"><span class="actionscript">          <span class="comment">// 关于let和const在for中的应用可以看  https://www.cnblogs.com/SamWeb/p/10659352.html</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> num = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;<span class="keyword">this</span>.games.length; i++)&#123;</span></span><br><span class="line"><span class="actionscript">            num += <span class="keyword">this</span>.games[i].price;</span></span><br><span class="line">          &#125;</span><br><span class="line"><span class="actionscript">          <span class="keyword">for</span> (<span class="keyword">const</span> i <span class="keyword">in</span> <span class="keyword">this</span>.games) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(i);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.games[i]);</span></span><br><span class="line">          &#125;</span><br><span class="line"><span class="actionscript">          <span class="keyword">for</span> (<span class="keyword">const</span> game of <span class="keyword">this</span>.games) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(game);</span></span><br><span class="line">          &#125;</span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> num;</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>计算属性的fullname () {}其实是默认调用了get方法，也有set方法但是一般不用</p>
<h2 id="2、computed和methods的对比"><a href="#2、computed和methods的对比" class="headerlink" title="2、computed和methods的对比"></a>2、computed和methods的对比</h2><p>计算属性是有缓存的，只会执行一次，之后会从缓存里取，改变属性会再执行一次</p>
<h2 id="3、ES6的增强写法"><a href="#3、ES6的增强写法" class="headerlink" title="3、ES6的增强写法"></a>3、ES6的增强写法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> age = <span class="string">"13"</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">"qwe"</span></span><br><span class="line"><span class="keyword">const</span> gender = <span class="string">"男"</span></span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  age: age,</span><br><span class="line">  name: name,</span><br><span class="line">  gender: gender</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  age,</span><br><span class="line">  name,</span><br><span class="line">  gender</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">  getClass: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> &#123;<span class="attr">active</span>: <span class="keyword">this</span>.isActive, <span class="attr">title</span>: <span class="keyword">this</span>.isTitle&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  getClass () &#123;</span><br><span class="line">	<span class="keyword">return</span> &#123;<span class="attr">active</span>: <span class="keyword">this</span>.isActive, <span class="attr">title</span>: <span class="keyword">this</span>.isTitle&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
        <category>Vuejs</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue笔记--动态绑定</title>
    <url>/vue-binding/</url>
    <content><![CDATA[<h1 id="三、Vue动态绑定"><a href="#三、Vue动态绑定" class="headerlink" title="三、Vue动态绑定"></a>三、Vue动态绑定</h1><h2 id="1、动态绑定class"><a href="#1、动态绑定class" class="headerlink" title="1、动态绑定class"></a>1、动态绑定class</h2><p>动态绑定class</p>
<a id="more"></a>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 绑定属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-bind:class</span>=<span class="string">"bind"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 语法糖的写法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">"bind"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 动态绑定对象 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 对象就是&#123;key: value, key: value&#125; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"object"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 对象语法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"ceshi"</span> <span class="attr">:class</span>=<span class="string">"getClass()"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数组语法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"ceshi"</span> <span class="attr">:class</span>=<span class="string">"['active', 'title']"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="actionscript">        message: <span class="string">"hello"</span>,</span></span><br><span class="line"><span class="actionscript">        bind: <span class="string">"binding"</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> object = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">"#object"</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="actionscript">        message: <span class="string">"object binding"</span>,</span></span><br><span class="line"><span class="actionscript">        isActive: <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">        isTitle: <span class="literal">true</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line"><span class="actionscript">        getClass: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> &#123;active: <span class="keyword">this</span>.isActive, title: <span class="keyword">this</span>.isTitle&#125;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// return &#123;'active': this.isActive, 'title': this.isTitle&#125;  加不加引号都可以</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2、响应式文字点击高亮写法"><a href="#2、响应式文字点击高亮写法" class="headerlink" title="2、响应式文字点击高亮写法"></a>2、响应式文字点击高亮写法</h2><p>要注意是响应式的，数据改变，HTML也随之改变，如果将:class=””里写为一个函数return的值，每次改变findex的数据，该函数也会重新运行</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(game, index) in games"</span> <span class="attr">class</span>=<span class="string">"game"</span> <span class="attr">:class</span>=<span class="string">"&#123;active: index == findex&#125;"</span> @<span class="attr">click</span>=<span class="string">"isClick(index)"</span>&gt;</span>&#123;&#123;game&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="actionscript">        message: <span class="string">"hello"</span>,</span></span><br><span class="line"><span class="actionscript">        games: [<span class="string">'Mincraft'</span>, <span class="string">'Warcraft III'</span>, <span class="string">'Ori'</span>],</span></span><br><span class="line">        findex: 0</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line"><span class="actionscript">        isClick: <span class="function"><span class="keyword">function</span> <span class="params">(index)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.findex = index;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3、动态绑定style"><a href="#3、动态绑定style" class="headerlink" title="3、动态绑定style"></a>3、动态绑定style</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 动态绑定style --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 对象就是&#123;key(css属性): value, key: value&#125; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 属性可以使用驼峰命名法，如果不用驼峰命名则属性需要加上单引号 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 错误写法 &#123;font-style: '50px'&#125; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:style</span>=<span class="string">"&#123;fontSize: '50px'&#125;"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:style</span>=<span class="string">"[myStyle, myStyle2]"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="actionscript">        message: <span class="string">"hello"</span>,</span></span><br><span class="line"><span class="actionscript">        myStyle: &#123;fontSize: <span class="string">'50px'</span>&#125;,</span></span><br><span class="line"><span class="actionscript">        myStyle2: &#123;color: <span class="string">'red'</span>&#125;,</span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        </span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
        <category>Vuejs</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue笔记--插值操作</title>
    <url>/vue-interpolation/</url>
    <content><![CDATA[<h1 id="二、Vue插值操作"><a href="#二、Vue插值操作" class="headerlink" title="二、Vue插值操作"></a>二、Vue插值操作</h1><h2 id="1、Mustache语法"><a href="#1、Mustache语法" class="headerlink" title="1、Mustache语法"></a>1、Mustache语法</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message + ' '+ messageTwo&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125; &#123;&#123;messageTwo&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;counter * 2&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="2、v-xxx指令的使用"><a href="#2、v-xxx指令的使用" class="headerlink" title="2、v-xxx指令的使用"></a>2、v-xxx指令的使用</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-attr">[v-cloak]</span> &#123;</span></span><br><span class="line">    display: none;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用v-text代替&#123;&#123;message&#125;&#125; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-text</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 只渲染一次，接下来改变值，v-once使被标记的标签内容不再改变 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-once</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 原封不动的显示&#123;&#123;message&#125;&#125;s --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-pre</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;url&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 渲染HTML标签 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-html</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 加上v-cloak进行判断，在vue解析前，有v-cloak，解析后就没有了v-cloak，所以我们可以判断有v-cloak的为未解析完的进行隐藏 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"cloak"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-cloak</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="actionscript">        message: <span class="string">"hello"</span>,</span></span><br><span class="line"><span class="handlebars"><span class="xml">        url: '<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.baidu.com"</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span>'</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">const</span> cloak = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">"#cloak"</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">          message: <span class="string">"cloak的测试"</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;, 2000)</span><br><span class="line"><span class="actionscript">    <span class="comment">// 暂停2秒</span></span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
        <category>Vuejs</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-boot笔记--消息</title>
    <url>/spring-boot-rabbitmq/</url>
    <content><![CDATA[<h1 id="七、Spring-Boot与消息"><a href="#七、Spring-Boot与消息" class="headerlink" title="七、Spring Boot与消息"></a>七、Spring Boot与消息</h1><h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h2><ol>
<li><p>大多数应用中、可通过消息服务中间件来提升系统异步通信、扩展解耦能力</p>
</li>
<li><p>消息服务中两个重要概念：<strong>消息代理</strong>、<strong>目的地</strong></p>
<p>当消息发送者发送消息后，将由消息代理接管，消息代理保证消息传递到指定目的地</p>
<a id="more"></a>
</li>
<li><p>消息队列主要有两种形式的目的地</p>
<ul>
<li>队列（queue）：点对点消息通信</li>
<li>主题（topic）：发布（publish）/订阅（subscribe）消息通信</li>
</ul>
</li>
<li><p>点对点式：</p>
<ul>
<li>消息发送者发送消息，消息代理将其放入一个队列中，消息接收者从队列中获取信息内容，信息读取后被移出队列</li>
<li>消息只有唯一一个发送者和接受者，但并不是说只能有一个接收者</li>
</ul>
</li>
<li><p>发布订阅式：</p>
<ul>
<li>发送者（发布者）发送消息到主题，多个接收者（订阅者）监听（订阅）这个主题，那么就会在消息到达时同时收到消息</li>
</ul>
</li>
<li><p>JMS（Java Message Service）JAVA消息服务</p>
<ul>
<li>基于JVM消息代理的规范。ActiveMQ、HornetMQ是JMS实现</li>
</ul>
</li>
<li><p>AMQP（Advanced Message Queuing Protocol）</p>
<ul>
<li>高级消息队列协议，也是一个消息代理的规范，兼容JMS</li>
<li>RabbitMQ是AMQP的实现</li>
</ul>
</li>
<li><p>Spring支持</p>
<ul>
<li>spring-jms提供了对JMS的支持</li>
<li>spring-rabbit提供了对AMQP的支持</li>
<li>需要ConnectionFactory的实现来连接消息代理</li>
<li>提供了JMSTemplate、RabbitTemplate来发送消息</li>
<li>@JMSListener（JMS）、@RabbitListener（AMQP）注解在方法上监听消息代理发布的消息</li>
<li>@EnableJms、@EnableRabbit开启支持</li>
</ul>
</li>
<li><p>Spring Boot自动配置</p>
<ul>
<li>JMSAutoConfiguration</li>
<li>RabbitAutoConfiguration</li>
</ul>
</li>
</ol>
<p>JMS和AMQP的对比</p>
<table>
<thead>
<tr>
<th></th>
<th>JMS</th>
<th>AMQP</th>
</tr>
</thead>
<tbody><tr>
<td>定义</td>
<td>Java api</td>
<td>网络线级协议</td>
</tr>
<tr>
<td>跨语言</td>
<td>否</td>
<td>是</td>
</tr>
<tr>
<td>跨平台</td>
<td>否</td>
<td>是</td>
</tr>
<tr>
<td>Model</td>
<td>提供两种消息模型：Peer-2-Peer、Pub/Sub</td>
<td>提供了五种消息模型：direct exchange、fanout exchange、topic exchange、headers exchange、system exchange。本质来讲、后四种和JMS的pub/sub模型没有太大差别，仅是在路由机制上做了更详细的划分</td>
</tr>
<tr>
<td>支持消息类型</td>
<td>多种消息类型：TextMessage、MapMessage、BytesMessage、StreamMessage、ObjectMessage、Message（只有消息头和属性）</td>
<td>bytes[]，当实际使用时，有更复杂的消息，可以将消息序列化后发送</td>
</tr>
<tr>
<td>综合评价</td>
<td>JMS定义了JAVA API层面的标准，在Java体系中，多个client均可以通过JMS进行交互，不需要应用修改代码，但是对跨平台的支持较差</td>
<td>AMQP定义了wire-level层的协议标准天然具有跨平台、跨语言特性</td>
</tr>
</tbody></table>
<h2 id="2、运行RabbitMQ"><a href="#2、运行RabbitMQ" class="headerlink" title="2、运行RabbitMQ"></a>2、运行RabbitMQ</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 5672:5672 -p 15672:15672 --name myrabbit rabbitmq</span><br></pre></td></tr></table></figure>

<h2 id="3、Spring-Boot的RabbitMQ操作"><a href="#3、Spring-Boot的RabbitMQ操作" class="headerlink" title="3、Spring Boot的RabbitMQ操作"></a>3、Spring Boot的RabbitMQ操作</h2><p><strong>RabbitMQ的自动配置</strong></p>
<p>自动配置类<strong>RabbitAutoConfiguration.class</strong></p>
<ul>
<li>自动配置了连接工厂  CachingConnectionFactory.class</li>
<li>配置属性  RabbitProperties.class</li>
<li>RabbitTemplate.class 给RabbitMQ发送和接收消息</li>
<li>AmqpAdmin.class RabbitMQ的启动管理组件，创建删除Queue、Exchange和Binding</li>
<li>@EnableRabbit + @RabbitListener监听消息队列</li>
</ul>
<p>据RabbitProperties，我们可以设置配置属性</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.rabbitmq.host</span>=<span class="string">192.168.1.18</span></span><br><span class="line"><span class="comment">#spring.rabbitmq.username=guest</span></span><br><span class="line"><span class="comment">#spring.rabbitmq.password=guest</span></span><br><span class="line"><span class="comment">##spring.rabbitmq.virtual-host= 默认访问'/'</span></span><br></pre></td></tr></table></figure>

<p>接下来我们就可以发送消息进行测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 单播（点对点）</span></span><br><span class="line">    <span class="comment">// message可以自己构造，搜索Message类，定义消息体内容和消息头</span></span><br><span class="line">    <span class="comment">// rabbitTemplate.send(exchange, routeKey, message);</span></span><br><span class="line">    <span class="comment">// 常用的发送，传入一个object可以自己序列化发送给MQ</span></span><br><span class="line">    <span class="comment">// rabbitTemplate.convertAndSend(exchange, routeKey, object);</span></span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"msg"</span>, <span class="string">"测试消息"</span>);</span><br><span class="line">    map.put(<span class="string">"list"</span>, Arrays.asList(<span class="string">"list消息"</span>, <span class="number">123</span>, <span class="keyword">true</span>));</span><br><span class="line">    <span class="comment">//对象被默认序列化以后发送出去</span></span><br><span class="line">    <span class="comment">// RabbitTemplate里的属性使用的是SimpleMessageConverter</span></span><br><span class="line">    <span class="comment">// private MessageConverter messageConverter = new SimpleMessageConverter();</span></span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">"ms.direct"</span>, <span class="string">"news"</span>, map);</span><br><span class="line">    <span class="comment">//如何将数据变为json发送</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">receive</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//接收后消息队列为空</span></span><br><span class="line">    Object receive = rabbitTemplate.receiveAndConvert(<span class="string">"ms.news"</span>);</span><br><span class="line">    System.out.println(receive.getClass());</span><br><span class="line">    System.out.println(receive);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>rabbitTemplate设置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置会自动生效，因为在RabbitAutoConfiguration类里有一行代码</span></span><br><span class="line"><span class="comment">// messageConverter.ifUnique(template::setMessageConverter);</span></span><br><span class="line"><span class="comment">// 其中ifUnique会将我们自己设置的配置进来</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MessageConverter <span class="title">messageConverter</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Jackson2JsonMessageConverter();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4、监听消息队列"><a href="#4、监听消息队列" class="headerlink" title="4、监听消息队列"></a>4、监听消息队列</h2><p><strong>@EnableRabbit</strong> + <strong>@RabbitListener</strong>监听消息队列</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener</span>(queues = <span class="string">"ms.news"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getShare</span><span class="params">(Share share)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"收到消息"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RabbitListener</span>(queues = <span class="string">"ms.news"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getHeader</span><span class="params">(Message message)</span></span>&#123;</span><br><span class="line">    System.out.println(message.getBody());</span><br><span class="line">    System.out.println(message.getMessageProperties());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//开启基于注解的RabbitMQ</span></span><br><span class="line"><span class="meta">@EnableRabbit</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootAmqpApplication</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<h2 id="5、创建Exchange、Queue和Binding"><a href="#5、创建Exchange、Queue和Binding" class="headerlink" title="5、创建Exchange、Queue和Binding"></a>5、创建Exchange、Queue和Binding</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createExchange</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 创建Exchange和Queue</span></span><br><span class="line">    <span class="comment">// amqpAdmin.declareExchange(new DirectExchange("amqpadmin.exchange"));</span></span><br><span class="line">    <span class="comment">// amqpAdmin.declareQueue(new Queue("amqpadmin.queue", true));</span></span><br><span class="line">    <span class="comment">// 创建绑定规则</span></span><br><span class="line">    <span class="comment">// amqpAdmin.declareBinding(new Binding("amqpadmin.queue", Binding.DestinationType.QUEUE, "amqpadmin.exchange", "amqpadmin", null));</span></span><br><span class="line">    <span class="comment">// System.out.println("创建完成");</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Spring Boot</category>
        <category>RabbitMQ</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>RabbitMQ</tag>
        <tag>消息</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-boot笔记--缓存</title>
    <url>/spring-Boot-cache/</url>
    <content><![CDATA[<h1 id="六、Spring-Boot与缓存"><a href="#六、Spring-Boot与缓存" class="headerlink" title="六、Spring Boot与缓存"></a>六、Spring Boot与缓存</h1><h2 id="1、Spring缓存抽象"><a href="#1、Spring缓存抽象" class="headerlink" title="1、Spring缓存抽象"></a>1、Spring缓存抽象</h2><p>Spring定义了org.springframework.cache.Cache和org.springframework.cache.CacheManager接口来统一不同的缓存技术，并支持使用JCache（JSR-107）注解简化我们的开发</p>
<a id="more"></a>

<h2 id="2、几个重要概念和缓存注解"><a href="#2、几个重要概念和缓存注解" class="headerlink" title="2、几个重要概念和缓存注解"></a>2、几个重要概念和缓存注解</h2><table>
<thead>
<tr>
<th>组件和注解</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>Cache</td>
<td>缓存接口，定义缓存操作，实现有: RedisCache、EhCacheCache、ConcurrentMapCache 等</td>
</tr>
<tr>
<td>CacheManager</td>
<td>缓存管理器，管理各种缓存（Cache）组件</td>
</tr>
<tr>
<td>@Cacheable</td>
<td>主要对方法进行配置，能够根据方法的请求参数对其结果继续缓存</td>
</tr>
<tr>
<td>@CacheEvict</td>
<td>清空缓存</td>
</tr>
<tr>
<td>@CachePut</td>
<td>保证方法被调用、又希望结果被缓存</td>
</tr>
<tr>
<td>@EnableCaching</td>
<td>开启基于注解的缓存</td>
</tr>
<tr>
<td>keyGenerator</td>
<td>缓存数据时key生成策略</td>
</tr>
<tr>
<td>serialize</td>
<td>缓存数据时value序列化策略</td>
</tr>
</tbody></table>
<h2 id="3、Spring-Boot缓存的使用"><a href="#3、Spring-Boot缓存的使用" class="headerlink" title="3、Spring Boot缓存的使用"></a>3、Spring Boot缓存的使用</h2><ol>
<li><p>搭建基本环境、数据库表、javabean封装数据</p>
</li>
<li><p>整合mybatis操作数据库，关于整合mybatis可以看之前的是<a href="http://www.codestn.com/spring-boot-data/#more">Spring Boot与数据访问</a></p>
</li>
<li><p>开启基于注解的缓存</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="comment">//开启缓存</span></span><br><span class="line"><span class="meta">@MapperScan</span>(value = <span class="string">"com.cache.springboot.mapper"</span>)</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringbootApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将方法的结果进行缓存，以后再要相同的数据，直接从缓存中获取，不会调用方法</span></span><br><span class="line"><span class="meta">@Cacheable</span>(cacheNames = <span class="string">"share"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Share <span class="title">getShareById</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">    Share shareById = shareMapper.getShareById(id);</span><br><span class="line">    <span class="keyword">return</span> shareById;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以查看@Cacheable里的属性</p>
<ul>
<li><p>cacheNames/value：指定缓存组件的名字</p>
<p>关于缓存组件的名字：CacheManager管理多个Cache组件，对缓存真正的CRUD操作在Cache组件中，每一个缓存组件有自己唯一一个名字</p>
<p>我们可以传入数组，将数据放入多个缓存里边</p>
</li>
<li><p>key：缓存数据使用的key，可以用它来指定，默认是使用方法参数的值，我们可以编写SpELl指定</p>
<p>举例：指定key为getShare[1]、getShare[2]……</p>
<p>表达式写为key=”#root.methodName+’[‘+#id+’]’”</p>
<table>
<thead>
<tr>
<th>名字</th>
<th>位置</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>methodName</td>
<td>root object</td>
<td>当前被调用的方法名</td>
<td>#root.methodName</td>
</tr>
<tr>
<td>method</td>
<td>root object</td>
<td>当前被调用的方法</td>
<td>#root.method.name</td>
</tr>
<tr>
<td>target</td>
<td>root object</td>
<td>当前被调用的目标对象</td>
<td>#root.target</td>
</tr>
<tr>
<td>targetClass</td>
<td>root object</td>
<td>当前被调用的目标对象类</td>
<td>#root.targetClass</td>
</tr>
<tr>
<td>args</td>
<td>root object</td>
<td>当前被调用方法的参数列表</td>
<td>#root.args[0]</td>
</tr>
<tr>
<td>caches</td>
<td>root object</td>
<td>当前方法调用使用的缓存列表（如@Cacheable(value{“cache1”, “cache2”})），则有两个cache</td>
<td>#root.caches[0].name</td>
</tr>
<tr>
<td>argument name</td>
<td>evaluation context</td>
<td>方法参数的名字，可以直接#参数名，也可以使用#p0或#a0的形式，0代表参数的索引</td>
<td>#ban、#a[0]、#p0如果是类可以#Share.id</td>
</tr>
<tr>
<td>result</td>
<td>evaluation context</td>
<td>方法执行后的返回值（仅当方法执行后的判断有效，如”unless”，”cache put”的表达式，”cache evict”的表达式,beforeInvocation=false），注意@Cacheable注解的方法key不能使用#result得到返回值，因为方法需要在运行前就生成一个key</td>
<td>#result</td>
</tr>
</tbody></table>
</li>
<li><p>keyGenerator：key的生成器，可以自己指定key的生成器的组件id，默认的key就是用一个keyGenerator生成的，key和keyGenerator二选一使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCacheConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"myKeyGenerator"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> KeyGenerator <span class="title">keyGenerator</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> KeyGenerator()&#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">generate</span><span class="params">(Object o, Method method, Object... objects)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> method.getName()+<span class="string">"["</span>+ Arrays.asList(objects).toString()+<span class="string">"]"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ol>
<ul>
<li><p>cacheManager：指定缓存管理器，如redis，或者cacheResolver指定缓存解析器，二选一</p>
</li>
<li><p>condition：指定符合条件的情况下才缓存</p>
<p>举例：condition=”#a0&gt;1 and ……” 第一个参数的值大于一才缓存</p>
</li>
<li><p>unless：否定缓存，当unless指定的条件为true，方法的返回值就不会被缓存，可以获取到结果进行判断</p>
</li>
<li><p>sync：是否使用异步模式</p>
</li>
</ul>
<ol start="4">
<li><p>缓存的原理</p>
<p>自动配置类：CacheAutoConfiguration</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在CacheAutoConfiguration里有这个类的selectImports方法可以得到所有的配置类，Spring Boot自动配置缓存的时候引入了很多的配置类</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheConfigurationImportSelector</span> <span class="keyword">implements</span> <span class="title">ImportSelector</span> </span>&#123;</span><br><span class="line">    CacheConfigurationImportSelector() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">        CacheType[] types = CacheType.values();</span><br><span class="line">        String[] imports = <span class="keyword">new</span> String[types.length];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; types.length; ++i) &#123;</span><br><span class="line">            imports[i] = CacheConfigurations.getConfigurationClass(types[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> imports;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>默认生效的配置有SimpleCacheConfiguration</p>
<p>SimpleCacheConfiguration给缓存注册了一个cacheManager</p>
<p>ConcurrentMapCacheManager的作用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="comment">//SimpleCacheConfiguration给缓存注册了一个cacheManager：ConcurrentMapCacheManager，可以获取和创建ConcurrentMapCacheManager类型的缓存组件，将数据存取在ConcurrentMap中</span></span><br><span class="line"><span class="function">ConcurrentMapCacheManager <span class="title">cacheManager</span><span class="params">(CacheProperties cacheProperties, CacheManagerCustomizers cacheManagerCustomizers)</span> </span>&#123;</span><br><span class="line">    ConcurrentMapCacheManager cacheManager = <span class="keyword">new</span> ConcurrentMapCacheManager();</span><br><span class="line">    List&lt;String&gt; cacheNames = cacheProperties.getCacheNames();</span><br><span class="line">    <span class="keyword">if</span> (!cacheNames.isEmpty()) &#123;</span><br><span class="line">        cacheManager.setCacheNames(cacheNames);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (ConcurrentMapCacheManager)cacheManagerCustomizers.customize(cacheManager);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行的流程@Cacheable</p>
<ol>
<li><p>方法运行前，先去检查缓存Cache（缓存组件），按照cacheNames指定的名字获取（CacheManager先获取相应的缓存），第一次获取缓存如果没有会自动创建</p>
</li>
<li><p>去Cache中查找缓存的内容，使用一个key，默认是方法的参数，key是按照某种策略生成的，策略使用keyGenerator生成，默认使用SimpleKeyGenerator生成key</p>
<p>SimpleKeyGenerator生成key的策略：</p>
<p>如果没有参数key=new SimpleKey()</p>
<p>有一个参数key=参数的值</p>
<p>有多个参数key=new SimpleKey(params)</p>
</li>
<li><p>没有查到缓存就调用目标方法</p>
</li>
<li><p>将目标方法返回的结果放进缓存中</p>
</li>
</ol>
<p>@CacheEvict</p>
<ul>
<li><p>key：指定要清除的缓存</p>
</li>
<li><p>allEntries=true：指定清除这个缓存中的所有数据</p>
</li>
<li><p>beforeInvocation=false：缓存的清除是否在方法之前执行</p>
<p>默认是在方法之后执行，例如方法中出现异常就不会清除</p>
</li>
</ul>
<p>@Caching</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义复杂的缓存规则</span></span><br><span class="line"><span class="meta">@Caching</span>(</span><br><span class="line">        cacheable = &#123;</span><br><span class="line">            <span class="meta">@Cacheable</span>(cacheNames = <span class="string">"share"</span>, key=<span class="string">"#result.id"</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        put = &#123;</span><br><span class="line">            <span class="meta">@CachePut</span>(cacheNames = <span class="string">"share"</span>, key=<span class="string">"#result.tscode"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>@CacheConfig</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义全局的cacheconfig</span></span><br><span class="line"><span class="meta">@CacheConfig</span>(cacheNames = <span class="string">"share"</span>)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="4、搭建Redis环境和整合Redis"><a href="#4、搭建Redis环境和整合Redis" class="headerlink" title="4、搭建Redis环境和整合Redis"></a>4、搭建Redis环境和整合Redis</h2><p>百度Redis的安装，十分简单</p>
<p>整合Redis</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">RedisTemplate redisTemplate;  <span class="comment">//操作k-v字符串的</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">StringRedisTemplate stringRedisTemplate;  <span class="comment">//操作k-v对象的</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">RedisTemplate&lt;Object, Object&gt; myredisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRedis</span><span class="params">()</span></span>&#123;</span><br><span class="line">    stringRedisTemplate.opsForValue();  <span class="comment">//操作String字符串</span></span><br><span class="line">    stringRedisTemplate.opsForList();  <span class="comment">//操作list列表</span></span><br><span class="line">    stringRedisTemplate.opsForSet();  <span class="comment">//操作set集合</span></span><br><span class="line">    stringRedisTemplate.opsForHash();  <span class="comment">//操作Hash散列</span></span><br><span class="line">    stringRedisTemplate.opsForZSet();  <span class="comment">//操作ZSet有序集合</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认保存对象，会使用JDK的序列化机制，序列化后的数据保存在Redis中</span></span><br><span class="line">    <span class="comment">//如果我们想用json格式保存数据，可以自己配置相应的Config，如下面的MyRedisConfig类</span></span><br><span class="line">    redisTemplate.opsForValue();  <span class="comment">//与上述类似，不过可以存入对象</span></span><br><span class="line">    myredisTemplate.opsForValue().set(<span class="string">"ceshi"</span>, shareMapper.getShareById(<span class="number">1</span>));</span><br><span class="line">    System.out.println(myredisTemplate.opsForValue().get(<span class="string">"ceshi"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自己的RedisConfig</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title">myredisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> RedisTemplate();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        template.setDefaultSerializer(<span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;Object&gt;(Object<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意如果在Redis命令行查询，先通过<code>keys *</code>命令查看所有key，可以看到Redis中的key为<code>&quot;\&quot;ceshi\&quot;&quot;</code>，所以直接<code>get ceshi</code>是无法查到的</p>
]]></content>
      <categories>
        <category>Spring Boot</category>
        <category>cache</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>cache</tag>
        <tag>缓存</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-boot笔记--数据访问</title>
    <url>/spring-boot-data/</url>
    <content><![CDATA[<h1 id="五、Spring-Boot与数据访问"><a href="#五、Spring-Boot与数据访问" class="headerlink" title="五、Spring Boot与数据访问"></a>五、Spring Boot与数据访问</h1><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p>Spring Boot在数据访问层，无论是SQL还是NOSQL，Spring Boot默认使用Spring Data进行整合，添加了大量的自动配置，引入了各种xxxTemplate，xxxRepository来简化我们对数据访问层的操作，我们只需要进行简单的设置即可</p>
<h2 id="2、整合基本的JDBC和数据源"><a href="#2、整合基本的JDBC和数据源" class="headerlink" title="2、整合基本的JDBC和数据源"></a>2、整合基本的JDBC和数据源</h2><p>我们使用基本的JDBC和MySQL驱动，先在pom.xml引入依赖</p>
<a id="more"></a>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后在application.properties中写入</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">datasource</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">username</span>: <span class="string">root</span></span><br><span class="line">    <span class="attr">password</span>: <span class="string">xxxxxx</span></span><br><span class="line">    <span class="attr">url</span>: <span class="string">jdbc:mysql://localhost:3306/jdbc?serverTimezone=UTC</span></span><br><span class="line"><span class="comment">    # 如果不加?serverTimezone=UTC会报错</span></span><br><span class="line">    <span class="meta">driver-class-name</span>: <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment">    # driver-class-name可以不用加</span></span><br></pre></td></tr></table></figure>

<p>我们在ApplicationTests中测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">DataSource dataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    System.out.println(dataSource.getClass());</span><br><span class="line">    Connection connection = dataSource.getConnection();</span><br><span class="line">    System.out.println(connection);</span><br><span class="line">    connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以查看数据源相关配置的源文件,都在<strong>DataSourceProperties</strong>里面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(</span><br><span class="line">    prefix = <span class="string">"spring.datasource"</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceProperties</span> <span class="keyword">implements</span> <span class="title">BeanClassLoaderAware</span>, <span class="title">InitializingBean</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<p>自动配置原理</p>
<p>自动配置都在org.springframework.boot.autoconfigure.jdbc里面</p>
<ol>
<li><p>参考DataSourceConfiguration，根据相关配置创建数据源，默认使用Tomcat连接池，可以指定spring.datasource.type的属性来配置自定义的数据源</p>
</li>
<li><p>Spring Boot默认可以支持BasicDataSource、HikariDataSource、org.apache.tomcat.jdbc.pool.DataSource、</p>
</li>
<li><p>自定义数据源</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(</span><br><span class="line">    proxyBeanMethods = <span class="keyword">false</span></span><br><span class="line">)</span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(&#123;DataSource<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnProperty</span>(</span></span><br><span class="line"><span class="class">    <span class="title">name</span> </span>= &#123;<span class="string">"spring.datasource.type"</span>&#125;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Generic</span> </span>&#123;</span><br><span class="line">    Generic() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">DataSource <span class="title">dataSource</span><span class="params">(DataSourceProperties properties)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//initializeDataSourceBuilder返回DataSourceBuilder创建数据源，利用反射响应type的数据源，并且绑定相关属性</span></span><br><span class="line">        <span class="keyword">return</span> properties.initializeDataSourceBuilder().build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>现在看DataSourceAutoConfiguration类，它引入了一个DataSourceInitializationConfiguration类，而DataSourceInitializationConfiguration类又引入了一个DataSourceInitializerInvoker类</p>
<p>DataSourceInitializerInvoker类作用，可以自动运行建表语句和插入数据的sql语句</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">schema-*.sql</span>  <span class="string">data-*.sql</span></span><br><span class="line"><span class="attr">默认写为：schema.sql或者schema-all.sql都可以</span></span><br><span class="line"><span class="attr">也可以自己设置路径</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">datasource</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">username</span>: <span class="string">root</span></span><br><span class="line">    <span class="attr">password</span>: <span class="string">123456</span></span><br><span class="line">    <span class="attr">url</span>: <span class="string">jdbc:mysql://localhost:3306/jdbc?serverTimezone=UTC</span></span><br><span class="line">    <span class="meta">//Spring</span> <span class="string">Boot2.0以上都得配置initialization-mode: always</span></span><br><span class="line">    <span class="meta">initialization-mode</span>: <span class="string">always</span></span><br><span class="line">    <span class="attr">//设置自定义sql文件路径</span></span><br><span class="line">    <span class="attr">schema</span>:<span class="string"></span></span><br><span class="line">      <span class="meta">-</span> <span class="string">classpath:sql_schema.sql</span></span><br><span class="line"></span><br><span class="line"><span class="attr">这里还有我自己遇到的一个坑</span></span><br><span class="line"><span class="meta">sql文件里的创建表语句必须在末尾加上';'，例如下面如果最后一个')'后不加';'是可以在Navicat里运行的，但是在Spring</span> <span class="string">Boot的sql文件里必须加上';'，否则会报错</span></span><br><span class="line"><span class="attr">CREATE</span> <span class="string">TABLE IF NOT EXISTS `jdbc_student_schema`(</span></span><br><span class="line">		<span class="meta">`id`</span> <span class="string">INTEGER AUTO_INCREMENT,</span></span><br><span class="line">		<span class="meta">`name`</span> <span class="string">VARCHAR(10) NOT NULL,</span></span><br><span class="line">		<span class="meta">`gender`</span> <span class="string">VARCHAR(1) not null,</span></span><br><span class="line">		<span class="meta">`card`</span> <span class="string">VARCHAR(16) not null,</span></span><br><span class="line">		<span class="meta">`date`</span> <span class="string">date,</span></span><br><span class="line">		<span class="attr">PRIMARY</span> <span class="string">KEY(`id`)</span></span><br><span class="line"><span class="attr">);</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>自动配置了JdbcTemplate来操作数据库</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; maps = jdbcTemplate.queryForList(<span class="string">"select * from jdbc_student"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(maps);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> maps.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问localhost:8080/hello，数据返回了</p>
</li>
</ol>
<h2 id="3、整合Druid数据源"><a href="#3、整合Druid数据源" class="headerlink" title="3、整合Druid数据源"></a>3、整合Druid数据源</h2><p><strong>配置属性</strong></p>
<p>Druid Spring Boot Starter 配置属性的名称完全遵照 Druid，你可以通过 Spring Boot 配置文件来配置Druid数据库连接池和监控，如果没有配置则使用默认值。</p>
<ul>
<li>JDBC 配置</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.druid.url</span>= <span class="string"># 或spring.datasource.url= </span></span><br><span class="line"><span class="meta">spring.datasource.druid.username</span>= <span class="string"># 或spring.datasource.username=</span></span><br><span class="line"><span class="meta">spring.datasource.druid.password</span>= <span class="string"># 或spring.datasource.password=</span></span><br><span class="line"><span class="meta">spring.datasource.druid.driver-class-name</span>= <span class="string">#或 spring.datasource.driver-class-name=</span></span><br></pre></td></tr></table></figure>

<ul>
<li>连接池配置</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.druid.initial-size</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.datasource.druid.max-active</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.datasource.druid.min-idle</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.datasource.druid.max-wait</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.datasource.druid.pool-prepared-statements</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.datasource.druid.max-pool-prepared-statement-per-connection-size</span>= <span class="string"></span></span><br><span class="line"><span class="meta">spring.datasource.druid.max-open-prepared-statements</span>= <span class="string">#和上面的等价</span></span><br><span class="line"><span class="meta">spring.datasource.druid.validation-query</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.datasource.druid.validation-query-timeout</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.datasource.druid.test-on-borrow</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.datasource.druid.test-on-return</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.datasource.druid.test-while-idle</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.datasource.druid.time-between-eviction-runs-millis</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.datasource.druid.min-evictable-idle-time-millis</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.datasource.druid.max-evictable-idle-time-millis</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.datasource.druid.filters</span>= <span class="string">#配置多个英文逗号分隔</span></span><br><span class="line"><span class="attr">....//more</span></span><br></pre></td></tr></table></figure>

<ul>
<li>监控配置</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># WebStatFilter配置，说明请参考Druid Wiki，配置_配置WebStatFilter</span></span><br><span class="line"><span class="meta">spring.datasource.druid.web-stat-filter.enabled</span>= <span class="string">#是否启用StatFilter默认值false</span></span><br><span class="line"><span class="meta">spring.datasource.druid.web-stat-filter.url-pattern</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.datasource.druid.web-stat-filter.exclusions</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.datasource.druid.web-stat-filter.session-stat-enable</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.datasource.druid.web-stat-filter.session-stat-max-count</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.datasource.druid.web-stat-filter.principal-session-name</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.datasource.druid.web-stat-filter.principal-cookie-name</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.datasource.druid.web-stat-filter.profile-enable</span>=<span class="string"></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># StatViewServlet配置，说明请参考Druid Wiki，配置_StatViewServlet配置</span></span><br><span class="line"><span class="meta">spring.datasource.druid.stat-view-servlet.enabled</span>= <span class="string">#是否启用StatViewServlet（监控页面）默认值为false（考虑到安全问题默认并未启动，如需启用建议设置密码或白名单以保障安全）</span></span><br><span class="line"><span class="meta">spring.datasource.druid.stat-view-servlet.url-pattern</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.datasource.druid.stat-view-servlet.reset-enable</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.datasource.druid.stat-view-servlet.login-username</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.datasource.druid.stat-view-servlet.login-password</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.datasource.druid.stat-view-servlet.allow</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.datasource.druid.stat-view-servlet.deny</span>=<span class="string"></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Spring监控配置，说明请参考Druid Github Wiki，配置_Druid和Spring关联监控配置</span></span><br><span class="line"><span class="meta">spring.datasource.druid.aop-patterns</span>= <span class="string"># Spring监控AOP切入点，如x.y.z.service.*,配置多个英文逗号分隔</span></span><br></pre></td></tr></table></figure>

<h2 id="4、整合MyBatis"><a href="#4、整合MyBatis" class="headerlink" title="4、整合MyBatis"></a>4、整合MyBatis</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/jdbc?serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">initial-size:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">20</span></span><br><span class="line">      <span class="attr">max-wait:</span> <span class="number">60000</span></span><br><span class="line">      <span class="attr">time-between-eviction-runs-millis:</span> <span class="number">60000</span></span><br><span class="line">      <span class="attr">min-evictable-idle-time-millis:</span> <span class="number">300000</span></span><br><span class="line">      <span class="attr">validation-query:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">      <span class="attr">test-while-idle:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">test-on-borrow:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">test-on-return:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">pool-prepared-statements:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">filters:</span> <span class="string">stat,</span> <span class="string">wall,</span> <span class="string">slf4j</span></span><br><span class="line">      <span class="attr">max-pool-prepared-statement-per-connection-size:</span> <span class="number">20</span></span><br><span class="line">      <span class="attr">use-global-data-source-stat:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">connect-properties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br><span class="line">      <span class="attr">stat-view-servlet:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">url-pattern:</span> <span class="string">/druid/*</span></span><br><span class="line">        <span class="attr">login-username:</span> <span class="string">admin</span></span><br><span class="line">        <span class="attr">login-password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure>

<p>最后创建与数据表对应的JavaBean</p>
<h3 id="4-1、注解版MyBatis"><a href="#4-1、注解版MyBatis" class="headerlink" title="4.1、注解版MyBatis"></a>4.1、注解版MyBatis</h3><p>创建一个mapper类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//指定这是一个操作数据库的mapper</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from jdbc_student where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">getStudentById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from jdbc_student where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">	</span><br><span class="line">    <span class="meta">@Options</span>(useGeneratedKeys = <span class="keyword">true</span>, keyProperty = <span class="string">"id"</span>)</span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into jdbc_student(name, gender, card, date) values(#&#123;name&#125;, #&#123;gender&#125;, #&#123;card&#125;, #&#123;date&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertStudent</span><span class="params">(Student student)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"update jdbc_student set name=#&#123;name&#125;, gender=#&#123;gender&#125;, card=#&#123;card&#125;, date=#&#123;date&#125; where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateStudent</span><span class="params">(Student student)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在controller里测试它</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StudentMapper studentMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/stu/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">getStudent</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> studentMapper.getStudentById(id);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/stu"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">insertStudent</span><span class="params">(Student student)</span></span>&#123;</span><br><span class="line">        studentMapper.insertStudent(student);</span><br><span class="line">        <span class="keyword">return</span> student;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自定义MyBatis的配置规则，只需要在容器中添加一个ConfigurationCustomizer</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConfigurationCustomizer <span class="title">configurationCustomizer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConfigurationCustomizer() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(org.apache.ibatis.session.Configuration configuration)</span> </span>&#123;</span><br><span class="line">                configuration.setMapUnderscoreToCamelCase(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>批量扫描mapper，这样就不必在每个mapper前面加@Mapper注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan</span>(value = <span class="string">"com.xxx.xxx.mapper"</span>)</span><br></pre></td></tr></table></figure>

<h3 id="4-2、配置版MyBatis"><a href="#4-2、配置版MyBatis" class="headerlink" title="4.2、配置版MyBatis"></a>4.2、配置版MyBatis</h3><p>创建另一个mapper类和对应 的Javabean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ShareMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Share <span class="title">getShareById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertShare</span><span class="params">(Share share)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteShare</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateShare</span><span class="params">(Share share)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建全局配置文件mybatis-config.xml和mapper对应的xml文件ShareMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--ShareMapper.xml--&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.spring.mybatis.mapper.ShareMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getShareById"</span> <span class="attr">resultType</span>=<span class="string">"com.spring.mybatis.bean.Share"</span> &gt;</span></span><br><span class="line">        select * from jdbc_share where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertShare"</span> <span class="attr">parameterType</span>=<span class="string">"com.spring.mybatis.bean.Share"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">        insert into jdbc_share(tscode, name) value (#&#123;tscode&#125;, #&#123;name&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteShare"</span> <span class="attr">parameterType</span>=<span class="string">"com.spring.mybatis.bean.Share"</span>&gt;</span></span><br><span class="line">        delete jdbc_share where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateShare"</span> <span class="attr">parameterType</span>=<span class="string">"com.spring.mybatis.bean.Share"</span>&gt;</span></span><br><span class="line">        update jdbc_student set tscode=#&#123;tscode&#125;, name=#&#123;name&#125; where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis-config.xml--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--驼峰命名法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后在spplication.yml中配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">config-location:</span> <span class="string">classpath:mybatis/mybatis-config.xml</span></span><br><span class="line">  <span class="comment"># 全局配置文件</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span></span><br><span class="line">  <span class="comment"># 所有在路径下的.xml文件</span></span><br></pre></td></tr></table></figure>

<h2 id="5、整合JPA"><a href="#5、整合JPA" class="headerlink" title="5、整合JPA"></a>5、整合JPA</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>JPA也是基于ORM思想的，即Object、Relational、Mapping</p>
<ol>
<li><p>编写一个实体类（bean）和数据表进行映射，并且配置好映射关系</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span>()</span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"jdbc_share"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Share</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这是一个主键</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这是和数据表对应的一个列</span></span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> String tscode;</span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Getter、Setter方法</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写一个Dao接口来操作实体类对应的数据表</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//继承JpaRepository完成对数据库的操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ShareRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Share</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>yml基本配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/jdbc</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="comment"># 更新或创建表结构</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">update</span></span><br><span class="line">    <span class="comment"># 控制台显示sql</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>在controller里进行查找插入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShareController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ShareRepository shareRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/share/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Share <span class="title">getShare</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line">        Share share = shareRepository.findById(id).get();</span><br><span class="line">        <span class="keyword">return</span> share;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/share"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Share <span class="title">insertShare</span><span class="params">(Share share)</span></span>&#123;</span><br><span class="line">        Share save = shareRepository.save(share);</span><br><span class="line">        <span class="keyword">return</span> save;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Spring Boot</category>
        <category>Spring Data</category>
        <category>MyBatis</category>
        <category>JDBC</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
        <tag>MySQL</tag>
        <tag>Spring Boot</tag>
        <tag>JDBC</tag>
        <tag>Druid</tag>
        <tag>JPA</tag>
        <tag>Spring Data</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue笔记--初步学习</title>
    <url>/vue-start/</url>
    <content><![CDATA[<h1 id="一、初识Vue"><a href="#一、初识Vue" class="headerlink" title="一、初识Vue"></a>一、初识Vue</h1><h2 id="1、Vue介绍"><a href="#1、Vue介绍" class="headerlink" title="1、Vue介绍"></a>1、Vue介绍</h2><p>作者所用软件为vscode</p>
<p>vscode相关快捷键</p>
<ol>
<li>显示资源管理器：<strong>Ctrl + Shift + E</strong></li>
<li>显示搜索： <strong>Ctrl + Shift + F</strong></li>
<li>显示git：<strong>Ctrl + Shift + G</strong></li>
<li>显示Debug：<strong>Ctrl + Shift + D</strong></li>
<li>显示终端：<strong>Ctrl + Shift + C</strong></li>
<li>新建vscode终端：<strong>Ctrl + Shift + `</strong></li>
</ol>
<a id="more"></a>

<p>注释</p>
<ol>
<li>单行注释：<strong>Ctrl + /</strong></li>
<li>多行注释：<strong>Shift + Alt + /</strong></li>
</ol>
<p>查找替换</p>
<ol>
<li>查找：<strong>Ctrl + F</strong></li>
<li>全局查找： <strong>Ctrl + Shift + F</strong></li>
<li>查找替换：<strong>Ctrl + H</strong></li>
</ol>
<p>光标</p>
<ol>
<li>移动到行首： <strong>Home</strong></li>
<li>移动到行尾：<strong>End</strong></li>
<li>移动到文件头部：<strong>Ctrl + Home</strong></li>
<li>移动到文件结尾：<strong>Ctrl + End</strong></li>
<li>选择光标到行首：<strong>Shift + Home</strong></li>
<li>选择光标到行尾：<strong>Shift + End</strong></li>
<li>行内小范围选择：<strong>Ctrl + Shift + Right / Left</strong></li>
<li>选择多行复制到行上：<strong>Shift + Alt + Top</strong></li>
<li>选择多行复制到行下：<strong>Shift + Alt + Bottom</strong></li>
<li>同时选中所有匹配项：<strong>Ctrl + Shift + L</strong></li>
<li>回退到上一个光标：<strong>Ctrl + U</strong></li>
<li>光标行移动到上一行：<strong>Alt + Top</strong></li>
<li>光标行移动到下一行：<strong>Alt + Bottom</strong></li>
<li>折叠光标行内代码：<strong>Ctrl + Shift + 【</strong></li>
<li>展开光标行内代码：<strong>Ctrl + Shift + 】</strong></li>
</ol>
<h2 id="2、HelloVue"><a href="#2、HelloVue" class="headerlink" title="2、HelloVue"></a>2、HelloVue</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// let 变量 const 常量</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> test =  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">'#test'</span>, <span class="comment">//用于挂载要管理的元素</span></span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                message: <span class="string">"qwer"</span></span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 将data的元素放入原html的位置</span></span></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3、列表展示"><a href="#3、列表展示" class="headerlink" title="3、列表展示"></a>3、列表展示</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in games"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        &#123;&#123;games&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">'#app'</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                message: <span class="string">'list测试'</span>,</span></span><br><span class="line"><span class="actionscript">                games: [<span class="string">'Mincraft'</span>, <span class="string">'Warcraft III'</span>, <span class="string">'Ori'</span>]</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4、计数器案例"><a href="#4、计数器案例" class="headerlink" title="4、计数器案例"></a>4、计数器案例</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前计数：&#123;&#123;counter&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">            整体也可以这么写</span></span><br><span class="line"><span class="comment">            &lt;button v-on:click="counter++"&gt;+&lt;/button&gt;</span></span><br><span class="line"><span class="comment">            &lt;button v-on:click="counter--"&gt;-&lt;/button&gt;</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"add"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"sub"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">            v-on:click可用@click代替</span></span><br><span class="line"><span class="comment">            @click是一个语法糖</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">'#app'</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line">                counter: 0</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line"><span class="actionscript">                add: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.counter++</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">'add执行'</span>);</span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="actionscript">                sub: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.counter--</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">'sub执行'</span>);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5、Vue中的MVVM"><a href="#5、Vue中的MVVM" class="headerlink" title="5、Vue中的MVVM"></a>5、Vue中的MVVM</h2><ul>
<li><p>View层</p>
<ul>
<li>视图层</li>
<li>在前端开发中，通常就是DOM层</li>
<li>只要作用是给用户展示各种信息</li>
</ul>
</li>
<li><p>Model层</p>
<ul>
<li><p>数据层</p>
</li>
<li><p>数据可以是写死的数据，更多是来自服务器和网络请求的数据</p>
</li>
</ul>
</li>
<li><p>VueModel层</p>
<ul>
<li>视图模型层</li>
<li>视图模型层是View和Model沟通的桥梁</li>
<li>一方面实现了Data Binding，也就是数据绑定，将Model的改变实时的反应到View中</li>
<li>另一方面它实现了DOM Listener，也就是DOM监听，当DOM发生一些时间点击、滚动、touch等时，可以监听到，并在需要的情况下改变对应的Data</li>
</ul>
</li>
</ul>
<p>在这里有一个初步理解，例如计数器的counter的值，如果设置一个常量num，然后让data: num，无论this.counter++可以得到num里面的counter值并加一，还是num.counter++直接改变数据的值都是一样的，初步理解为Vue将常量里的值加到new Vue里使它们成为了一个整体</p>
<h2 id="6、options包括的选项和Vue的生命周期"><a href="#6、options包括的选项和Vue的生命周期" class="headerlink" title="6、options包括的选项和Vue的生命周期"></a>6、options包括的选项和Vue的生命周期</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">el: string|HTMLElement </span><br><span class="line">决定之后Vue实例会管理哪一个DOM</span><br><span class="line">el: '#app',</span><br><span class="line">// el: document.querySelector(),</span><br><span class="line"></span><br><span class="line">data: Object|Function（在组建当中data必须是一个函数）</span><br><span class="line">Vue实例对应的数据对象</span><br><span class="line"></span><br><span class="line">methods: &#123;[key:string]:Function&#125;</span><br><span class="line">定义属于Vue的一些方法，可以在其它方法调用，也可以在指令中使用</span><br></pre></td></tr></table></figure>

<p>生命周期图例</p>
<p>{ asset_img lifecycle.png 生命周期图示 }</p>
<h2 id="7、定义Vue的template"><a href="#7、定义Vue的template" class="headerlink" title="7、定义Vue的template"></a>7、定义Vue的template</h2><p>本人使用的是vscode</p>
<p>首先在我们先把tab对应的空格数从4个改为2个，在首选项 -&gt;&gt; 设置里搜索tabsize，将Detect Indentation设置为false，并把tab size改为2</p>
<p>再然后在首选项 -&gt;&gt; 用户代码片段里点击HTML或者HTML.json，写入</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"Vue Template": &#123;</span><br><span class="line">  "prefix": "vue",</span><br><span class="line">  "body": [</span><br><span class="line">    "&lt;!DOCTYPE html&gt;",</span><br><span class="line">    "&lt;html lang=\"zh-CN\"&gt;\n",</span><br><span class="line">    "&lt;head&gt;",</span><br><span class="line">    "\t&lt;meta charset=\"UTF-8\"&gt;",</span><br><span class="line">    "\t&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;",</span><br><span class="line">    "\t&lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt;",</span><br><span class="line">    "\t&lt;title&gt;Document&lt;/title&gt;",</span><br><span class="line">    "\t&lt;script src=\"../js/vue.js\"&gt;&lt;/script&gt;",</span><br><span class="line">    "&lt;/head&gt;\n",</span><br><span class="line">    "&lt;body&gt;",</span><br><span class="line">    "\t&lt;div id=\"app\"&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;\n",</span><br><span class="line">    "\t&lt;script&gt;",</span><br><span class="line">    "\t\tconst app = new Vue(&#123;",</span><br><span class="line">    "\t\t\tel: '#app',",</span><br><span class="line">    "\t\t\tdata: &#123;",</span><br><span class="line">    "\t\t\t\tmessage: \"hello\"",</span><br><span class="line">    "\t\t\t&#125;,",</span><br><span class="line">    "\t\t\tmethods: &#123;&#125;",</span><br><span class="line">    "\t\t&#125;);",</span><br><span class="line">    "\t&lt;/script&gt;",</span><br><span class="line">    "&lt;/body&gt;\n",</span><br><span class="line">    <span class="string">"&lt;/html&gt;"</span></span><br><span class="line">  ],</span><br><span class="line">  "description": "html5 vue template"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在HTML文件中写入vue就会自动创建模板</p>
]]></content>
      <categories>
        <category>Vue</category>
        <category>Vuejs</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-boot笔记--Web开发</title>
    <url>/spring-boot-Web/</url>
    <content><![CDATA[<h1 id="四、Spring-Boot与Web开发"><a href="#四、Spring-Boot与Web开发" class="headerlink" title="四、Spring Boot与Web开发"></a>四、Spring Boot与Web开发</h1><h2 id="1、使用Spring-Boot"><a href="#1、使用Spring-Boot" class="headerlink" title="1、使用Spring Boot"></a>1、使用Spring Boot</h2><ol>
<li><p>创建Spring Boot应用，选中我们需要的模块，Spring Boot默认将选中的模块配置好了，我们只需要在配置文件中指定少量的配置就可以运行</p>
<p><strong>自动配置原理：</strong>根据之前的Spring Boot配置文章中的原理</p>
</li>
<li><p>自己编写业务逻辑代码</p>
</li>
</ol>
<a id="more"></a>

<h2 id="2、Spring-Boot静态资源的映射"><a href="#2、Spring-Boot静态资源的映射" class="headerlink" title="2、Spring Boot静态资源的映射"></a>2、Spring Boot静态资源的映射</h2><p>在<strong>WebMvcAutoConfiguration</strong>下我们可以找到下面这个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">        logger.debug(<span class="string">"Default resource handling disabled"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Duration cachePeriod = <span class="keyword">this</span>.resourceProperties.getCache().getPeriod();</span><br><span class="line">        CacheControl cacheControl = <span class="keyword">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();</span><br><span class="line">        <span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">"/webjars/**"</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="keyword">new</span> String[]&#123;<span class="string">"/webjars/**"</span>&#125;).addResourceLocations(<span class="keyword">new</span> String[]&#123;<span class="string">"classpath:/META-INF/resources/webjars/"</span>&#125;).setCachePeriod(<span class="keyword">this</span>.getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line">        <span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="keyword">new</span> String[]&#123;staticPathPattern&#125;).addResourceLocations(WebMvcAutoConfiguration.getResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations())).setCachePeriod(<span class="keyword">this</span>.getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//欢迎页映射</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WelcomePageHandlerMapping <span class="title">welcomePageHandlerMapping</span><span class="params">(ApplicationContext applicationContext, FormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider)</span> </span>&#123;</span><br><span class="line">    WelcomePageHandlerMapping welcomePageHandlerMapping = <span class="keyword">new</span> WelcomePageHandlerMapping(<span class="keyword">new</span> TemplateAvailabilityProviders(applicationContext), applicationContext, <span class="keyword">this</span>.getWelcomePage(), <span class="keyword">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class="line">    welcomePageHandlerMapping.setInterceptors(<span class="keyword">this</span>.getInterceptors(mvcConversionService, mvcResourceUrlProvider));</span><br><span class="line">    <span class="keyword">return</span> welcomePageHandlerMapping;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>所有<strong>/webjars/**</strong>的请求都去<strong>classpath:/META-INF/resources/webjars/</strong>找资源，webjars就是以jar包的方式引入静态资源</p>
<p><a href="https://www.webjars.org/" target="_blank" rel="noopener">webjars官网</a>，在官网中我们可以看到一些静态资源我们可以以maven的方式导入</p>
</li>
<li><p><strong>/**</strong>为访问当前项目的任何资源，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">"classpath:/META-INF/resources/"</span></span><br><span class="line"><span class="string">"classpath:/resources/"</span></span><br><span class="line"><span class="string">"classpath:/static/"</span></span><br><span class="line"><span class="string">"classpath:/public/"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>欢迎页映射，从2中路径下查找index.html</p>
</li>
<li><p>我们也可以自己设置静态资源的路径</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.resources.static-locations</span>=<span class="string">classpath:/sp/,classpath:/sp1/</span></span><br><span class="line"><span class="attr">多个文件用逗号分割</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="3、Spring-Boot模板引擎"><a href="#3、Spring-Boot模板引擎" class="headerlink" title="3、Spring Boot模板引擎"></a>3、Spring Boot模板引擎</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们把html页面放在classpath:/template/下，thymeleaf就能自动渲染</p>
<ol>
<li><p>导入thymeleaf的名称空间</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用thymeleaf</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_ENCODING;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">"classpath:/templates/"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">".html"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> checkTemplate = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> checkTemplateLocation = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> String prefix = <span class="string">"classpath:/templates/"</span>;</span><br><span class="line">    <span class="keyword">private</span> String suffix = <span class="string">".html"</span>;</span><br><span class="line">    <span class="keyword">private</span> String mode = <span class="string">"HTML"</span>;</span><br><span class="line">    <span class="comment">//只要我们把HTML页面放在classpath:/templates/下，thymeleaf就能帮我们渲染</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"$&#123;hello&#125;"</span>&gt;</span></span><br><span class="line">		这里是欢迎信息</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>语法规则</p>
<p>th:text 改变当前元素的文本内容</p>
<p>th:insert th:replace 片段包含</p>
<p>th:each 遍历</p>
<p>th:if th:unless th:switch th:case 条件判断</p>
<p>th:object th:with 声明变量</p>
<p>th:attr th:attrprepend th:attrappend 任意属性修改</p>
<p>th:value th:src th:href 修改指定属性默认值</p>
<p>th:text th:utext 修改标签体内容，utext不转义特殊字符</p>
<p>${…} 获取变量属性，调用方法</p>
<p>*{…} 在功能上和${…}一样</p>
<p>#{…} 获取国际化内容</p>
<p>@{…} 定义url</p>
<p>~{…} 片段引用</p>
<p>更多的请查看官方thymeleaf文档</p>
</li>
<li><p>Spring Boot MVC</p>
<p><strong>Spring MVC Auto-configuration</strong></p>
<p>Spring Boot provides auto-configuration for Spring MVC that works well with most applications.</p>
<p>The auto-configuration adds the following features on top of Spring’s defaults:</p>
<ul>
<li><p>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.</p>
<p>自动配置了ViewResolver（视图解析器：根据方法的返回值得到视图对象，视图对象决定如何渲染(转发或者重定向)）</p>
</li>
<li><p>Support for serving static resources, including support for WebJars (covered <a href="https://docs.spring.io/spring-boot/docs/2.2.2.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-static-content" target="_blank" rel="noopener">later in this document</a>)).</p>
<p>静态资源路径</p>
</li>
<li><p>Automatic registration of <code>Converter</code>, <code>GenericConverter</code>, and <code>Formatter</code> beans.</p>
<p>Converter：转换器，类型转换</p>
<p>Formatter：格式化器</p>
</li>
<li><p>Support for <code>HttpMessageConverters</code> (covered <a href="https://docs.spring.io/spring-boot/docs/2.2.2.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-message-converters" target="_blank" rel="noopener">later in this document</a>).</p>
<p>HttpMessageConverters：SpringMVC转换http请求与响应的，是从容器中确定并获得所有的HttpMessageConverters</p>
</li>
<li><p>Automatic registration of <code>MessageCodesResolver</code> (covered <a href="https://docs.spring.io/spring-boot/docs/2.2.2.RELEASE/reference/htmlsingle/#boot-features-spring-message-codes" target="_blank" rel="noopener">later in this document</a>).</p>
<p>定义代码错误规则</p>
</li>
<li><p>Static <code>index.html</code> support.</p>
</li>
<li><p>Custom <code>Favicon</code> support (covered <a href="https://docs.spring.io/spring-boot/docs/2.2.2.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-favicon" target="_blank" rel="noopener">later in this document</a>).</p>
</li>
<li><p>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (covered <a href="https://docs.spring.io/spring-boot/docs/2.2.2.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-web-binding-initializer" target="_blank" rel="noopener">later in this document</a>).</p>
<p>初始化WebDataBinder</p>
</li>
</ul>
<p>If you want to keep Spring Boot MVC features and you want to add additional <a href="https://docs.spring.io/spring/docs/5.2.2.RELEASE/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">MVC configuration</a> (interceptors, formatters, view controllers, and other features), you can add your own <code>@Configuration</code> class of type <code>WebMvcConfigurer</code> but <strong>without</strong> <code>@EnableWebMvc</code>. If you wish to provide custom instances of <code>RequestMappingHandlerMapping</code>, <code>RequestMappingHandlerAdapter</code>, or <code>ExceptionHandlerExceptionResolver</code>, you can declare a <code>WebMvcRegistrationsAdapter</code> instance to provide such components.</p>
<p>If you want to take complete control of Spring MVC, you can add your own <code>@Configuration</code> annotated with <code>@EnableWebMvc</code>.</p>
</li>
<li><p>如何修改默认配置</p>
<ol>
<li>Spring Boot在自动配置组件的时候，先看用户有没有自己配，如果有就用用户配置的，没有就自动配置，如果有多个组件就将用户配置的和自己默认的组合起来</li>
</ol>
</li>
</ol>
<h2 id="4、扩展SpringMVC"><a href="#4、扩展SpringMVC" class="headerlink" title="4、扩展SpringMVC"></a>4、扩展SpringMVC</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">"/hello"</span> <span class="attr">view-name</span>=<span class="string">"success"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/hello"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写一个配置类(@Configuration)，是<code>WebMvcConfigurer</code>类型，不能标注<code>@EnableWebMvc</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//浏览器发送</span></span><br><span class="line">        registry.addViewController(<span class="string">"/test"</span>).setViewName(<span class="string">"success"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>既保留了自动配置，又有我们的配置，我们可以看到WebMvcAutoConfigurationAdapter也实现了WebMvcConfigurer，重要的是上面有</p>
<p>@Import({WebMvcAutoConfiguration.EnableWebMvcConfiguration.class}) </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="meta">@Import</span>(&#123;WebMvcAutoConfiguration.EnableWebMvcConfiguration<span class="class">.<span class="keyword">class</span>&#125;) </span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">static</span> <span class="title">class</span> <span class="title">WebMvcAutoConfigurationAdapter</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<p>EnableWebMvcConfiguration里的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EnableWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">implements</span> <span class="title">ResourceLoaderAware</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<p>我们点开<strong>EnableWebMvcConfiguration</strong>可以看到这样一段代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> WebMvcConfigurerComposite configurers = <span class="keyword">new</span> WebMvcConfigurerComposite();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DelegatingWebMvcConfiguration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//从容器中获取所有的WebMvcConfigurer</span></span><br><span class="line"><span class="meta">@Autowired</span>(</span><br><span class="line">    required = <span class="keyword">false</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfigurers</span><span class="params">(List&lt;WebMvcConfigurer&gt; configurers)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!CollectionUtils.isEmpty(configurers)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.configurers.addWebMvcConfigurers(configurers);</span><br><span class="line">        <span class="comment">//将所有的WebMvcConfigurer一起来调用</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>比如<strong>addViewControllers</strong>的实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">    Iterator var2 = <span class="keyword">this</span>.delegates.iterator();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(var2.hasNext()) &#123;</span><br><span class="line">        WebMvcConfigurer delegate = (WebMvcConfigurer)var2.next();</span><br><span class="line">        delegate.addViewControllers(registry);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样Spring Boot的自动配置和我们自己的配置会一起起作用</p>
<h2 id="5、全面接管SpringMVC"><a href="#5、全面接管SpringMVC" class="headerlink" title="5、全面接管SpringMVC"></a>5、全面接管SpringMVC</h2><p>Spring Boot的自动配置不要了，我们需要在配置类中加入<code>@EnableWebMvc</code>，加入后所有的自动配置都会失效，例如静态资源访问的路径Spring Boot默认的路径就不会生效，需要你自己配置</p>
<p>@EnableWebMvc注解的核心就是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import</span>(&#123;DelegatingWebMvcConfiguration<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableWebMvc</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//DelegatingWebMvcConfiguration.class</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span>(</span><br><span class="line">    proxyBeanMethods = <span class="keyword">false</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<p>为什么加了@EnableWebMvc自动配置就失效了，我们现在来看自动配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(</span><br><span class="line">    proxyBeanMethods = <span class="keyword">false</span></span><br><span class="line">)</span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span>(</span><br><span class="line">    type = Type.SERVLET</span><br><span class="line">)</span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123;Servlet<span class="class">.<span class="keyword">class</span>, <span class="title">DispatcherServlet</span>.<span class="title">class</span>, <span class="title">WebMvcConfigurer</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class">//容器中没有这个组件的时候，这个自动配置类才生效</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnMissingBean</span>(</span>&#123;WebMvcConfigurationSupport<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">AutoConfigureOrder</span>(-2147483638)</span></span><br><span class="line"><span class="class">@<span class="title">AutoConfigureAfter</span>(</span>&#123;DispatcherServletAutoConfiguration<span class="class">.<span class="keyword">class</span>, <span class="title">TaskExecutionAutoConfiguration</span>.<span class="title">class</span>, <span class="title">ValidationAutoConfiguration</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">WebMvcAutoConfiguration</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<p>我们加了@EnableWebMvc就会导入WebMvcConfigurationSupport类，所以自动配置类判断后发现容器里有WebMvcConfigurationSupport，就不会生效了</p>
<p>而导入的WebMvcConfigurationSupport只是最基本的功能，需要我们自己写配置</p>
<p>在Spring Boot中会有很多xxxxConfigurer来帮助我们配置</p>
<h2 id="6、Web开发实验"><a href="#6、Web开发实验" class="headerlink" title="6、Web开发实验"></a>6、Web开发实验</h2><h3 id="6-1、引入资源"><a href="#6-1、引入资源" class="headerlink" title="6.1、引入资源"></a>6.1、引入资源</h3><p>index.html（即欢迎页映射）会首先取static、public、resources里的文件，而在xxxxController中return “xxx”会先取templates中的文件</p>
<p>server.servlet.context-path=/test</p>
<p>之后访问时需要在端口后加上/test</p>
<h3 id="6-2、根据浏览器原信息展示页面的国际化效果"><a href="#6-2、根据浏览器原信息展示页面的国际化效果" class="headerlink" title="6.2、根据浏览器原信息展示页面的国际化效果"></a>6.2、根据浏览器原信息展示页面的国际化效果</h3><ol>
<li><p>编写国际化配置文件，抽取页面需要显示的国际化消息</p>
<p>{ asset_img 文件树.jpg 配置文件树 }</p>
<p>在编写过程中遇到了ceshi_zh_CN.properties被识别为普通文件的问题，在setting-&gt;Editor-&gt;File Types中在上方选择Text，然后在下方拉到最底会有你创建的文件，删除它就可以了，你会发现xxx_zh_CN.properties被正常识别了</p>
</li>
<li><p>Spring Boot自动配置好了管理国际化资源配置的组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageSourceProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String basename = <span class="string">"messages"</span>;</span><br><span class="line">    <span class="comment">//默认基础名是messages</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageSourceAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Resource[] NO_RESOURCES = <span class="keyword">new</span> Resource[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MessageSourceAutoConfiguration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(</span><br><span class="line">        prefix = <span class="string">"spring.messages"</span></span><br><span class="line">    )</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageSource <span class="title">messageSource</span><span class="params">(MessageSourceProperties properties)</span> </span>&#123;</span><br><span class="line">        ResourceBundleMessageSource messageSource = <span class="keyword">new</span> ResourceBundleMessageSource();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(properties.getBasename())) &#123;</span><br><span class="line">                    messageSource.setBasenames(StringUtils.commaDelimitedListToStringArray(StringUtils.trimAllWhitespace(properties.getBasename())));</span><br><span class="line">            <span class="comment">//setBasenames设置国际化资源文件的基础名（去掉语言国家代码的）  </span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (properties.getEncoding() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            messageSource.setDefaultEncoding(properties.getEncoding().name());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        messageSource.setFallbackToSystemLocale(properties.isFallbackToSystemLocale());</span><br><span class="line">        Duration cacheDuration = properties.getCacheDuration();</span><br><span class="line">        <span class="keyword">if</span> (cacheDuration != <span class="keyword">null</span>) &#123;</span><br><span class="line">            messageSource.setCacheMillis(cacheDuration.toMillis());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        messageSource.setAlwaysUseMessageFormat(properties.isAlwaysUseMessageFormat());</span><br><span class="line">        messageSource.setUseCodeAsDefaultMessage(properties.isUseCodeAsDefaultMessage());</span><br><span class="line">        <span class="keyword">return</span> messageSource;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>我们可以更改默认的基础名，在application.properties里写spring.messages.basename=languages.ceshi，就能连接到我们自己写的配置文件</p>
</li>
<li><p>页面获取</p>
<p>在ceshi.html页面中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">"#&#123;ceshi.name&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">th:text</span>=<span class="string">"#&#123;ceshi.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">[[#&#123;ceshi.data&#125;]] <span class="comment">&lt;!-- 这是行内写法 --&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果访问时遇到乱码，可以按照下图改为utf-8并打上勾</p>

</li>
<li><p>设置语言切换按钮</p>
<p>国际化的原理，在WebMvcAutoConfiguration.class中可以看到</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(</span><br><span class="line">    prefix = <span class="string">"spring.mvc"</span>,</span><br><span class="line">    name = &#123;<span class="string">"locale"</span>&#125;</span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.mvcProperties.getLocaleResolver() == org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties.LocaleResolver.FIXED) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FixedLocaleResolver(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">        <span class="comment">//可以指定用固定的</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        AcceptHeaderLocaleResolver localeResolver = <span class="keyword">new</span> AcceptHeaderLocaleResolver();</span><br><span class="line">        <span class="comment">//否则是用AcceptHeaderLocaleResolver</span></span><br><span class="line">        localeResolver.setDefaultLocale(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">        <span class="keyword">return</span> localeResolver;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们打开AcceptHeaderLocaleResolver</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取区域信息</span></span><br><span class="line">    Locale defaultLocale = <span class="keyword">this</span>.getDefaultLocale();</span><br><span class="line">    <span class="keyword">if</span> (defaultLocale != <span class="keyword">null</span> &amp;&amp; request.getHeader(<span class="string">"Accept-Language"</span>) == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> defaultLocale;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//区域信息是在request中获取</span></span><br><span class="line">        Locale requestLocale = request.getLocale();</span><br><span class="line">        List&lt;Locale&gt; supportedLocales = <span class="keyword">this</span>.getSupportedLocales();</span><br><span class="line">        <span class="keyword">if</span> (!supportedLocales.isEmpty() &amp;&amp; !supportedLocales.contains(requestLocale)) &#123;</span><br><span class="line">            Locale supportedLocale = <span class="keyword">this</span>.findSupportedLocale(request, supportedLocales);</span><br><span class="line">            <span class="keyword">if</span> (supportedLocale != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> supportedLocale;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> defaultLocale != <span class="keyword">null</span> ? defaultLocale : requestLocale;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> requestLocale;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果我们要设计为按按钮切换那我们就不要使用自动配置里的区域解析器，我们创建一个MyLocaleResolver</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//我们既然要点击链接切换国际化，那么我们可以在链接上带有区域信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLocaleResolver</span> <span class="keyword">implements</span> <span class="title">LocaleResolver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest httpServletRequest)</span> </span>&#123;</span><br><span class="line">        String l = httpServletRequest.getParameter(<span class="string">"l"</span>);</span><br><span class="line">        System.out.println(l);</span><br><span class="line">        Locale locale = Locale.getDefault();</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(l))&#123;</span><br><span class="line">            String[] s = l.split(<span class="string">"_"</span>);</span><br><span class="line">            locale = <span class="keyword">new</span> Locale(s[<span class="number">0</span>], s[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> locale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocale</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Locale locale)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在MyConfig中将它加入容器，这样我们自己的组件就会生效，可以实现按钮切换了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyLocaleResolver();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h3 id="6-3、登录与拦截器"><a href="#6-3、登录与拦截器" class="headerlink" title="6.3、登录与拦截器"></a>6.3、登录与拦截器</h3><p><strong>登录</strong></p>
<p>模板引擎页面开发期间需要实时生效，首先禁用缓存，然后按<code>Ctrl</code>+<code>F9</code>，就可以实时生效了</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.thymeleaf.cache</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(value = <span class="string">"/user/login"</span>)</span><br><span class="line"><span class="comment">//@RequestMapping(value = "/user/login", method = RequestMethod.POST)，两种都可以</span></span><br><span class="line"><span class="comment">//@RequestParam("username")，如果没有传入参数就会报错</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">loginceshi</span><span class="params">(@RequestParam(<span class="string">"username"</span>)</span> String username,</span></span><br><span class="line"><span class="function">                         @<span class="title">RequestParam</span><span class="params">(<span class="string">"password"</span>)</span> String password)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"登录跳转"</span>);</span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.isEmpty(username) &amp;&amp; password.equals(<span class="string">"123456"</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"loginsuccess"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ceshi"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/user/login"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"用户名"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"密码"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color: red"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;msg&#125;"</span> <span class="attr">th:if</span>=<span class="string">"$&#123;not #strings.isEmpty(msg)&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>sign in<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里注意有个重复提交表单的问题，我们按住<code>F5</code>浏览器会提示是否重新发送表单，要解决重复提交的问题，我们可以重定向</p>
<p><strong>拦截器</strong></p>
<p>我们创建自己的拦截器<strong>LoginHandlerInterceptor</strong>，这里实现<strong>HandlerInterceptor</strong>类不会报错，在后来的版本中，这个接口的方法从原来的抽象方法变成了default修饰的默认方法，因此不会显红线报需要实现的方法，需要按<code>Ctrl</code> + <code>O</code>手动选择。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//目标方法执行之前</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Object user = request.getSession().getAttribute(<span class="string">"name"</span>);</span><br><span class="line">    <span class="keyword">if</span> (user == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">//没有登陆，应该返回登录界面</span></span><br><span class="line">        request.setAttribute(<span class="string">"msg"</span>, <span class="string">"请先登录"</span>);</span><br><span class="line">        request.getRequestDispatcher(<span class="string">"/ceshi"</span>).forward(request, response);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>之后添加到我们的配置类中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">    registry.addInterceptor(<span class="keyword">new</span> LoginHandlerInterceptor()).addPathPatterns(<span class="string">"/main"</span>)</span><br><span class="line">        .excludePathPatterns(<span class="string">"/asserts/**"</span>, <span class="string">"/webjars/**"</span>);</span><br><span class="line">    <span class="comment">//也可以不用特意过滤静态资源，SpringBoot会自动放行static下的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-4、Restful-CRUD"><a href="#6-4、Restful-CRUD" class="headerlink" title="6.4、Restful CRUD"></a>6.4、Restful CRUD</h3><ol>
<li><p>RestfulCRUD：CRUD满足Rest风格；</p>
<p>URI： /资源名称/资源标识 HTTP请求方式区分对资源CRUD操作</p>
<table>
<thead>
<tr>
<th></th>
<th>普通CRUD</th>
<th>RestfulCRUD</th>
</tr>
</thead>
<tbody><tr>
<td>查询</td>
<td>getEmp</td>
<td>emp—GET</td>
</tr>
<tr>
<td>添加</td>
<td>addEmp?xxx</td>
<td>emp—POST</td>
</tr>
<tr>
<td>修改</td>
<td>updateEmp?id=xxx&amp;xxx=xx</td>
<td>emp/{id}—PUT</td>
</tr>
<tr>
<td>删除</td>
<td>deleteEmp?id=1</td>
<td>emp/{id}—DELETE</td>
</tr>
</tbody></table>
</li>
<li><p>实验的请求架构;</p>
<table>
<thead>
<tr>
<th>实验功能</th>
<th>请求URI</th>
<th>请求方式</th>
</tr>
</thead>
<tbody><tr>
<td>查询所有员工</td>
<td>emps</td>
<td>GET</td>
</tr>
<tr>
<td>查询某个员工(来到修改页面)</td>
<td>emp/1</td>
<td>GET</td>
</tr>
<tr>
<td>来到添加页面</td>
<td>emp</td>
<td>GET</td>
</tr>
<tr>
<td>添加员工</td>
<td>emp</td>
<td>POST</td>
</tr>
<tr>
<td>来到修改页面（查出员工进行信息回显）</td>
<td>emp/1</td>
<td>GET</td>
</tr>
<tr>
<td>修改员工</td>
<td>emp</td>
<td>PUT</td>
</tr>
<tr>
<td>删除员工</td>
<td>emp/1</td>
<td>DELETE</td>
</tr>
</tbody></table>
<p><strong>thymeleaf公共页面抽取</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 公共页面抽取，copy可以随意取名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">"copy"</span>&gt;</span></span><br><span class="line">    <span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入公共片段 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	一个是~&#123;templatename::selector&#125;：模板名::选择器</span></span><br><span class="line"><span class="comment">	另一种写法是~&#123;templatename::fragmentname&#125;：模板名::片段名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 将公共片段插入到div中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"footer :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 将声明引入的元素替换为公共片段 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"footer :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 将被引入片段的内容包含进标签中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">"footer :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 也可以写为 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果使用以上方法引入可以不用写~&#123;&#125;，而行内写法必须加上[[~&#123;&#125;]]、[(~&#123;&#125;)] --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"~&#123;footer :: copy&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">[[~&#123;footer :: copy&#125;]]</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 实际效果 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">        <span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class="line">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>引入片段时传入参数</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在引入片段需要传参的地方写入 --&gt;</span></span><br><span class="line">&lt;a class="nav-link active" th:class="$&#123;activeIf=="main"?"nav-link active":"nav-link"&#125;"&lt;/a&gt;</span><br><span class="line">&lt;a class="nav-link active" th:class="$&#123;activeIf=="test"?"nav-link active":"nav-link"&#125;"&lt;/a&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 传参时 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"::frag ($&#123;value1&#125;,$&#123;value2&#125;)"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"::frag (onevar=$&#123;value1&#125;,twovar=$&#123;value2&#125;)"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 例如 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"footer::copy (activeIf='main')"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>遍历数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 会生成一个个tr --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"emp:$&#123;emps&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;emp.name&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;emp.gender&#125;==0'男':'女'"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;emp.phone.number&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#dates.format(emp.date,'yyyy-MM-dd HH:mm')&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>自定义属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">单个</span><br><span class="line">th:attr="action=@&#123;/subscribe&#125;"</span><br><span class="line">多个</span><br><span class="line">th:attr="src=@&#123;/images/gtvglogo.png&#125;,title=#&#123;logo&#125;,alt=#&#123;logo&#125;"</span><br></pre></td></tr></table></figure>

<p>PUT和DELETE请求的发送</p>
<ol>
<li><p>配置<strong>HiddenHttpMethodFilter</strong></p>
</li>
<li><p>创建一个post表单和一个隐藏的input项，必须满足name=”_method”，input值就是我们的请求方式</p>
</li>
<li><p>emp传递参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping</span>(<span class="string">"/emp/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deleteEmployee</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line">	<span class="comment">//id为传递的参数</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">	若是通过重定向到了这个界面，即使用了redirectAttributes.addAttribute，则用</span></span><br><span class="line"><span class="comment">	&lt;form th:action="@&#123;/emp/&#125;+$&#123;param.id&#125;" method="post"&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/emp/&#125;+$&#123;id&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_method"</span> <span class="attr">value</span>=<span class="string">"delete"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在application.properties中写入</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.mvc.hiddenmethod.filter.enabled</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>

<p>我们可以查看<strong>WebMvcAutoConfiguration</strong>里的<strong>OrderedHiddenHttpMethodFilter</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(&#123;HiddenHttpMethodFilter<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnProperty</span>(</span></span><br><span class="line"><span class="class">    <span class="title">prefix</span> </span>= <span class="string">"spring.mvc.hiddenmethod.filter"</span>,</span><br><span class="line">    name = &#123;<span class="string">"enabled"</span>&#125;,</span><br><span class="line">    matchIfMissing = <span class="keyword">false</span></span><br><span class="line">    <span class="comment">//自己将其设为true</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">public</span> OrderedHiddenHttpMethodFilter <span class="title">hiddenHttpMethodFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> OrderedHiddenHttpMethodFilter();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ol>
<h2 id="7、错误处理机制"><a href="#7、错误处理机制" class="headerlink" title="7、错误处理机制"></a>7、错误处理机制</h2><h3 id="7-1、Spring-Boot默认的错误处理机制"><a href="#7-1、Spring-Boot默认的错误处理机制" class="headerlink" title="7.1、Spring Boot默认的错误处理机制"></a>7.1、Spring Boot默认的错误处理机制</h3><p>错误处理机制</p>
<ol>
<li><p>浏览器访问localhost:8080/aaa</p>
<p>{ asset_img 错误信息.jpg 默认错误信息 }</p>
</li>
<li><p>Http Client访问localhost:8080/aaa</p>
<p>点击Tools -&gt; Http Client -&gt; Test RESTful Web Service，在path输入/aaa</p>
<p>可以得到</p>
<p>{ asset_img httpclient.jpg HTTP Client }</p>
</li>
</ol>
<p>为什么会有默认的界面，我们可以查看<strong>ErrorMvcAutoConfiguration</strong>错误处理的自动配置，这个类给容器添加了以下组件，<strong>原理方面将组件介绍与下面的运行步骤结合看</strong></p>
<ol>
<li><p>DefaultErrorAttributes</p>
<p>能获得的信息有</p>
<ul>
<li>timestamp：时间戳</li>
<li>status：状态码</li>
<li>error：错误提示</li>
<li>exception：异常对象</li>
<li>message：异常消息</li>
<li>errors：JSR303数据校验的错误</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(WebRequest webRequest, <span class="keyword">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//能获取的信息的信息有timestamp：时间戳、status：状态码</span></span><br><span class="line">    Map&lt;String, Object&gt; errorAttributes = <span class="keyword">new</span> LinkedHashMap();</span><br><span class="line">    errorAttributes.put(<span class="string">"timestamp"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">    <span class="keyword">this</span>.addStatus(errorAttributes, webRequest);</span><br><span class="line">    <span class="keyword">this</span>.addErrorDetails(errorAttributes, webRequest, includeStackTrace);</span><br><span class="line">    <span class="keyword">this</span>.addPath(errorAttributes, webRequest);</span><br><span class="line">    <span class="keyword">return</span> errorAttributes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>BasicErrorController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(&#123;<span class="string">"$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;"</span>&#125;)</span><br><span class="line"><span class="comment">//处理默认/error请求</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicErrorController</span> <span class="keyword">extends</span> <span class="title">AbstractErrorController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(</span><br><span class="line">        produces = &#123;<span class="string">"text/html"</span>&#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">//产生html类型的数据，浏览器的请求到这里处理</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">errorHtml</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        HttpStatus status = <span class="keyword">this</span>.getStatus(request);</span><br><span class="line">        Map&lt;String, Object&gt; model = Collections.unmodifiableMap(<span class="keyword">this</span>.getErrorAttributes(request, <span class="keyword">this</span>.isIncludeStackTrace(request, MediaType.TEXT_HTML)));</span><br><span class="line">        response.setStatus(status.value());</span><br><span class="line">        <span class="comment">//去哪个页面作为错误页面，包含页面地址和页面内容</span></span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">this</span>.resolveErrorView(request, response, status, model);</span><br><span class="line">        <span class="keyword">return</span> modelAndView != <span class="keyword">null</span> ? modelAndView : <span class="keyword">new</span> ModelAndView(<span class="string">"error"</span>, model);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        	返回是空，即我们没有自己设置错误页面，就返回一个error视图，相关视图在</span></span><br><span class="line"><span class="comment">        	ErrorMvcAutoConfiguration下有设置</span></span><br><span class="line"><span class="comment">        **/</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span></span><br><span class="line">    <span class="comment">//产生json类型的数据，其它客户端的请求到这里处理</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) &#123;</span><br><span class="line">        HttpStatus status = <span class="keyword">this</span>.getStatus(request);</span><br><span class="line">        <span class="keyword">if</span> (status == HttpStatus.NO_CONTENT) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity(status);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Map&lt;String, Object&gt; body = <span class="keyword">this</span>.getErrorAttributes(request, <span class="keyword">this</span>.isIncludeStackTrace(request, MediaType.ALL));</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity(body, status);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>至于如何如何分辨的，我们可以在浏览器查看请求头</p>
<p>{ asset_img 请求头.jpg 浏览器请求头 }</p>
<p>而在Http Client中我们可以看到请求头为</p>
<p>{ asset_img 请求头httpclient.jpg httpclient请求头 }</p>
</li>
<li><p>ErrorPageCustomizer</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;error.path:/error&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String path = <span class="string">"/error"</span>;  <span class="comment">//系统出现错误以后来到error请求</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>DefaultErrorViewResolver</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 以下为DefaultErrorViewResolver的方法 **/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request, HttpStatus status, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">this</span>.resolve(String.valueOf(status.value()), model);</span><br><span class="line">    <span class="keyword">if</span> (modelAndView == <span class="keyword">null</span> &amp;&amp; SERIES_VIEWS.containsKey(status.series())) &#123;</span><br><span class="line">        modelAndView = <span class="keyword">this</span>.resolve((String)SERIES_VIEWS.get(status.series()), model);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> ModelAndView <span class="title">resolve</span><span class="params">(String viewName, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//默认Spring Boot可以去找到一个页面，例如 error/404</span></span><br><span class="line">    String errorViewName = <span class="string">"error/"</span> + viewName;</span><br><span class="line">    <span class="comment">//如果模板引擎可以解析就用模板引擎解析</span></span><br><span class="line">    TemplateAvailabilityProvider provider = <span class="keyword">this</span>.templateAvailabilityProviders.getProvider(errorViewName, <span class="keyword">this</span>.applicationContext);</span><br><span class="line">    <span class="comment">//模板引擎可以使用则返回到errorViewName指定的视图地址</span></span><br><span class="line">    <span class="comment">//模板引擎不可用就在静态资源文件夹下找到errorViewName对应的页面，error/404.html</span></span><br><span class="line">    <span class="comment">//然后返回产生一个ModelAndView对象</span></span><br><span class="line">    <span class="keyword">return</span> provider != <span class="keyword">null</span> ? <span class="keyword">new</span> ModelAndView(errorViewName, model) : <span class="keyword">this</span>.resolveResource(errorViewName, model);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<p><strong>运行步骤</strong></p>
<ol>
<li><p>一旦出现4xx和5xx之类的错误，<strong>ErrorPageCustomizer</strong>就会生效（定制错误响应规则），就会来到/error请求，然后被<strong>BasicErrorController</strong>处理</p>
</li>
<li><p>响应页面：去哪个页面是由<strong>DefaultErrorViewResolver</strong>决定的，在<strong>resolveErrorView</strong>得到所有的<strong>errorViewResolvers</strong>的<strong>ModelAndView</strong>，而<strong>DefaultErrorViewResolver</strong>会得到一个默认的<strong>ModelAndView</strong></p>
<p>响应数据：查看<strong>getErrorAttributes</strong>方法里的<strong>errorAttributes</strong>对象，可以发现<strong>ErrorAttributes</strong>是一个抽象类，而<strong>DefaultErrorAttributes</strong>正实现了它，所以我们查看<strong>ErrorMvcAutoConfiguration</strong>下的<strong>DefaultErrorAttributes</strong>组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 以下为BasicErrorController类下的errorHtml方法里所使用的resolveErrorView方法 **/</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request, HttpServletResponse response, HttpStatus status, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">    Iterator var5 = <span class="keyword">this</span>.errorViewResolvers.iterator();</span><br><span class="line"></span><br><span class="line">    ModelAndView modelAndView;</span><br><span class="line">    <span class="comment">//所有的errorViewResolvers得到ModelAndView</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!var5.hasNext()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ErrorViewResolver resolver = (ErrorViewResolver)var5.next();</span><br><span class="line">        modelAndView = resolver.resolveErrorView(request, status, model);</span><br><span class="line">    &#125; <span class="keyword">while</span>(modelAndView == <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">//模板引擎和静态资源文件夹下都没有文件，即我们没有自己设置错误页面的情况下，就返回空</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** 以下为BasicErrorController类下的errorHtml方法里所使用的getErrorAttributes方法 **/</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(HttpServletRequest request, <span class="keyword">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class="line">    WebRequest webRequest = <span class="keyword">new</span> ServletWebRequest(request);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.errorAttributes.getErrorAttributes(webRequest, includeStackTrace);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="7-2、定制自己的错误处理页面和数据"><a href="#7-2、定制自己的错误处理页面和数据" class="headerlink" title="7.2、定制自己的错误处理页面和数据"></a>7.2、定制自己的错误处理页面和数据</h3><p>如何定制自己的错误页面和页面的错误信息</p>
<ol>
<li><p>有模板引擎情况下，就创建error/<code>状态码</code>.html，例如 error/404.html，要想匹配状态码4xx或者5xx，就在error文件夹下创建4xx.html或者5xx.html，注意有精确匹配的情况下，即有404.html和4xx.html发生404错误会来到404.html</p>
<p>页面能获取的信息，可以查看<strong>DefaultErrorAttributes</strong>组件，获取信息例子如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>status：[[$&#123;status&#125;]]<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>timestamp：[[$&#123;timestamp&#125;]]<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>没有模板引擎的情况下（模板引擎找不到这个错误页面），在静态资源文件夹下找</p>
</li>
<li><p>模板引擎和静态资源文件夹下都没有就来到Spring Boot默认的空白页面</p>
</li>
</ol>
<p>如何定制错误的json信息</p>
<!-- springboot2，看了一下源码，要在配置文件加上server.error.include-exception=true才能获取到Exception信息 -->

<ol>
<li><p>首先我们可以创建一个自己的异常类，例如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//为了异常能够抛出，继承运行时异常(RuntimeException)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataNullException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DataNullException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"数据空异常"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再创建一个增强Controller（@ControllerAdvice）配合@ExceptionHandler来处理异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(DataNullException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">Map</span>&lt;<span class="title">String</span>, <span class="title">Object</span>&gt; <span class="title">errorException</span>(<span class="title">Exception</span> <span class="title">e</span>)</span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"code"</span>, <span class="string">"Data Null"</span>);</span><br><span class="line">        map.put(<span class="string">"message"</span>, e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是这样无论是浏览器访问还是客户端访问都只返回json字符串，注意要在配置文件加上下面的配置才能获取Exception信息</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.error.include-exception</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>我们希望能够有自适应效果，在不改变原来json数据的同时往里面添加数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//继承DefaultErrorAttributes，重写getErrorAttributes方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyErrorAttributes</span> <span class="keyword">extends</span> <span class="title">DefaultErrorAttributes</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//保证能够得到自定义的exception，默认为false</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyErrorAttributes</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(WebRequest webRequest, <span class="keyword">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">super</span>.getErrorAttributes(webRequest, includeStackTrace);</span><br><span class="line">        <span class="comment">//得到父类里的数据</span></span><br><span class="line">        map.put(<span class="string">"code"</span>, <span class="string">"Data Null"</span>);</span><br><span class="line">        map.put(<span class="string">"message"</span>, <span class="string">"cs"</span>);</span><br><span class="line">        Map&lt;String, Object&gt; ceshi = (Map&lt;String, Object&gt;) webRequest.getAttribute(<span class="string">"ceshi"</span>, <span class="number">0</span>);</span><br><span class="line">        map.put(<span class="string">"ceshi"</span>, ceshi);</span><br><span class="line">        <span class="comment">//将我们自己的数据与源数据合并</span></span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(DataNullException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">String</span> <span class="title">errorException</span>(<span class="title">Exception</span> <span class="title">e</span>, <span class="title">HttpServletRequest</span> <span class="title">httpServletRequest</span>)</span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        httpServletRequest.setAttribute(<span class="string">"javax.servlet.error.status_code"</span>, <span class="string">"500"</span>);</span><br><span class="line">        <span class="comment">//设置状态码</span></span><br><span class="line">        map.put(<span class="string">"code"</span>, <span class="string">"Data Null"</span>);</span><br><span class="line">        map.put(<span class="string">"message"</span>, e.getMessage());</span><br><span class="line">        httpServletRequest.setAttribute(<span class="string">"ceshi"</span>, map);</span><br><span class="line">        <span class="comment">//携带数据</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/forward:/error"</span>;</span><br><span class="line">		<span class="comment">//转发到/error</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
]]></content>
      <categories>
        <category>Spring Boot</category>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Web</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-boot笔记--日志</title>
    <url>/spring-boot-log/</url>
    <content><![CDATA[<h1 id="三、Spring-Boot日志"><a href="#三、Spring-Boot日志" class="headerlink" title="三、Spring Boot日志"></a>三、Spring Boot日志</h1><h2 id="1、日志框架"><a href="#1、日志框架" class="headerlink" title="1、日志框架"></a>1、日志框架</h2><p>日志的抽象层：JCL、SLF4J、jboss-logging</p>
<p>日志的实现：Log4j JUL、Log4j2 Logback</p>
<p>Spring Boot：底层是Spring、Spring默认是JCL、而Spring Boot选用SLF4j和logback</p>
<a id="more"></a>

<h2 id="2、SLF4j"><a href="#2、SLF4j" class="headerlink" title="2、SLF4j"></a>2、SLF4j</h2><h3 id="2-1-系统中如何使用"><a href="#2-1-系统中如何使用" class="headerlink" title="2.1 系统中如何使用"></a>2.1 系统中如何使用</h3><p>开发的时候，日志记录方法的调用应该调用日志抽象层的方法</p>
<p>首先导入slf4j的jar和logback的jar，可以查看下图</p>
<img src="/spring-boot-log/concrete-bindings.png" class="" title="抽象层到框架的方法--来自slf4j官网">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Logger logger = LoggerFactory.getLogger(HelloWorld<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    logger.info(<span class="string">"Hello World"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>每一个日志都有自己的配置文件，使用slf4j后还是使用日志框架自己本身的配置文件</p>
<h3 id="2-2-多个日志框架统一转成slf4j"><a href="#2-2-多个日志框架统一转成slf4j" class="headerlink" title="2.2 多个日志框架统一转成slf4j"></a>2.2 多个日志框架统一转成slf4j</h3><p>如何让系统中所有的日志统一到slf4j</p>
<img src="/spring-boot-log/legacy.png" class="" title="多个框架统一到slf4j的方法--来自slf4j官网">

<ol>
<li>首先将系统的其它日志框架排除</li>
<li>用中间包来替换原来的日志框架</li>
<li>导入slf4j来实现统一框架</li>
</ol>
<h3 id="2-3-Spring-Boot日志关系"><a href="#2-3-Spring-Boot日志关系" class="headerlink" title="2.3 Spring Boot日志关系"></a>2.3 Spring Boot日志关系</h3><p>我们可以创建一个新的项目，在pom.xml文件右键点击Diagrams–&gt;Show Dependencies，可以看到idea为我们画好的依赖图</p>
<p>其中<strong>spring-boot-starter</strong>是我们最基本的文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Spring Boot使用它来做我们的日志功能</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们可以在依赖图下查看我们的依赖关系，可以看到<strong>spring-boot-starter-logging</strong>依赖logback-classic来使用logback进行日志记录，其它还有xxx-to-slf4j来将其它的日志框架转换为slf4j</p>
<p>Spring Boot底层也是使用slf4j+logback的方式来进行日志记录，Spring Boot也把其它的日志也转换成slf4j，如果我们要用其它日志框架，一定要把日志的框架依赖移除掉，Spring Boot能自动适配所有的日志，而且底层使用slf4j+logback的方式记录日志</p>
<h3 id="2-4-Spring-Boot日志的使用"><a href="#2-4-Spring-Boot日志的使用" class="headerlink" title="2.4 Spring Boot日志的使用"></a>2.4 Spring Boot日志的使用</h3><ol>
<li><p>默认配置</p>
<p>Spring Boot帮我们配置好了日志</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//日志的级别trace&lt;debug&lt;info&lt;warn&lt;error</span></span><br><span class="line">    <span class="comment">//我们可以自己调整输出的级别</span></span><br><span class="line">	<span class="comment">//Spring Boot默认使用的是info级别的，只输出info、warn、error</span></span><br><span class="line">    logger.trace(() -&gt; <span class="string">"trace"</span>);</span><br><span class="line">    logger.debug(() -&gt; <span class="string">"debug"</span>);</span><br><span class="line">    logger.info(() -&gt; <span class="string">"info"</span>);</span><br><span class="line">    logger.warn(() -&gt; <span class="string">"warn"</span>);</span><br><span class="line">    logger.error(() -&gt; <span class="string">"error"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>改变配置</p>
<p>在application.properties里写入</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">logging.level.com.包名</span>=<span class="string">trace</span></span><br></pre></td></tr></table></figure>

<p>可以更改日志级别，没有指定就用Spring Boot默认指定的级别，root级别</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 会在根目录下生成spboot.log</span></span><br><span class="line"><span class="meta">logging.file.name</span>=<span class="string">spboot.log</span></span><br><span class="line"><span class="comment"># 制定完整的路径，可在对应路径下找到</span></span><br><span class="line"><span class="meta">logging.file.name</span>=<span class="string">G:/spboot.log</span></span><br><span class="line"><span class="comment"># 在指定路径下创建spring.log，/splog/log是在所在磁盘根目录下创建，name和path同时指定name起作用</span></span><br><span class="line"><span class="meta">logging.file.path</span>=<span class="string">G:/splog/log</span></span><br><span class="line"><span class="comment"># 指定控制台输出日志的格式</span></span><br><span class="line"><span class="meta">logging.pattern.console</span>=<span class="string">%d&#123;yyyy-MM-dd&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span></span><br><span class="line"><span class="comment"># 指定文件中输出日志的格式</span></span><br><span class="line"><span class="meta">logging.pattern.file</span>=<span class="string">%d&#123;yyyy-MM-dd&#125; = [%thread] = %-5level = %logger&#123;50&#125; = - %msg%n</span></span><br><span class="line"></span><br><span class="line"><span class="attr">日志的输出格式：</span></span><br><span class="line">	<span class="attr">%d：表示日期和时间</span></span><br><span class="line">	<span class="attr">%thread：表示线程的名字</span></span><br><span class="line">	<span class="attr">%-5level：表示级别从左显示5个字符宽度</span></span><br><span class="line">	<span class="attr">%logger&#123;50&#125;：表示logger名字最长为50个字符，否则按照句点分割</span></span><br><span class="line">	<span class="attr">%msg：日志消息</span></span><br><span class="line">	<span class="attr">%n：换行</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>指定配置</p>
<p>如果我们要用自己的配置，那么在类路径下放上每个日志框架自己的配置文件，然后Spring Boot就不会使用自己的配置了</p>
<p><a href="https://docs.spring.io/spring-boot/docs/2.2.2.RELEASE/reference/htmlsingle/#boot-features-logging" target="_blank" rel="noopener">官方文档</a></p>
<table>
<thead>
<tr>
<th>Logging System</th>
<th>Customization</th>
</tr>
</thead>
<tbody><tr>
<td>Logback</td>
<td><strong>logback-spring.xml</strong>, <strong>logback-spring.groovy</strong>, <strong>logback.xml</strong>, or <strong>logback.groovy</strong></td>
</tr>
<tr>
<td>Log4j2</td>
<td><strong>log4j2-spring.xml</strong> or <strong>log4j2.xml</strong></td>
</tr>
<tr>
<td>JDK (Java Util Logging)</td>
<td><strong>logging.properties</strong></td>
</tr>
</tbody></table>
<p>logback.xml直接被日志框架识别</p>
<p>logback-spring.xml由Spring Boot加载配置项</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"staging"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- configuration to be enabled when the "staging" profile is active --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 可以指定在某个环境下生效 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev | staging"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- configuration to be enabled when the "dev" or "staging" profiles are active --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"!production"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- configuration to be enabled when the "production" profile is not active --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="2-5-Spring-Boot日志框架的切换"><a href="#2-5-Spring-Boot日志框架的切换" class="headerlink" title="2.5 Spring Boot日志框架的切换"></a>2.5 Spring Boot日志框架的切换</h3><p>可以按照官网的适配图进行切换，可以查看<strong>2.2</strong>下的图片，我们可以通过生成依赖图的方式对依赖进行管理，具体引入哪些依赖可以查看<a href="https://docs.spring.io/spring-boot/docs/2.2.2.RELEASE/reference/htmlsingle/#using-boot-starter" target="_blank" rel="noopener">官方文档</a>，删除哪些依赖可以查看2.2下的图片</p>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-boot笔记--配置</title>
    <url>/spring-boot-config/</url>
    <content><![CDATA[<h1 id="二、Spring-Boot配置"><a href="#二、Spring-Boot配置" class="headerlink" title="二、Spring Boot配置"></a>二、Spring Boot配置</h1><h2 id="1、配置文件"><a href="#1、配置文件" class="headerlink" title="1、配置文件"></a>1、配置文件</h2><p>Spring Boot使用一个全局的配置文件，配置文件是固定的</p>
<ul>
<li>application.properties</li>
<li>application.yml</li>
</ul>
<p>配置文件的作用：修改Spring Boot自动配置的默认值</p>
<a id="more"></a>

<p>在底层Spring Boot都给我们配置好了，你可以自己修改配置</p>
<h2 id="2、YAML"><a href="#2、YAML" class="headerlink" title="2、YAML"></a>2、YAML</h2><p>YAML (YAML Ain’t a Markup Language)，它既是一个标记语言又不是一个标记语言，以数据为中心，比json、xml等更适合做配置文件</p>
<p>如果要配置端口，在<strong>application.properties</strong>中</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">80</span></span><br></pre></td></tr></table></figure>

<p>在<strong>application.yml</strong>中</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span> </span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>

<h3 id="2-1-YAML语法"><a href="#2-1-YAML语法" class="headerlink" title="2.1 YAML语法"></a>2.1 YAML语法</h3><p>k: v: 表示一对键值对(空格必须有)，以空格缩进表示层级关系，大小写是敏感的，缩进不允许使用tab，只允许空格，缩进的空格数不重要，只要相同层级的元素左对齐即可</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">/hello</span></span><br></pre></td></tr></table></figure>

<p>值得写法</p>
<ul>
<li><p>普通的值(数字、字符串、布尔)</p>
<p>直接来写，字符串默认不加上单引号或双引号</p>
<p>“”：双引号，不会转义字符串，特殊字符会作为本身想表示的意思</p>
<p>‘’：单引号，会转义特殊字符，特殊字符会变为普通字符串</p>
</li>
<li><p>对象、Map(键值对)</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">student:</span> </span><br><span class="line">  <span class="attr">name:</span> <span class="string">liming</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">18</span></span><br></pre></td></tr></table></figure>

<p>行内写法</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">student:</span> <span class="string">&#123;name:</span> <span class="string">liming,</span> <span class="attr">age:</span> <span class="number">18</span><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>数组(List、set)</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">student:</span> </span><br><span class="line">  <span class="string">-liming</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">zhangsan</span></span><br></pre></td></tr></table></figure>

<p>行内写法</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">student:</span> <span class="string">&#123;liming,</span> <span class="string">zhangsan&#125;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="3、配置文件值获取"><a href="#3、配置文件值获取" class="headerlink" title="3、配置文件值获取"></a>3、配置文件值获取</h2><p>在包里新建bean.student类，并写入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> cadre;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; course;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; score;</span><br><span class="line">    <span class="keyword">private</span> Card card;</span><br><span class="line">	...... <span class="comment">//下面是Getter,Setter,toString方法</span></span><br></pre></td></tr></table></figure>

<p>在resources文件夹下新建文件application.yml，并写入</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">student:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">zhangsan</span></span><br><span class="line">  <span class="attr">sex:</span> <span class="string">male</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">21</span></span><br><span class="line">  <span class="attr">cadre:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">course:</span> <span class="string">&#123;math,</span> <span class="string">english&#125;</span></span><br><span class="line">  <span class="attr">score:</span> <span class="string">&#123;math:</span> <span class="number">100</span><span class="string">,</span> <span class="attr">english:</span> <span class="number">100</span><span class="string">&#125;</span></span><br><span class="line">  <span class="attr">card:</span></span><br><span class="line">    <span class="attr">number:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">money:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>

<p>将配置的每一个数据映射到组件中，在组件上方加入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"student"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<p>发现idea会有提示，在pom.xml中写入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>此为配置文件处理器，配置文件和组件连接就会有提示<strong>@ConfigurationProperties(prefix = “student”)</strong>是告诉本类中的所有属性和配置文件中的相关配置进行连接，<strong>prefix = “student”</strong>是与配置文件student下面的所有属性进行一一映射</p>
<p><strong>@Component</strong>只有这个组件是容器中的组件，才能使用容器提供的功能</p>
<p>现在就可以测试了</p>
<p>我们进入<strong>test</strong>下面的<strong>ApplicationTests</strong>类，这是我们的Spring Boot单元测试类，可以在测试期间自动注入到容器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">Student student;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(student);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在下方的Spring Boot提示中可以看到结果</p>
<p>Student{name=’zhangsan’, sex=’male’, age=21, cadre=true, course=null, score={math=100, english=100}, card=Card{number=’123456’, money=10000}}</p>
<h3 id="3-1-properties配置"><a href="#3-1-properties配置" class="headerlink" title="3.1 properties配置"></a>3.1 properties配置</h3><p>我们还可以在properties里配置，properties优先级要高</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">student.name</span>=<span class="string">张三</span></span><br><span class="line"><span class="meta">student.sex</span>=<span class="string">male</span></span><br><span class="line"><span class="meta">student.age</span>=<span class="string">22</span></span><br><span class="line"><span class="meta">student.cadre</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">student.course</span>=<span class="string">数学,英语</span></span><br><span class="line"><span class="meta">student.score.sx</span>=<span class="string">120</span></span><br><span class="line"><span class="meta">student.score.yy</span>=<span class="string">120</span></span><br><span class="line"><span class="meta">student.card.number</span>=<span class="string">123456789</span></span><br><span class="line"><span class="meta">student.card.money</span>=<span class="string">20000</span></span><br></pre></td></tr></table></figure>

<p>运行test发现可以输出结果但有乱码，因为properties是ASCII码，而idea用的是utf-8，我们打开File–&gt;Settings，搜索File Encodings，选择utf-8并打勾</p>


<p>之后运行发现解决了中文乱码问题</p>
<h3 id="3-2-Value和-ConfigurationProperties区别"><a href="#3-2-Value和-ConfigurationProperties区别" class="headerlink" title="3.2 @Value和@ConfigurationProperties区别"></a>3.2 @Value和@ConfigurationProperties区别</h3><p>我们注释掉<strong>@ConfigurationProperties</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//@ConfigurationProperties(prefix = "student")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;student.name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;student.sex&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;2*10&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"true"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> cadre;</span><br></pre></td></tr></table></figure>

<p>我们再次运行，发现仍然有效</p>
<table>
<thead>
<tr>
<th></th>
<th align="left">@ConfigurationProperties</th>
<th>@Value</th>
</tr>
</thead>
<tbody><tr>
<td>功能</td>
<td align="left">批量注入属性</td>
<td>单个指定</td>
</tr>
<tr>
<td>松散语法</td>
<td align="left">支持-n等于大写的N</td>
<td>不支持</td>
</tr>
<tr>
<td>SpEL(表达式)</td>
<td align="left">不支持</td>
<td>支持</td>
</tr>
<tr>
<td>JSR303校验</td>
<td align="left">支持</td>
<td>不支持</td>
</tr>
<tr>
<td>复杂类型封装</td>
<td align="left">支持</td>
<td>不支持</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"student"</span>)</span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="comment">//@Value("$&#123;student.name&#125;")</span></span><br><span class="line">    <span class="meta">@Email</span> <span class="comment">//name必须是邮箱格式</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure>

<p><strong>@Validated</strong>表示需要校验</p>
<p>配置文件中yml和properties都能获取到值，有一定的区别</p>
<p>至于<strong>@ConfigurationProperties</strong>和<strong>@Value</strong>，我们只取某个值时，可以用<strong>@Value</strong>，如果我们有专门的javaBean来映射配置文件，就用<strong>@ConfigurationProperties</strong></p>
<h3 id="3-3-PropertySource、-ImportResource、-Bean"><a href="#3-3-PropertySource、-ImportResource、-Bean" class="headerlink" title="3.3 @PropertySource、@ImportResource、@Bean"></a>3.3 @PropertySource、@ImportResource、@Bean</h3><p><strong>@PropertySource</strong>：加载指定的配置文件</p>
<p><strong>@ConfigurationProperties</strong>：默认从全局文件中获取值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PropertySource</span>(value = &#123;<span class="string">"classpath:student.properties"</span>&#125;)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"student"</span>)</span><br><span class="line"><span class="meta">@Validated</span></span><br></pre></td></tr></table></figure>

<p><strong>classpath</strong>为<strong>resources</strong>文件夹路径</p>
<p><strong>@ImportResource</strong>：导入Spring的配置文件，让配置文件里面的内容生效</p>
<p>Spring Boot不会自动识别Spring的配置文件，不能自动识别</p>
<p>想让Spring的配置生效，<strong>@ImportResource</strong>标注在配置类上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ImportResource</span>(locations = &#123;<span class="string">"classpath:bean.xml"</span>&#125;)</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(HelloWorldApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Spring Boot推荐给容器中加组件的方式</p>
<ul>
<li><p>配置类就相当于以前的配置文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">helloService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HelloService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@Bean将方法的返回值添加到容器中，默认ID为方法名</p>
</li>
</ul>
<h2 id="4、配置文件占位符"><a href="#4、配置文件占位符" class="headerlink" title="4、配置文件占位符"></a>4、配置文件占位符</h2><ul>
<li><p>随机数</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">$&#123;random.value&#125;、$&#123;random.int&#125;、$&#123;random.long&#125;</span></span><br><span class="line"><span class="attr">$&#123;random.int(10)&#125;、$&#123;random.int[1024,65536]&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>占位符获取之前配置的值，如果没有就作为字符串，还可指定默认:默认值</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">student.name</span>=<span class="string">张三$&#123;random.value&#125;</span></span><br><span class="line"><span class="meta">student.sex</span>=<span class="string">$&#123;student.name&#125;</span></span><br><span class="line"><span class="meta">student.age</span>=<span class="string">$&#123;random.int&#125;</span></span><br><span class="line"><span class="meta">student.cadre</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">student.course</span>=<span class="string">数学,英语</span></span><br><span class="line"><span class="meta">student.score.sx</span>=<span class="string">120</span></span><br><span class="line"><span class="meta">student.score.yy</span>=<span class="string">120</span></span><br><span class="line"><span class="meta">student.card.number</span>=<span class="string">$&#123;student.happy:happy&#125;</span></span><br><span class="line"><span class="meta">student.card.money</span>=<span class="string">20000</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="5、Profile"><a href="#5、Profile" class="headerlink" title="5、Profile"></a>5、Profile</h2><h3 id="5-1-多Profile文件"><a href="#5-1-多Profile文件" class="headerlink" title="5.1 多Profile文件"></a>5.1 多Profile文件</h3><p>主配置文件编写的时候，文件名可以是application-{profile}.properties/yml</p>
<p>默认使用application.properties的配置</p>
<h3 id="5-2-yml多文档块模式"><a href="#5-2-yml多文档块模式" class="headerlink" title="5.2 yml多文档块模式"></a>5.2 yml多文档块模式</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">pro</span></span><br></pre></td></tr></table></figure>



<h3 id="5-3-激活指定的profile"><a href="#5-3-激活指定的profile" class="headerlink" title="5.3 激活指定的profile"></a>5.3 激活指定的profile</h3><ul>
<li><p>application-dev.properties，在全局配置文件中写入</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.profiles.active</span>=<span class="string">dev</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>命令行方式</p>
<p>–spring.profiles.active=dev</p>
<img src="/spring-boot-config/%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%85%8D%E7%BD%AE.jpg" class="">
</li>
<li><p>虚拟机参数</p>
<p>-Dspring.profiles.active=dev</p>
<img src="/spring-boot-config/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE.jpg" class="">

</li>
</ul>
<h2 id="6、配置文件加载位置"><a href="#6、配置文件加载位置" class="headerlink" title="6、配置文件加载位置"></a>6、配置文件加载位置</h2><p>Spring Boot会扫描以下位置的application.properties或者yml文件作为Spring Boot的默认配置文件</p>
<ol>
<li><p>file:./config/</p>
<p>当前项目文件夹下的config文件夹里面</p>
</li>
<li><p>file:./</p>
<p>项目文件夹路径下</p>
</li>
<li><p>classpath:/config/</p>
<p>类路径下的config文件夹里</p>
</li>
<li><p>classpath:/</p>
<p>类路径的根目录</p>
</li>
</ol>
<p>以上按优先级从高到低的顺序，所有文件都会被加载，高优先会覆盖低优先</p>
<p>也可通过配置spring.config.location来改变默认配置，运维时使用</p>
<h2 id="7、外部配置加载位置"><a href="#7、外部配置加载位置" class="headerlink" title="7、外部配置加载位置"></a>7、外部配置加载位置</h2><p>Spring Boot支持多种外部配置方式</p>
<ol>
<li><strong>命令行参数</strong></li>
<li>来自java:comp/env的JNDI属性</li>
<li>Java系统属性(System.getProperties())</li>
<li>操作系统环境变量</li>
<li>RandomValuePropertySource配置的random.*属性值</li>
<li><strong>jar包外部的application-{profile}.properties或yml(带spring.profile)配置文件</strong></li>
<li><strong>jar包内部的application-{profile}.properties或yml(带spring.profile)配置文件</strong></li>
<li><strong>jar包外部的application.properties或yml(不带spring.profile)配置文件</strong></li>
<li><strong>jar包内部的application.properties或yml(不带spring.profile)配置文件</strong></li>
<li>@Configuration注解类上的@PropertySource</li>
<li>通过SpringApplication.setDefaultProperties指定的默认属性</li>
</ol>
<p><a href="https://docs.spring.io/spring-boot/docs/2.2.2.RELEASE/reference/htmlsingle/#boot-features-external-config" target="_blank" rel="noopener">官方文档</a></p>
<h2 id="8、自动配置原理"><a href="#8、自动配置原理" class="headerlink" title="8、自动配置原理"></a>8、自动配置原理</h2><p>配置文件可以配置哪些属性，可以参照<a href="https://docs.spring.io/spring-boot/docs/2.2.2.RELEASE/reference/htmlsingle/#common-application-properties" target="_blank" rel="noopener">官方文档</a></p>
<p><strong>自动配置原理</strong></p>
<ol>
<li><p>Spring Boot启动时加载了主配置类，开启了自动配置功能<strong>@EnableAutoConfiguration</strong>，然后用<strong>AutoConfigurationImportSelector</strong>来给容器中导入组件，详细可以查看<strong>selectImports</strong>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.isEnabled(annotationMetadata)) &#123;</span><br><span class="line">        <span class="keyword">return</span> NO_IMPORTS;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        AutoConfigurationMetadata autoConfigurationMetadata = AutoConfigurationMetadataLoader.loadMetadata(<span class="keyword">this</span>.beanClassLoader);</span><br><span class="line">        AutoConfigurationImportSelector.AutoConfigurationEntry autoConfigurationEntry = <span class="keyword">this</span>.getAutoConfigurationEntry(autoConfigurationMetadata, annotationMetadata); <span class="comment">//上一行的getAutoConfigurationEntry对应下面方法</span></span><br><span class="line">        <span class="keyword">return</span> StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> AutoConfigurationImportSelector.<span class="function">AutoConfigurationEntry <span class="title">getAutoConfigurationEntry</span><span class="params">(AutoConfigurationMetadata autoConfigurationMetadata, AnnotationMetadata annotationMetadata)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.isEnabled(annotationMetadata)) &#123;</span><br><span class="line">        <span class="keyword">return</span> EMPTY_ENTRY;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        AnnotationAttributes attributes = <span class="keyword">this</span>.getAttributes(annotationMetadata);</span><br><span class="line">        List&lt;String&gt; configurations = <span class="keyword">this</span>.getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class="line">        configurations = <span class="keyword">this</span>.removeDuplicates(configurations);</span><br><span class="line">        Set&lt;String&gt; exclusions = <span class="keyword">this</span>.getExclusions(annotationMetadata, attributes);</span><br><span class="line">        <span class="keyword">this</span>.checkExcludedClasses(configurations, exclusions);</span><br><span class="line">        configurations.removeAll(exclusions);</span><br><span class="line">        configurations = <span class="keyword">this</span>.filter(configurations, autoConfigurationMetadata);</span><br><span class="line">        <span class="keyword">this</span>.fireAutoConfigurationImportEvents(configurations, exclusions);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AutoConfigurationImportSelector.AutoConfigurationEntry(configurations, exclusions);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们从中提取出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//selectImports里的代码</span></span><br><span class="line">AutoConfigurationImportSelector.AutoConfigurationEntry autoConfigurationEntry = <span class="keyword">this</span>.getAutoConfigurationEntry(autoConfigurationMetadata, annotationMetadata);</span><br><span class="line"></span><br><span class="line"><span class="comment">//getAutoConfigurationEntry里的代码</span></span><br><span class="line">List&lt;String&gt; configurations = <span class="keyword">this</span>.getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class="line"></span><br><span class="line"><span class="comment">//getCandidateConfigurations里的代码</span></span><br><span class="line">List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(<span class="keyword">this</span>.getSpringFactoriesLoaderFactoryClass(), <span class="keyword">this</span>.getBeanClassLoader());</span><br><span class="line"></span><br><span class="line"><span class="comment">//loadFactoryNames函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">loadFactoryNames</span><span class="params">(Class&lt;?&gt; factoryType, @Nullable ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">    String factoryTypeName = factoryType.getName();</span><br><span class="line">    <span class="keyword">return</span> (List)loadSpringFactories(classLoader).getOrDefault(factoryTypeName, Collections.emptyList());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//loadSpringFactories的代码</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(<span class="meta">@Nullable</span> ClassLoader classLoader) &#123;</span><br><span class="line">    MultiValueMap&lt;String, String&gt; result = (MultiValueMap)cache.get(classLoader);</span><br><span class="line">    <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Enumeration&lt;URL&gt; urls = classLoader != <span class="keyword">null</span> ? classLoader.getResources(<span class="string">"META-INF/spring.factories"</span>) : ClassLoader.getSystemResources(<span class="string">"META-INF/spring.factories"</span>);</span><br><span class="line">            LinkedMultiValueMap result = <span class="keyword">new</span> LinkedMultiValueMap();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(urls.hasMoreElements()) &#123;</span><br><span class="line">                URL url = (URL)urls.nextElement();</span><br><span class="line">                UrlResource resource = <span class="keyword">new</span> UrlResource(url);</span><br><span class="line">                Properties properties = PropertiesLoaderUtils.loadProperties(resource);</span><br><span class="line">                Iterator var6 = properties.entrySet().iterator();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span>(var6.hasNext()) &#123;</span><br><span class="line">                    Entry&lt;?, ?&gt; entry = (Entry)var6.next();</span><br><span class="line">                    String factoryTypeName = ((String)entry.getKey()).trim();</span><br><span class="line">                    String[] var9 = StringUtils.commaDelimitedListToStringArray((String)entry.getValue());</span><br><span class="line">                    <span class="keyword">int</span> var10 = var9.length;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> var11 = <span class="number">0</span>; var11 &lt; var10; ++var11) &#123;</span><br><span class="line">                        String factoryImplementationName = var9[var11];</span><br><span class="line">                        result.add(factoryTypeName, factoryImplementationName.trim());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            cache.put(classLoader, result);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var13) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unable to load factories from location [META-INF/spring.factories]"</span>, var13);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//扫描所有类路径的META-INF/spring.factories文件，把扫描到的这些文件的url得到，然后包装成Properties，然后从properties里获取一些值最后加在result里，这个result就是我们要交给容器中的所有组件，函数的参数classLoader就是从loadFactoryNames里传来的，loadFactoryNames的参数往上回溯就是上面提到的getCandidateConfigurations里的代码，再看getCandidateConfigurations的代码，查看getSpringFactoriesLoaderFactoryClass，可以看到</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//意思就是从properties中获取到EnableAutoConfiguration.class类名对应的值，然后把它们添加到容器中</span></span><br><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; getSpringFactoriesLoaderFactoryClass() &#123;</span><br><span class="line">    <span class="keyword">return</span> EnableAutoConfiguration<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//然后点开一个jar包(有的有，有的没有)，打开META-INF下面的spring.factories，发现了org.springframework.boot.autoconfigure.EnableAutoConfiguration=\......(已省略)这段代码，相当于把我们省略的这部分代码加到了容器中</span></span><br></pre></td></tr></table></figure>

<p><strong>总结一下就是，将类路径下META-INF/spring.factories里面配置的EnableAutoConfiguration的值加到了容器中，每一个省略代码里的xxxxAutoConfiguration类都加入到容器中，用它们来做自动配置</strong></p>
</li>
<li><p>每一个<strong>xxxxAutoConfiguration</strong>进行自动配置功能，我们以一个为例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  <span class="comment">//表示这是一个配置类，和以前的配置文件一样，也可以给容器添加组件</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123;SqlSessionFactory<span class="class">.<span class="keyword">class</span>, <span class="title">SqlSessionFactoryBean</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class">//<span class="title">spring</span>底层@<span class="title">Conditional</span>注解，根据不同条件，如果满足条件配置类才会生效，判断<span class="title">jar</span>包里有没有这些类</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnSingleCandidate</span>(<span class="title">DataSource</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class">//<span class="title">DataSource</span>.<span class="title">class</span>已经存在应用上下文时才会加载</span></span><br><span class="line"><span class="class">@<span class="title">EnableConfigurationProperties</span>(</span>&#123;MybatisProperties<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">//启用<span class="title">MybatisProperties</span>的<span class="title">ConfigurationProperties</span>功能，并放入<span class="title">ioc</span>容器</span></span><br><span class="line"><span class="class">@<span class="title">AutoConfigureAfter</span>(</span>&#123;DataSourceAutoConfiguration<span class="class">.<span class="keyword">class</span>, <span class="title">MybatisLanguageDriverAutoConfiguration</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class">//@<span class="title">AutoConfigureAfter</span>是加载配置的类后再加载当前类</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MybatisAutoConfiguration</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line">    <span class="comment">//properties这个properties已经与配置文件映射了，应为上面的@EnableConfigurationProperties</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MybatisProperties properties;</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">//这有一个有参构造器，参数的值就会从容器中拿</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MybatisAutoConfiguration</span><span class="params">(MybatisProperties properties, ObjectProvider&lt;Interceptor[]&gt; interceptorsProvider, ObjectProvider&lt;TypeHandler[]&gt; typeHandlersProvider, ObjectProvider&lt;LanguageDriver[]&gt; languageDriversProvider, ResourceLoader resourceLoader, ObjectProvider&lt;DatabaseIdProvider&gt; databaseIdProvider, ObjectProvider&lt;List&lt;ConfigurationCustomizer&gt;&gt; configurationCustomizersProvider)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.properties = properties;</span><br><span class="line">        <span class="keyword">this</span>.interceptors = (Interceptor[])interceptorsProvider.getIfAvailable();</span><br><span class="line">        <span class="keyword">this</span>.typeHandlers = (TypeHandler[])typeHandlersProvider.getIfAvailable();</span><br><span class="line">        <span class="keyword">this</span>.languageDrivers = (LanguageDriver[])languageDriversProvider.getIfAvailable();</span><br><span class="line">        <span class="keyword">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">        <span class="keyword">this</span>.databaseIdProvider = (DatabaseIdProvider)databaseIdProvider.getIfAvailable();</span><br><span class="line">        <span class="keyword">this</span>.configurationCustomizers = (List)configurationCustomizersProvider.getIfAvailable();</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">    <span class="meta">@Bean</span>  <span class="comment">//如果生效，给容器中添加一个组件，组件的某些值需要从properties中获取</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">sqlSessionFactory</span><span class="params">(DataSource dataSource)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SqlSessionFactoryBean factory = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        factory.setDataSource(dataSource);</span><br><span class="line">        factory.setVfs(SpringBootVFS<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(<span class="keyword">this</span>.properties.getConfigLocation())) &#123;</span><br><span class="line">            factory.setConfigLocation(<span class="keyword">this</span>.resourceLoader.getResource(<span class="keyword">this</span>.properties.getConfigLocation()));</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(</span><br><span class="line">    prefix = <span class="string">"mybatis"</span></span><br><span class="line">)  <span class="comment">//从配置文件中获取指定的值，所有在配置类中能配置的属性都在xxxProperties在封装着</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String MYBATIS_PREFIX = <span class="string">"mybatis"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ResourcePatternResolver resourceResolver = <span class="keyword">new</span> PathMatchingResourcePatternResolver();</span><br><span class="line">    <span class="keyword">private</span> String configLocation;</span><br><span class="line">    <span class="keyword">private</span> String[] mapperLocations;</span><br><span class="line">    <span class="keyword">private</span> String typeAliasesPackage;</span><br><span class="line">    <span class="keyword">private</span> Class&lt;?&gt; typeAliasesSuperType;</span><br><span class="line">    <span class="keyword">private</span> String typeHandlersPackage;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> checkConfigLocation = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> ExecutorType executorType;</span><br><span class="line">    <span class="keyword">private</span> Class&lt;? extends LanguageDriver&gt; defaultScriptingLanguageDriver;</span><br><span class="line">    <span class="keyword">private</span> Properties configurationProperties;</span><br><span class="line">    <span class="meta">@NestedConfigurationProperty</span></span><br><span class="line">    <span class="keyword">private</span> Configuration configuration;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MybatisProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>总结一下就是根据当前不同的条件，决定这个配置类是否生效，如果生效@Bean给容器中添加组件，这些组件的属性是从对应的properties类中获取的，类里的每一个属性又是和配置文件联系起来的</p>
</li>
</ol>
<p><strong>再次总结：</strong></p>
<ul>
<li>Spring Boot启动会加载大量的自动配置类</li>
<li>我们需要的功能有没有Spring Boot写好的自动配置类，再来看类里配置了哪些组件，如果有我们要用的组件，就不需要再来配置了</li>
<li>给容器中自动配置类添加组件的时候，会从properties类中获取属性，这些属性我们就可以在配置文件中指定这些属性的值</li>
</ul>
<h2 id="9、-Conditional、自动配置报告"><a href="#9、-Conditional、自动配置报告" class="headerlink" title="9、@Conditional、自动配置报告"></a>9、@Conditional、自动配置报告</h2><p><strong>@Conditional：</strong>必须是@Conditional指定的条件成立，才给容器中添加组件，配置类里面的所有内容才生效</p>
<table>
<thead>
<tr>
<th>@Conditional扩展注解</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>@ConditionalOnJava</td>
<td>系统的Java版本是否符合需求</td>
</tr>
<tr>
<td>@ConditionalBean</td>
<td>容器中存在指定的Bean</td>
</tr>
<tr>
<td>@ConditionalOnMissingBean</td>
<td>容器中不存在指定的Bean</td>
</tr>
<tr>
<td>@ConditionalOnExpression</td>
<td>满足SpEL表达式锁定</td>
</tr>
<tr>
<td>@ConditionalOnClass</td>
<td>系统中有指定的类</td>
</tr>
<tr>
<td>@ConditionalOnMissingClass</td>
<td>系统中没有指定的类</td>
</tr>
<tr>
<td>@ConditionalOnSingleCandidate</td>
<td>容器中只有一个指定的Bean，或者是首选Bean</td>
</tr>
<tr>
<td>@ConditionalOnProperty</td>
<td>系统中的指定属性是否有指定值</td>
</tr>
<tr>
<td>@ConditionalOnResource</td>
<td>类路径下是否有指定的资源文件</td>
</tr>
<tr>
<td>@ConditionalOnWebApplication</td>
<td>当前是Web环境</td>
</tr>
<tr>
<td>@ConditionalOnNotWebApplication</td>
<td>当前不是Web环境</td>
</tr>
<tr>
<td>@ConditionalOnJndi</td>
<td>JNDI存在指定项</td>
</tr>
</tbody></table>
<p>自动配置类必须在一定条件下才能生效，我们必须知道哪些生效，我们可以在<strong>application.properties</strong>中写入<strong>debug=true</strong>，意思是开启Spring Boot的debug模式，可以看到自动配置报告，<strong>positive matches：</strong>自动配置类启用哪些</p>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title>spring boot笔记--入门</title>
    <url>/spring-boot-start/</url>
    <content><![CDATA[<h1 id="一、Spring-Boot入门"><a href="#一、Spring-Boot入门" class="headerlink" title="一、Spring Boot入门"></a>一、Spring Boot入门</h1><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p><a href="https://spring.io/" target="_blank" rel="noopener">Spring官网</a></p>
<p>Spring boot来简化Spring应用开发的一个框架，整个Spring技术栈的一个大整合，约定大于配置，去繁从简，just run就能创立一个独立的，产品级别的应用</p>
<p><strong>背景：</strong> J2EE笨重的开发、配置繁多，复杂的部署流程、第三方技术集成压力大</p>
<a id="more"></a>

<p><strong>解决：</strong></p>
<ul>
<li>Spring Boot –&gt; J2EE一站式解决方案</li>
<li>Spring Cloud –&gt; 分布式整体解决方案</li>
</ul>
<p><strong>优点：</strong></p>
<ul>
<li>快速创建独立运行的Spring项目以及主流框架集成</li>
<li>使用嵌入式的Servlet容器，应用无需打成WAR包</li>
<li>starters自动依赖和版本控制</li>
<li>大量的自动配置，简化开发，也可修改默认值</li>
<li>无需配置XML，无代码生成，开箱即用</li>
<li>准生产环境的运行时应用监控</li>
<li>与云计算的天然集成</li>
</ul>
<p><strong>缺点：</strong> 易学难精</p>
<h2 id="2、微服务"><a href="#2、微服务" class="headerlink" title="2、微服务"></a>2、微服务</h2><p>2014年，Martin Fowler写了一篇文章，微服务是一种架构风格，一个应用应该是一组小型服务，可以通过HTTP进行通信。每一个功能元素都是可独立替换和升级的单元。</p>
<p>Spring Boot可以快速构建一个应用，Spring Cloud进行网状互连互调，Spring Cloud Data Flow在分布式中进行流式计算和批处理</p>
<img src="/spring-boot-start/spring%E6%B5%81%E7%A8%8B.jpg" class="" title="Spring项目流程">

<hr>
<blockquote><p>In short, the microservice architectural style is an approach to developing a single application as a suite of small services, each running in its own process and communicating with lightweight mechanisms, often an HTTP resource API. These services are built around business capabilities and independently deployable by fully automated deployment machinery. There is a bare minimum of centralized management of these services, which may be written in different programming languages and use different data storage technologies.</p>
<footer><strong>James Lewis and Martin Fowler (2014)</strong><cite><a href="https://martinfowler.com/microservices" target="_blank" rel="noopener">What are Microservices?</a></cite></footer></blockquote>

<hr>
<blockquote><p>简而言之，微服务架构风格是一种将单个应用程序开发为一组小服务的方法，每个小服务都在自己的进程中运行并与轻量级机制（通常是HTTP资源API）进行通信。 这些服务围绕业务功能构建，并且可以由全自动部署机制独立部署。 这些服务的集中管理几乎没有，可以用不同的编程语言编写并使用不同的数据存储技术。</p>
<footer><strong>James Lewis and Martin Fowler (2014)</strong><cite><a href="https://translate.google.cn/" target="_blank" rel="noopener">谷歌翻译</a></cite></footer></blockquote>



<h2 id="3、Hello-World"><a href="#3、Hello-World" class="headerlink" title="3、Hello World"></a>3、Hello World</h2><h3 id="3-1-快速创建一个Spring-Boot项目"><a href="#3-1-快速创建一个Spring-Boot项目" class="headerlink" title="3.1 快速创建一个Spring Boot项目"></a>3.1 快速创建一个Spring Boot项目</h3><ul>
<li><p>File–&gt;New–&gt;Project，选中Spring Initializr，默认点击next</p>
<img src="/spring-boot-start/springboot1.jpg" class="">
</li>
<li><p>填写Group、Artifact、Package，点击next</p>
<img src="/spring-boot-start/springboot2.jpg" class="">
</li>
<li><p>选择导入的模块，这里我们先只选Spring Web，点击next</p>
<img src="/spring-boot-start/springboot3.jpg" class="">
</li>
<li><p>填写Project name，点击Finish</p>
<img src="/spring-boot-start/springboot4.jpg" class="">
</li>
<li><p>在com.springboot.helloworld右键New Class，写入controller.HelloController，点击OK，在HelloController下写入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello Spring boot "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动主程序，在浏览器写入localhost:8080/hello即可成功</p>
</li>
<li><p>注意resources文件夹下</p>
<ul>
<li>static：保存所有的静态资源，如：js、css、images</li>
<li>templates：保存所有的模板界面</li>
<li>application.properties：Spring Boot的应用配置文件马可以修改一些默认设置</li>
</ul>
</li>
</ul>
<h3 id="3-2-POM文件"><a href="#3-2-POM文件" class="headerlink" title="3.2 POM文件"></a>3.2 POM文件</h3><h4 id="3-2-1-父项目"><a href="#3-2-1-父项目" class="headerlink" title="3.2.1 父项目"></a>3.2.1 父项目</h4><p>pom.xml文件开头引入父项目</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>按住<strong>Ctrl</strong>点击<strong>spring-boot-starter-parent</strong>，可以看到这个父项目还依赖一个父项目</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../../spring-boot-dependencies<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>再点击<strong>spring-boot-dependencies</strong>，可以看到定义了许多依赖的版本，他来管理<strong>Spring Boot</strong>里的所有依赖版本，以后我们导入依赖默认是不需要导入版本的(没有在<strong>dependencies</strong>里面的依赖自然需要声明版本号)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activemq.version</span>&gt;</span>5.15.11<span class="tag">&lt;/<span class="name">activemq.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">antlr2.version</span>&gt;</span>2.7.7<span class="tag">&lt;/<span class="name">antlr2.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appengine-sdk.version</span>&gt;</span>1.9.77<span class="tag">&lt;/<span class="name">appengine-sdk.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artemis.version</span>&gt;</span>2.10.1<span class="tag">&lt;/<span class="name">artemis.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aspectj.version</span>&gt;</span>1.9.5<span class="tag">&lt;/<span class="name">aspectj.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">assertj.version</span>&gt;</span>3.13.2<span class="tag">&lt;/<span class="name">assertj.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">atomikos.version</span>&gt;</span>4.0.6<span class="tag">&lt;/<span class="name">atomikos.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">awaitility.version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">awaitility.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bitronix.version</span>&gt;</span>2.1.4<span class="tag">&lt;/<span class="name">bitronix.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build-helper-maven-plugin.version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">build-helper-maven-plugin.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">byte-buddy.version</span>&gt;</span>1.10.4<span class="tag">&lt;/<span class="name">byte-buddy.version</span>&gt;</span></span><br><span class="line">    ......</span><br></pre></td></tr></table></figure>

<h4 id="3-2-2-导入的依赖"><a href="#3-2-2-导入的依赖" class="headerlink" title="3.2.2 导入的依赖"></a>3.2.2 导入的依赖</h4><p><strong>JAR</strong>包是有谁导入的，我们继续看<strong>pom.xml</strong>可以看到</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以看到<strong>spring-boot-starter-web</strong>与父项目的<strong>spring-boot-starter-parent</strong>有一个共有的<strong>spring-boot-starter</strong></p>
<p><strong>spring-boot-starter</strong>是Spring Boot<strong>场景启动器</strong></p>
<p>点击<strong>spring-boot-starter-web</strong>可以看到它也有一些依赖导入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span><span class="comment">&lt;!-- 依赖spring-boot-starter基础项目 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span><span class="comment">&lt;!-- 依赖json --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span><span class="comment">&lt;!-- 依赖tomcat --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span><span class="comment">&lt;!-- 依赖数据校验 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-el<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>帮我们导入了web模块正常运行所依赖的组件</p>
<p>Spring Boot将所有的场景功能都抽取出来，做成一个个starters(启动器)，只需要在项目里引入这些starter，相关场景的所有依赖都会导入进来。</p>
<h3 id="3-3-主程序类"><a href="#3-3-主程序类" class="headerlink" title="3.3 主程序类"></a>3.3 主程序类</h3><h4 id="3-3-1-注解"><a href="#3-3-1-注解" class="headerlink" title="3.3.1 注解"></a>3.3.1 注解</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>()</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldMainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(HelloWorldMainApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>@SpringBootApplication()</strong></li>
</ul>
<p>Spring Boot标注在某个类上说明这个类是Spring Boot的主配置类，Spring Boot就应该运行这个类的main方法来启动Spring Boot应用</p>
<p>我们点击它来查看，发现它是一个组合注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(</span><br><span class="line">    excludeFilters = &#123;<span class="meta">@Filter</span>(</span><br><span class="line">    type = FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;TypeExcludeFilter<span class="class">.<span class="keyword">class</span>&#125;</span></span><br><span class="line"><span class="class">), @<span class="title">Filter</span>(</span></span><br><span class="line"><span class="class">    <span class="title">type</span> </span>= FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;AutoConfigurationExcludeFilter<span class="class">.<span class="keyword">class</span>&#125;</span></span><br><span class="line"><span class="class">)&#125;</span></span><br><span class="line"><span class="class">)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">SpringBootApplication</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>@SpringBootConfiguration</strong></li>
</ul>
<p>Spring Boot配置，它标注在某个类上表示这个一个Spring Boot配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration &#123;</span><br></pre></td></tr></table></figure>

<p>点击<strong>@SpringBootConfiguration</strong>，可以看到<strong>@Configuration</strong>，这就是Spring最底层的一个注解，配置类上来标注这个注解。配置类——配置文件，配置类也是一个组件<strong>@Component</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Configuration &#123;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>@EnableAutoConfiguration</strong></li>
</ul>
<p>还可以看到一个<strong>@EnableAutoConfiguration</strong>，作用是开启自动配置功能，Spring Boot帮我们自动配置，我们可以点开查看</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;AutoConfigurationImportSelector<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableAutoConfiguration</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<p><strong>@AutoConfigurationPackage</strong>自动配置包</p>
<p>点开来看</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;Registrar<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">AutoConfigurationPackage</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<p><strong>@Import({Registrar.class})</strong>，<strong>@import</strong>：Spring的底层注解，给容器中导入一个组件，点击<strong>Registrar.class</strong>，查看这个类</p>
<p>可以看到下面这个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">    AutoConfigurationPackages.register(registry, (<span class="keyword">new</span> AutoConfigurationPackages.PackageImport(metadata)).getPackageName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们在<strong>AutoConfigurationPackages.register</strong>这一行加一个断点，并debug运行，可以发现<strong>metadata</strong>是我们注解的原信息<strong>@SpringBootApplication()</strong>，我们还可以拉动鼠标选中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">new</span> AutoConfigurationPackages.PackageImport(metadata)).getPackageName()</span><br></pre></td></tr></table></figure>

<p>点击右键选择<strong>Evaluate Expression</strong>，点击<strong>Evaluate</strong>按钮，可以看到result就等于我们的包名</p>
<p>所以<strong>@AutoConfigurationPackage</strong>就是将主配置类<strong>@SpringBootApplication()</strong>标注的类所在包及下面所有子包里面的所有组件扫描到容器中</p>
<p><strong>@EnableAutoConfiguration</strong>里还有一个注解</p>
<p><strong>@Import({AutoConfigurationImportSelector.class})</strong>，点进去查看</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br></pre></td></tr></table></figure>

<p>发现<strong>selectImports</strong>将所有需要导入的组件全类名的方式返回，这些组件就会被添加到容器中，我们通过debug可以发现导入的组件中有很多的自动配置类，就是给容器导入场景所需要的组件并配置好</p>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>入门</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客图片插入并上传GitHub的问题</title>
    <url>/hexo%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E6%8F%92%E5%85%A5%E5%B9%B6%E4%B8%8A%E4%BC%A0GitHub%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="hexo上传图片的问题"><a href="#hexo上传图片的问题" class="headerlink" title="hexo上传图片的问题"></a>hexo上传图片的问题</h1><p>由于要将hexo博客里的文件上传到GitHub，如何上传图片资源并且在GitHub实时显示出来。</p>
<p>首先设置<strong>_config.yml</strong>文件，将<strong>post-asset-folder</strong>字段设定为<strong>true</strong></p>
<p>然后可在生成md文档时在同目录下生成一个同名的文件夹</p>
<a id="more"></a>

<p>然后可以查找<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo文档</a>，在<em>目录</em>-<em>标签插件</em>-<em>引用资源</em>可以看到</p>
<img src="/hexo%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E6%8F%92%E5%85%A5%E5%B9%B6%E4%B8%8A%E4%BC%A0GitHub%E7%9A%84%E9%97%AE%E9%A2%98/%E5%BC%95%E7%94%A8%E5%9B%BE%E7%89%87.jpg" class="" title="hexo博客图片插入并上传GitHub的问题">

<p>代码示例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% asset_img 引用图片.jpg hexo博客图片插入并上传GitHub的问题 %&#125;</span><br></pre></td></tr></table></figure>

<p>之后上传到GitHub就可以显示图片了。</p>
]]></content>
  </entry>
  <entry>
    <title>first blog</title>
    <url>/first-blog/</url>
    <content><![CDATA[<h2 id="我的hexo博客"><a href="#我的hexo博客" class="headerlink" title="我的hexo博客"></a>我的hexo博客</h2><p>2019.12.15</p>
<hr>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>String boot</p>
<h2 id="test"><a href="#test" class="headerlink" title="test"></a>test</h2>]]></content>
  </entry>
</search>
