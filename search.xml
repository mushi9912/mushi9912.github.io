<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>spring-boot笔记--缓存</title>
    <url>/spring-Boot-cache/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Spring Boot</category>
        <category>cache</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>cache</tag>
        <tag>缓存</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-boot笔记--数据访问</title>
    <url>/spring-boot-data/</url>
    <content><![CDATA[<h1 id="五、Spring-Boot与数据访问"><a href="#五、Spring-Boot与数据访问" class="headerlink" title="五、Spring Boot与数据访问"></a>五、Spring Boot与数据访问</h1><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p>Spring Boot在数据访问层，无论是SQL还是NOSQL，Spring Boot默认使用Spring Data进行整合，添加了大量的自动配置，引入了各种xxxTemplate，xxxRepository来简化我们对数据访问层的操作，我们只需要进行简单的设置即可</p>
<h2 id="2、整合基本的JDBC和数据源"><a href="#2、整合基本的JDBC和数据源" class="headerlink" title="2、整合基本的JDBC和数据源"></a>2、整合基本的JDBC和数据源</h2><p>我们使用基本的JDBC和MySQL驱动，先在pom.xml引入依赖</p>
<a id="more"></a>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后在application.properties中写入</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">datasource</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">username</span>: <span class="string">root</span></span><br><span class="line">    <span class="attr">password</span>: <span class="string">xxxxxx</span></span><br><span class="line">    <span class="attr">url</span>: <span class="string">jdbc:mysql://localhost:3306/jdbc?serverTimezone=UTC</span></span><br><span class="line"><span class="comment">    # 如果不加?serverTimezone=UTC会报错</span></span><br><span class="line">    <span class="meta">driver-class-name</span>: <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment">    # driver-class-name可以不用加</span></span><br></pre></td></tr></table></figure>

<p>我们在ApplicationTests中测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">DataSource dataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    System.out.println(dataSource.getClass());</span><br><span class="line">    Connection connection = dataSource.getConnection();</span><br><span class="line">    System.out.println(connection);</span><br><span class="line">    connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以查看数据源相关配置的源文件,都在<strong>DataSourceProperties</strong>里面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(</span><br><span class="line">    prefix = <span class="string">"spring.datasource"</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceProperties</span> <span class="keyword">implements</span> <span class="title">BeanClassLoaderAware</span>, <span class="title">InitializingBean</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<p>自动配置原理</p>
<p>自动配置都在org.springframework.boot.autoconfigure.jdbc里面</p>
<ol>
<li><p>参考DataSourceConfiguration，根据相关配置创建数据源，默认使用Tomcat连接池，可以指定spring.datasource.type的属性来配置自定义的数据源</p>
</li>
<li><p>Spring Boot默认可以支持BasicDataSource、HikariDataSource、org.apache.tomcat.jdbc.pool.DataSource、</p>
</li>
<li><p>自定义数据源</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(</span><br><span class="line">    proxyBeanMethods = <span class="keyword">false</span></span><br><span class="line">)</span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(&#123;DataSource<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnProperty</span>(</span></span><br><span class="line"><span class="class">    <span class="title">name</span> </span>= &#123;<span class="string">"spring.datasource.type"</span>&#125;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Generic</span> </span>&#123;</span><br><span class="line">    Generic() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">DataSource <span class="title">dataSource</span><span class="params">(DataSourceProperties properties)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//initializeDataSourceBuilder返回DataSourceBuilder创建数据源，利用反射响应type的数据源，并且绑定相关属性</span></span><br><span class="line">        <span class="keyword">return</span> properties.initializeDataSourceBuilder().build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>现在看DataSourceAutoConfiguration类，它引入了一个DataSourceInitializationConfiguration类，而DataSourceInitializationConfiguration类又引入了一个DataSourceInitializerInvoker类</p>
<p>DataSourceInitializerInvoker类作用，可以自动运行建表语句和插入数据的sql语句</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">schema-*.sql</span>  <span class="string">data-*.sql</span></span><br><span class="line"><span class="attr">默认写为：schema.sql或者schema-all.sql都可以</span></span><br><span class="line"><span class="attr">也可以自己设置路径</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">datasource</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">username</span>: <span class="string">root</span></span><br><span class="line">    <span class="attr">password</span>: <span class="string">123456</span></span><br><span class="line">    <span class="attr">url</span>: <span class="string">jdbc:mysql://localhost:3306/jdbc?serverTimezone=UTC</span></span><br><span class="line">    <span class="meta">//Spring</span> <span class="string">Boot2.0以上都得配置initialization-mode: always</span></span><br><span class="line">    <span class="meta">initialization-mode</span>: <span class="string">always</span></span><br><span class="line">    <span class="attr">//设置自定义sql文件路径</span></span><br><span class="line">    <span class="attr">schema</span>:<span class="string"></span></span><br><span class="line">      <span class="meta">-</span> <span class="string">classpath:sql_schema.sql</span></span><br><span class="line"></span><br><span class="line"><span class="attr">这里还有我自己遇到的一个坑</span></span><br><span class="line"><span class="meta">sql文件里的创建表语句必须在末尾加上';'，例如下面如果最后一个')'后不加';'是可以在Navicat里运行的，但是在Spring</span> <span class="string">Boot的sql文件里必须加上';'，否则会报错</span></span><br><span class="line"><span class="attr">CREATE</span> <span class="string">TABLE IF NOT EXISTS `jdbc_student_schema`(</span></span><br><span class="line">		<span class="meta">`id`</span> <span class="string">INTEGER AUTO_INCREMENT,</span></span><br><span class="line">		<span class="meta">`name`</span> <span class="string">VARCHAR(10) NOT NULL,</span></span><br><span class="line">		<span class="meta">`gender`</span> <span class="string">VARCHAR(1) not null,</span></span><br><span class="line">		<span class="meta">`card`</span> <span class="string">VARCHAR(16) not null,</span></span><br><span class="line">		<span class="meta">`date`</span> <span class="string">date,</span></span><br><span class="line">		<span class="attr">PRIMARY</span> <span class="string">KEY(`id`)</span></span><br><span class="line"><span class="attr">);</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>自动配置了JdbcTemplate来操作数据库</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; maps = jdbcTemplate.queryForList(<span class="string">"select * from jdbc_student"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(maps);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> maps.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问localhost:8080/hello，数据返回了</p>
</li>
</ol>
<h2 id="3、整合Druid数据源"><a href="#3、整合Druid数据源" class="headerlink" title="3、整合Druid数据源"></a>3、整合Druid数据源</h2><p><strong>配置属性</strong></p>
<p>Druid Spring Boot Starter 配置属性的名称完全遵照 Druid，你可以通过 Spring Boot 配置文件来配置Druid数据库连接池和监控，如果没有配置则使用默认值。</p>
<ul>
<li>JDBC 配置</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.druid.url</span>= <span class="string"># 或spring.datasource.url= </span></span><br><span class="line"><span class="meta">spring.datasource.druid.username</span>= <span class="string"># 或spring.datasource.username=</span></span><br><span class="line"><span class="meta">spring.datasource.druid.password</span>= <span class="string"># 或spring.datasource.password=</span></span><br><span class="line"><span class="meta">spring.datasource.druid.driver-class-name</span>= <span class="string">#或 spring.datasource.driver-class-name=</span></span><br></pre></td></tr></table></figure>

<ul>
<li>连接池配置</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.druid.initial-size</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.datasource.druid.max-active</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.datasource.druid.min-idle</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.datasource.druid.max-wait</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.datasource.druid.pool-prepared-statements</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.datasource.druid.max-pool-prepared-statement-per-connection-size</span>= <span class="string"></span></span><br><span class="line"><span class="meta">spring.datasource.druid.max-open-prepared-statements</span>= <span class="string">#和上面的等价</span></span><br><span class="line"><span class="meta">spring.datasource.druid.validation-query</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.datasource.druid.validation-query-timeout</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.datasource.druid.test-on-borrow</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.datasource.druid.test-on-return</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.datasource.druid.test-while-idle</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.datasource.druid.time-between-eviction-runs-millis</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.datasource.druid.min-evictable-idle-time-millis</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.datasource.druid.max-evictable-idle-time-millis</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.datasource.druid.filters</span>= <span class="string">#配置多个英文逗号分隔</span></span><br><span class="line"><span class="attr">....//more</span></span><br></pre></td></tr></table></figure>

<ul>
<li>监控配置</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># WebStatFilter配置，说明请参考Druid Wiki，配置_配置WebStatFilter</span></span><br><span class="line"><span class="meta">spring.datasource.druid.web-stat-filter.enabled</span>= <span class="string">#是否启用StatFilter默认值false</span></span><br><span class="line"><span class="meta">spring.datasource.druid.web-stat-filter.url-pattern</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.datasource.druid.web-stat-filter.exclusions</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.datasource.druid.web-stat-filter.session-stat-enable</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.datasource.druid.web-stat-filter.session-stat-max-count</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.datasource.druid.web-stat-filter.principal-session-name</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.datasource.druid.web-stat-filter.principal-cookie-name</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.datasource.druid.web-stat-filter.profile-enable</span>=<span class="string"></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># StatViewServlet配置，说明请参考Druid Wiki，配置_StatViewServlet配置</span></span><br><span class="line"><span class="meta">spring.datasource.druid.stat-view-servlet.enabled</span>= <span class="string">#是否启用StatViewServlet（监控页面）默认值为false（考虑到安全问题默认并未启动，如需启用建议设置密码或白名单以保障安全）</span></span><br><span class="line"><span class="meta">spring.datasource.druid.stat-view-servlet.url-pattern</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.datasource.druid.stat-view-servlet.reset-enable</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.datasource.druid.stat-view-servlet.login-username</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.datasource.druid.stat-view-servlet.login-password</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.datasource.druid.stat-view-servlet.allow</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.datasource.druid.stat-view-servlet.deny</span>=<span class="string"></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Spring监控配置，说明请参考Druid Github Wiki，配置_Druid和Spring关联监控配置</span></span><br><span class="line"><span class="meta">spring.datasource.druid.aop-patterns</span>= <span class="string"># Spring监控AOP切入点，如x.y.z.service.*,配置多个英文逗号分隔</span></span><br></pre></td></tr></table></figure>

<h2 id="4、整合MyBatis"><a href="#4、整合MyBatis" class="headerlink" title="4、整合MyBatis"></a>4、整合MyBatis</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/jdbc?serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">initial-size:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">20</span></span><br><span class="line">      <span class="attr">max-wait:</span> <span class="number">60000</span></span><br><span class="line">      <span class="attr">time-between-eviction-runs-millis:</span> <span class="number">60000</span></span><br><span class="line">      <span class="attr">min-evictable-idle-time-millis:</span> <span class="number">300000</span></span><br><span class="line">      <span class="attr">validation-query:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">      <span class="attr">test-while-idle:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">test-on-borrow:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">test-on-return:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">pool-prepared-statements:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">filters:</span> <span class="string">stat,</span> <span class="string">wall,</span> <span class="string">slf4j</span></span><br><span class="line">      <span class="attr">max-pool-prepared-statement-per-connection-size:</span> <span class="number">20</span></span><br><span class="line">      <span class="attr">use-global-data-source-stat:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">connect-properties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br><span class="line">      <span class="attr">stat-view-servlet:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">url-pattern:</span> <span class="string">/druid/*</span></span><br><span class="line">        <span class="attr">login-username:</span> <span class="string">admin</span></span><br><span class="line">        <span class="attr">login-password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure>

<p>最后创建与数据表对应的JavaBean</p>
<h3 id="4-1、注解版MyBatis"><a href="#4-1、注解版MyBatis" class="headerlink" title="4.1、注解版MyBatis"></a>4.1、注解版MyBatis</h3><p>创建一个mapper类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//指定这是一个操作数据库的mapper</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from jdbc_student where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">getStudentById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from jdbc_student where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">	</span><br><span class="line">    <span class="meta">@Options</span>(useGeneratedKeys = <span class="keyword">true</span>, keyProperty = <span class="string">"id"</span>)</span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into jdbc_student(name, gender, card, date) values(#&#123;name&#125;, #&#123;gender&#125;, #&#123;card&#125;, #&#123;date&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertStudent</span><span class="params">(Student student)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"update jdbc_student set name=#&#123;name&#125;, gender=#&#123;gender&#125;, card=#&#123;card&#125;, date=#&#123;date&#125; where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateStudent</span><span class="params">(Student student)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在controller里测试它</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StudentMapper studentMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/stu/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">getStudent</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> studentMapper.getStudentById(id);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/stu"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">insertStudent</span><span class="params">(Student student)</span></span>&#123;</span><br><span class="line">        studentMapper.insertStudent(student);</span><br><span class="line">        <span class="keyword">return</span> student;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自定义MyBatis的配置规则，只需要在容器中添加一个ConfigurationCustomizer</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConfigurationCustomizer <span class="title">configurationCustomizer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConfigurationCustomizer() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(org.apache.ibatis.session.Configuration configuration)</span> </span>&#123;</span><br><span class="line">                configuration.setMapUnderscoreToCamelCase(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>批量扫描mapper，这样就不必在每个mapper前面加@Mapper注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan</span>(value = <span class="string">"com.xxx.xxx.mapper"</span>)</span><br></pre></td></tr></table></figure>

<h3 id="4-2、配置版MyBatis"><a href="#4-2、配置版MyBatis" class="headerlink" title="4.2、配置版MyBatis"></a>4.2、配置版MyBatis</h3><p>创建另一个mapper类和对应 的Javabean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ShareMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Share <span class="title">getShareById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertShare</span><span class="params">(Share share)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteShare</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateShare</span><span class="params">(Share share)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建全局配置文件mybatis-config.xml和mapper对应的xml文件ShareMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--ShareMapper.xml--&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.spring.mybatis.mapper.ShareMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getShareById"</span> <span class="attr">resultType</span>=<span class="string">"com.spring.mybatis.bean.Share"</span> &gt;</span></span><br><span class="line">        select * from jdbc_share where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertShare"</span> <span class="attr">parameterType</span>=<span class="string">"com.spring.mybatis.bean.Share"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">        insert into jdbc_share(tscode, name) value (#&#123;tscode&#125;, #&#123;name&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteShare"</span> <span class="attr">parameterType</span>=<span class="string">"com.spring.mybatis.bean.Share"</span>&gt;</span></span><br><span class="line">        delete jdbc_share where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateShare"</span> <span class="attr">parameterType</span>=<span class="string">"com.spring.mybatis.bean.Share"</span>&gt;</span></span><br><span class="line">        update jdbc_student set tscode=#&#123;tscode&#125;, name=#&#123;name&#125; where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis-config.xml--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--驼峰命名法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后在spplication.yml中配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">config-location:</span> <span class="string">classpath:mybatis/mybatis-config.xml</span></span><br><span class="line">  <span class="comment"># 全局配置文件</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span></span><br><span class="line">  <span class="comment"># 所有在路径下的.xml文件</span></span><br></pre></td></tr></table></figure>

<h2 id="5、整合JPA"><a href="#5、整合JPA" class="headerlink" title="5、整合JPA"></a>5、整合JPA</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>JPA也是基于ORM思想的，即Object、Relational、Mapping</p>
<ol>
<li><p>编写一个实体类（bean）和数据表进行映射，并且配置好映射关系</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span>()</span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"jdbc_share"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Share</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这是一个主键</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这是和数据表对应的一个列</span></span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> String tscode;</span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Getter、Setter方法</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写一个Dao接口来操作实体类对应的数据表</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//继承JpaRepository完成对数据库的操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ShareRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Share</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>yml基本配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/jdbc</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="comment"># 更新或创建表结构</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">update</span></span><br><span class="line">    <span class="comment"># 控制台显示sql</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>在controller里进行查找插入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShareController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ShareRepository shareRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/share/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Share <span class="title">getShare</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line">        Share share = shareRepository.findById(id).get();</span><br><span class="line">        <span class="keyword">return</span> share;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/share"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Share <span class="title">insertShare</span><span class="params">(Share share)</span></span>&#123;</span><br><span class="line">        Share save = shareRepository.save(share);</span><br><span class="line">        <span class="keyword">return</span> save;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Spring Boot</category>
        <category>Spring Data</category>
        <category>MyBatis</category>
        <category>JDBC</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>JDBC</tag>
        <tag>Druid</tag>
        <tag>MySQL</tag>
        <tag>MyBatis</tag>
        <tag>JPA</tag>
        <tag>Spring Data</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue笔记—--初步学习</title>
    <url>/vue-start/</url>
    <content><![CDATA[<h1 id="一、初识Vue"><a href="#一、初识Vue" class="headerlink" title="一、初识Vue"></a>一、初识Vue</h1><h2 id="1、Vue介绍"><a href="#1、Vue介绍" class="headerlink" title="1、Vue介绍"></a>1、Vue介绍</h2><p>作者所用软件为vscode</p>
<p>vscode相关快捷键</p>
<ol>
<li>显示资源管理器：<strong>Ctrl + Shift + E</strong></li>
<li>显示搜索： <strong>Ctrl + Shift + F</strong></li>
<li>显示git：<strong>Ctrl + Shift + G</strong></li>
<li>显示Debug：<strong>Ctrl + Shift + D</strong></li>
<li>显示终端：<strong>Ctrl + Shift + C</strong></li>
<li>新建vscode终端：<strong>Ctrl + Shift + `</strong></li>
</ol>
<a id="more"></a>

<p>注释</p>
<ol>
<li>单行注释：<strong>Ctrl + /</strong></li>
<li>多行注释：<strong>Shift + Alt + /</strong></li>
</ol>
<p>查找替换</p>
<ol>
<li>查找：<strong>Ctrl + F</strong></li>
<li>全局查找： <strong>Ctrl + Shift + F</strong></li>
<li>查找替换：<strong>Ctrl + H</strong></li>
</ol>
<p>光标</p>
<ol>
<li>移动到行首： <strong>Home</strong></li>
<li>移动到行尾：<strong>End</strong></li>
<li>移动到文件头部：<strong>Ctrl + Home</strong></li>
<li>移动到文件结尾：<strong>Ctrl + End</strong></li>
<li>选择光标到行首：<strong>Shift + Home</strong></li>
<li>选择光标到行尾：<strong>Shift + End</strong></li>
<li>行内小范围选择：<strong>Ctrl + Shift + Right / Left</strong></li>
<li>选择多行复制到行上：<strong>Shift + Alt + Top</strong></li>
<li>选择多行复制到行下：<strong>Shift + Alt + Bottom</strong></li>
<li>同时选中所有匹配项：<strong>Ctrl + Shift + L</strong></li>
<li>回退到上一个光标：<strong>Ctrl + U</strong></li>
<li>光标行移动到上一行：<strong>Alt + Top</strong></li>
<li>光标行移动到下一行：<strong>Alt + Bottom</strong></li>
<li>折叠光标行内代码：<strong>Ctrl + Shift + 【</strong></li>
<li>展开光标行内代码：<strong>Ctrl + Shift + 】</strong></li>
</ol>
<h2 id="2、HelloVue"><a href="#2、HelloVue" class="headerlink" title="2、HelloVue"></a>2、HelloVue</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// let 变量 const 常量</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> test =  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">'#test'</span>, <span class="comment">//用于挂载要管理的元素</span></span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                message: <span class="string">"qwer"</span></span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 将data的元素放入原html的位置</span></span></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3、列表展示"><a href="#3、列表展示" class="headerlink" title="3、列表展示"></a>3、列表展示</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in games"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        &#123;&#123;games&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">'#app'</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                message: <span class="string">'list测试'</span>,</span></span><br><span class="line"><span class="actionscript">                games: [<span class="string">'Mincraft'</span>, <span class="string">'Warcraft III'</span>, <span class="string">'Ori'</span>]</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4、计数器案例"><a href="#4、计数器案例" class="headerlink" title="4、计数器案例"></a>4、计数器案例</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前计数：&#123;&#123;counter&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">            整体也可以这么写</span></span><br><span class="line"><span class="comment">            &lt;button v-on:click="counter++"&gt;+&lt;/button&gt;</span></span><br><span class="line"><span class="comment">            &lt;button v-on:click="counter--"&gt;-&lt;/button&gt;</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"add"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"sub"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">            v-on:click可用@click代替</span></span><br><span class="line"><span class="comment">            @click是一个语法糖</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">'#app'</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line">                counter: 0</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line"><span class="actionscript">                add: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.counter++</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">'add执行'</span>);</span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="actionscript">                sub: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.counter--</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">'sub执行'</span>);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5、Vue中的MVVM"><a href="#5、Vue中的MVVM" class="headerlink" title="5、Vue中的MVVM"></a>5、Vue中的MVVM</h2><ul>
<li><p>View层</p>
<ul>
<li>视图层</li>
<li>在前端开发中，通常就是DOM层</li>
<li>只要作用是给用户展示各种信息</li>
</ul>
</li>
<li><p>Model层</p>
<ul>
<li><p>数据层</p>
</li>
<li><p>数据可以是写死的数据，更多是来自服务器和网络请求的数据</p>
</li>
</ul>
</li>
<li><p>VueModel层</p>
<ul>
<li>视图模型层</li>
<li>视图模型层是View和Model沟通的桥梁</li>
<li>一方面实现了Data Binding，也就是数据绑定，将Model的改变实时的反应到View中</li>
<li>另一方面它实现了DOM Listener，也就是DOM监听，当DOM发生一些时间点击、滚动、touch等时，可以监听到，并在需要的情况下改变对应的Data</li>
</ul>
</li>
</ul>
<p>在这里有一个初步理解，例如计数器的counter的值，如果设置一个常量num，然后让data: num，无论this.counter++可以得到num里面的counter值并加一，还是num.counter++直接改变数据的值都是一样的，初步理解为Vue将常量里的值加到new Vue里使它们成为了一个整体</p>
<h2 id="6、options包括的选项和Vue的生命周期"><a href="#6、options包括的选项和Vue的生命周期" class="headerlink" title="6、options包括的选项和Vue的生命周期"></a>6、options包括的选项和Vue的生命周期</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">el: string|HTMLElement </span><br><span class="line">决定之后Vue实例会管理哪一个DOM</span><br><span class="line">el: '#app',</span><br><span class="line">// el: document.querySelector(),</span><br><span class="line"></span><br><span class="line">data: Object|Function（在组建当中data必须是一个函数）</span><br><span class="line">Vue实例对应的数据对象</span><br><span class="line"></span><br><span class="line">methods: &#123;[key:string]:Function&#125;</span><br><span class="line">定义属于Vue的一些方法，可以在其它方法调用，也可以在指令中使用</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
        <category>Vuejs</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-boot笔记--Web开发</title>
    <url>/spring-boot-Web/</url>
    <content><![CDATA[<h1 id="四、Spring-Boot与Web开发"><a href="#四、Spring-Boot与Web开发" class="headerlink" title="四、Spring Boot与Web开发"></a>四、Spring Boot与Web开发</h1><h2 id="1、使用Spring-Boot"><a href="#1、使用Spring-Boot" class="headerlink" title="1、使用Spring Boot"></a>1、使用Spring Boot</h2><ol>
<li><p>创建Spring Boot应用，选中我们需要的模块，Spring Boot默认将选中的模块配置好了，我们只需要在配置文件中指定少量的配置就可以运行</p>
<p><strong>自动配置原理：</strong>根据之前的Spring Boot配置文章中的原理</p>
</li>
<li><p>自己编写业务逻辑代码</p>
</li>
</ol>
<a id="more"></a>

<h2 id="2、Spring-Boot静态资源的映射"><a href="#2、Spring-Boot静态资源的映射" class="headerlink" title="2、Spring Boot静态资源的映射"></a>2、Spring Boot静态资源的映射</h2><p>在<strong>WebMvcAutoConfiguration</strong>下我们可以找到下面这个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">        logger.debug(<span class="string">"Default resource handling disabled"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Duration cachePeriod = <span class="keyword">this</span>.resourceProperties.getCache().getPeriod();</span><br><span class="line">        CacheControl cacheControl = <span class="keyword">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();</span><br><span class="line">        <span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">"/webjars/**"</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="keyword">new</span> String[]&#123;<span class="string">"/webjars/**"</span>&#125;).addResourceLocations(<span class="keyword">new</span> String[]&#123;<span class="string">"classpath:/META-INF/resources/webjars/"</span>&#125;).setCachePeriod(<span class="keyword">this</span>.getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line">        <span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="keyword">new</span> String[]&#123;staticPathPattern&#125;).addResourceLocations(WebMvcAutoConfiguration.getResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations())).setCachePeriod(<span class="keyword">this</span>.getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//欢迎页映射</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WelcomePageHandlerMapping <span class="title">welcomePageHandlerMapping</span><span class="params">(ApplicationContext applicationContext, FormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider)</span> </span>&#123;</span><br><span class="line">    WelcomePageHandlerMapping welcomePageHandlerMapping = <span class="keyword">new</span> WelcomePageHandlerMapping(<span class="keyword">new</span> TemplateAvailabilityProviders(applicationContext), applicationContext, <span class="keyword">this</span>.getWelcomePage(), <span class="keyword">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class="line">    welcomePageHandlerMapping.setInterceptors(<span class="keyword">this</span>.getInterceptors(mvcConversionService, mvcResourceUrlProvider));</span><br><span class="line">    <span class="keyword">return</span> welcomePageHandlerMapping;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>所有<strong>/webjars/**</strong>的请求都去<strong>classpath:/META-INF/resources/webjars/</strong>找资源，webjars就是以jar包的方式引入静态资源</p>
<p><a href="https://www.webjars.org/" target="_blank" rel="noopener">webjars官网</a>，在官网中我们可以看到一些静态资源我们可以以maven的方式导入</p>
</li>
<li><p><strong>/**</strong>为访问当前项目的任何资源，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">"classpath:/META-INF/resources/"</span></span><br><span class="line"><span class="string">"classpath:/resources/"</span></span><br><span class="line"><span class="string">"classpath:/static/"</span></span><br><span class="line"><span class="string">"classpath:/public/"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>欢迎页映射，从2中路径下查找index.html</p>
</li>
<li><p>我们也可以自己设置静态资源的路径</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.resources.static-locations</span>=<span class="string">classpath:/sp/,classpath:/sp1/</span></span><br><span class="line"><span class="attr">多个文件用逗号分割</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="3、Spring-Boot模板引擎"><a href="#3、Spring-Boot模板引擎" class="headerlink" title="3、Spring Boot模板引擎"></a>3、Spring Boot模板引擎</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们把html页面放在classpath:/template/下，thymeleaf就能自动渲染</p>
<ol>
<li><p>导入thymeleaf的名称空间</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用thymeleaf</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_ENCODING;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">"classpath:/templates/"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">".html"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> checkTemplate = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> checkTemplateLocation = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> String prefix = <span class="string">"classpath:/templates/"</span>;</span><br><span class="line">    <span class="keyword">private</span> String suffix = <span class="string">".html"</span>;</span><br><span class="line">    <span class="keyword">private</span> String mode = <span class="string">"HTML"</span>;</span><br><span class="line">    <span class="comment">//只要我们把HTML页面放在classpath:/templates/下，thymeleaf就能帮我们渲染</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"$&#123;hello&#125;"</span>&gt;</span></span><br><span class="line">		这里是欢迎信息</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>语法规则</p>
<p>th:text 改变当前元素的文本内容</p>
<p>th:insert th:replace 片段包含</p>
<p>th:each 遍历</p>
<p>th:if th:unless th:switch th:case 条件判断</p>
<p>th:object th:with 声明变量</p>
<p>th:attr th:attrprepend th:attrappend 任意属性修改</p>
<p>th:value th:src th:href 修改指定属性默认值</p>
<p>th:text th:utext 修改标签体内容，utext不转义特殊字符</p>
<p>${…} 获取变量属性，调用方法</p>
<p>*{…} 在功能上和${…}一样</p>
<p>#{…} 获取国际化内容</p>
<p>@{…} 定义url</p>
<p>~{…} 片段引用</p>
<p>更多的请查看官方thymeleaf文档</p>
</li>
<li><p>Spring Boot MVC</p>
<p><strong>Spring MVC Auto-configuration</strong></p>
<p>Spring Boot provides auto-configuration for Spring MVC that works well with most applications.</p>
<p>The auto-configuration adds the following features on top of Spring’s defaults:</p>
<ul>
<li><p>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.</p>
<p>自动配置了ViewResolver（视图解析器：根据方法的返回值得到视图对象，视图对象决定如何渲染(转发或者重定向)）</p>
</li>
<li><p>Support for serving static resources, including support for WebJars (covered <a href="https://docs.spring.io/spring-boot/docs/2.2.2.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-static-content" target="_blank" rel="noopener">later in this document</a>)).</p>
<p>静态资源路径</p>
</li>
<li><p>Automatic registration of <code>Converter</code>, <code>GenericConverter</code>, and <code>Formatter</code> beans.</p>
<p>Converter：转换器，类型转换</p>
<p>Formatter：格式化器</p>
</li>
<li><p>Support for <code>HttpMessageConverters</code> (covered <a href="https://docs.spring.io/spring-boot/docs/2.2.2.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-message-converters" target="_blank" rel="noopener">later in this document</a>).</p>
<p>HttpMessageConverters：SpringMVC转换http请求与响应的，是从容器中确定并获得所有的HttpMessageConverters</p>
</li>
<li><p>Automatic registration of <code>MessageCodesResolver</code> (covered <a href="https://docs.spring.io/spring-boot/docs/2.2.2.RELEASE/reference/htmlsingle/#boot-features-spring-message-codes" target="_blank" rel="noopener">later in this document</a>).</p>
<p>定义代码错误规则</p>
</li>
<li><p>Static <code>index.html</code> support.</p>
</li>
<li><p>Custom <code>Favicon</code> support (covered <a href="https://docs.spring.io/spring-boot/docs/2.2.2.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-favicon" target="_blank" rel="noopener">later in this document</a>).</p>
</li>
<li><p>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (covered <a href="https://docs.spring.io/spring-boot/docs/2.2.2.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-web-binding-initializer" target="_blank" rel="noopener">later in this document</a>).</p>
<p>初始化WebDataBinder</p>
</li>
</ul>
<p>If you want to keep Spring Boot MVC features and you want to add additional <a href="https://docs.spring.io/spring/docs/5.2.2.RELEASE/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">MVC configuration</a> (interceptors, formatters, view controllers, and other features), you can add your own <code>@Configuration</code> class of type <code>WebMvcConfigurer</code> but <strong>without</strong> <code>@EnableWebMvc</code>. If you wish to provide custom instances of <code>RequestMappingHandlerMapping</code>, <code>RequestMappingHandlerAdapter</code>, or <code>ExceptionHandlerExceptionResolver</code>, you can declare a <code>WebMvcRegistrationsAdapter</code> instance to provide such components.</p>
<p>If you want to take complete control of Spring MVC, you can add your own <code>@Configuration</code> annotated with <code>@EnableWebMvc</code>.</p>
</li>
<li><p>如何修改默认配置</p>
<ol>
<li>Spring Boot在自动配置组件的时候，先看用户有没有自己配，如果有就用用户配置的，没有就自动配置，如果有多个组件就将用户配置的和自己默认的组合起来</li>
</ol>
</li>
</ol>
<h2 id="4、扩展SpringMVC"><a href="#4、扩展SpringMVC" class="headerlink" title="4、扩展SpringMVC"></a>4、扩展SpringMVC</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">"/hello"</span> <span class="attr">view-name</span>=<span class="string">"success"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/hello"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写一个配置类(@Configuration)，是<code>WebMvcConfigurer</code>类型，不能标注<code>@EnableWebMvc</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//浏览器发送</span></span><br><span class="line">        registry.addViewController(<span class="string">"/test"</span>).setViewName(<span class="string">"success"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>既保留了自动配置，又有我们的配置，我们可以看到WebMvcAutoConfigurationAdapter也实现了WebMvcConfigurer，重要的是上面有</p>
<p>@Import({WebMvcAutoConfiguration.EnableWebMvcConfiguration.class}) </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="meta">@Import</span>(&#123;WebMvcAutoConfiguration.EnableWebMvcConfiguration<span class="class">.<span class="keyword">class</span>&#125;) </span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">static</span> <span class="title">class</span> <span class="title">WebMvcAutoConfigurationAdapter</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<p>EnableWebMvcConfiguration里的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EnableWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">implements</span> <span class="title">ResourceLoaderAware</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<p>我们点开<strong>EnableWebMvcConfiguration</strong>可以看到这样一段代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> WebMvcConfigurerComposite configurers = <span class="keyword">new</span> WebMvcConfigurerComposite();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DelegatingWebMvcConfiguration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//从容器中获取所有的WebMvcConfigurer</span></span><br><span class="line"><span class="meta">@Autowired</span>(</span><br><span class="line">    required = <span class="keyword">false</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfigurers</span><span class="params">(List&lt;WebMvcConfigurer&gt; configurers)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!CollectionUtils.isEmpty(configurers)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.configurers.addWebMvcConfigurers(configurers);</span><br><span class="line">        <span class="comment">//将所有的WebMvcConfigurer一起来调用</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>比如<strong>addViewControllers</strong>的实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">    Iterator var2 = <span class="keyword">this</span>.delegates.iterator();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(var2.hasNext()) &#123;</span><br><span class="line">        WebMvcConfigurer delegate = (WebMvcConfigurer)var2.next();</span><br><span class="line">        delegate.addViewControllers(registry);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样Spring Boot的自动配置和我们自己的配置会一起起作用</p>
<h2 id="5、全面接管SpringMVC"><a href="#5、全面接管SpringMVC" class="headerlink" title="5、全面接管SpringMVC"></a>5、全面接管SpringMVC</h2><p>Spring Boot的自动配置不要了，我们需要在配置类中加入<code>@EnableWebMvc</code>，加入后所有的自动配置都会失效，例如静态资源访问的路径Spring Boot默认的路径就不会生效，需要你自己配置</p>
<p>@EnableWebMvc注解的核心就是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import</span>(&#123;DelegatingWebMvcConfiguration<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableWebMvc</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//DelegatingWebMvcConfiguration.class</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span>(</span><br><span class="line">    proxyBeanMethods = <span class="keyword">false</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<p>为什么加了@EnableWebMvc自动配置就失效了，我们现在来看自动配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(</span><br><span class="line">    proxyBeanMethods = <span class="keyword">false</span></span><br><span class="line">)</span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span>(</span><br><span class="line">    type = Type.SERVLET</span><br><span class="line">)</span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123;Servlet<span class="class">.<span class="keyword">class</span>, <span class="title">DispatcherServlet</span>.<span class="title">class</span>, <span class="title">WebMvcConfigurer</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class">//容器中没有这个组件的时候，这个自动配置类才生效</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnMissingBean</span>(</span>&#123;WebMvcConfigurationSupport<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">AutoConfigureOrder</span>(-2147483638)</span></span><br><span class="line"><span class="class">@<span class="title">AutoConfigureAfter</span>(</span>&#123;DispatcherServletAutoConfiguration<span class="class">.<span class="keyword">class</span>, <span class="title">TaskExecutionAutoConfiguration</span>.<span class="title">class</span>, <span class="title">ValidationAutoConfiguration</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">WebMvcAutoConfiguration</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<p>我们加了@EnableWebMvc就会导入WebMvcConfigurationSupport类，所以自动配置类判断后发现容器里有WebMvcConfigurationSupport，就不会生效了</p>
<p>而导入的WebMvcConfigurationSupport只是最基本的功能，需要我们自己写配置</p>
<p>在Spring Boot中会有很多xxxxConfigurer来帮助我们配置</p>
<h2 id="6、Web开发实验"><a href="#6、Web开发实验" class="headerlink" title="6、Web开发实验"></a>6、Web开发实验</h2><h3 id="6-1、引入资源"><a href="#6-1、引入资源" class="headerlink" title="6.1、引入资源"></a>6.1、引入资源</h3><p>index.html（即欢迎页映射）会首先取static、public、resources里的文件，而在xxxxController中return “xxx”会先取templates中的文件</p>
<p>server.servlet.context-path=/test</p>
<p>之后访问时需要在端口后加上/test</p>
<h3 id="6-2、根据浏览器原信息展示页面的国际化效果"><a href="#6-2、根据浏览器原信息展示页面的国际化效果" class="headerlink" title="6.2、根据浏览器原信息展示页面的国际化效果"></a>6.2、根据浏览器原信息展示页面的国际化效果</h3><ol>
<li><p>编写国际化配置文件，抽取页面需要显示的国际化消息</p>
<p>{ asset_img 文件树.jpg 配置文件树 }</p>
<p>在编写过程中遇到了ceshi_zh_CN.properties被识别为普通文件的问题，在setting-&gt;Editor-&gt;File Types中在上方选择Text，然后在下方拉到最底会有你创建的文件，删除它就可以了，你会发现xxx_zh_CN.properties被正常识别了</p>
</li>
<li><p>Spring Boot自动配置好了管理国际化资源配置的组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageSourceProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String basename = <span class="string">"messages"</span>;</span><br><span class="line">    <span class="comment">//默认基础名是messages</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageSourceAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Resource[] NO_RESOURCES = <span class="keyword">new</span> Resource[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MessageSourceAutoConfiguration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(</span><br><span class="line">        prefix = <span class="string">"spring.messages"</span></span><br><span class="line">    )</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageSource <span class="title">messageSource</span><span class="params">(MessageSourceProperties properties)</span> </span>&#123;</span><br><span class="line">        ResourceBundleMessageSource messageSource = <span class="keyword">new</span> ResourceBundleMessageSource();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(properties.getBasename())) &#123;</span><br><span class="line">                    messageSource.setBasenames(StringUtils.commaDelimitedListToStringArray(StringUtils.trimAllWhitespace(properties.getBasename())));</span><br><span class="line">            <span class="comment">//setBasenames设置国际化资源文件的基础名（去掉语言国家代码的）  </span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (properties.getEncoding() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            messageSource.setDefaultEncoding(properties.getEncoding().name());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        messageSource.setFallbackToSystemLocale(properties.isFallbackToSystemLocale());</span><br><span class="line">        Duration cacheDuration = properties.getCacheDuration();</span><br><span class="line">        <span class="keyword">if</span> (cacheDuration != <span class="keyword">null</span>) &#123;</span><br><span class="line">            messageSource.setCacheMillis(cacheDuration.toMillis());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        messageSource.setAlwaysUseMessageFormat(properties.isAlwaysUseMessageFormat());</span><br><span class="line">        messageSource.setUseCodeAsDefaultMessage(properties.isUseCodeAsDefaultMessage());</span><br><span class="line">        <span class="keyword">return</span> messageSource;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>我们可以更改默认的基础名，在application.properties里写spring.messages.basename=languages.ceshi，就能连接到我们自己写的配置文件</p>
</li>
<li><p>页面获取</p>
<p>在ceshi.html页面中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">"#&#123;ceshi.name&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">th:text</span>=<span class="string">"#&#123;ceshi.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">[[#&#123;ceshi.data&#125;]] <span class="comment">&lt;!-- 这是行内写法 --&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果访问时遇到乱码，可以按照下图改为utf-8并打上勾</p>

</li>
<li><p>设置语言切换按钮</p>
<p>国际化的原理，在WebMvcAutoConfiguration.class中可以看到</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(</span><br><span class="line">    prefix = <span class="string">"spring.mvc"</span>,</span><br><span class="line">    name = &#123;<span class="string">"locale"</span>&#125;</span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.mvcProperties.getLocaleResolver() == org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties.LocaleResolver.FIXED) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FixedLocaleResolver(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">        <span class="comment">//可以指定用固定的</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        AcceptHeaderLocaleResolver localeResolver = <span class="keyword">new</span> AcceptHeaderLocaleResolver();</span><br><span class="line">        <span class="comment">//否则是用AcceptHeaderLocaleResolver</span></span><br><span class="line">        localeResolver.setDefaultLocale(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">        <span class="keyword">return</span> localeResolver;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们打开AcceptHeaderLocaleResolver</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取区域信息</span></span><br><span class="line">    Locale defaultLocale = <span class="keyword">this</span>.getDefaultLocale();</span><br><span class="line">    <span class="keyword">if</span> (defaultLocale != <span class="keyword">null</span> &amp;&amp; request.getHeader(<span class="string">"Accept-Language"</span>) == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> defaultLocale;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//区域信息是在request中获取</span></span><br><span class="line">        Locale requestLocale = request.getLocale();</span><br><span class="line">        List&lt;Locale&gt; supportedLocales = <span class="keyword">this</span>.getSupportedLocales();</span><br><span class="line">        <span class="keyword">if</span> (!supportedLocales.isEmpty() &amp;&amp; !supportedLocales.contains(requestLocale)) &#123;</span><br><span class="line">            Locale supportedLocale = <span class="keyword">this</span>.findSupportedLocale(request, supportedLocales);</span><br><span class="line">            <span class="keyword">if</span> (supportedLocale != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> supportedLocale;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> defaultLocale != <span class="keyword">null</span> ? defaultLocale : requestLocale;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> requestLocale;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果我们要设计为按按钮切换那我们就不要使用自动配置里的区域解析器，我们创建一个MyLocaleResolver</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//我们既然要点击链接切换国际化，那么我们可以在链接上带有区域信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLocaleResolver</span> <span class="keyword">implements</span> <span class="title">LocaleResolver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest httpServletRequest)</span> </span>&#123;</span><br><span class="line">        String l = httpServletRequest.getParameter(<span class="string">"l"</span>);</span><br><span class="line">        System.out.println(l);</span><br><span class="line">        Locale locale = Locale.getDefault();</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(l))&#123;</span><br><span class="line">            String[] s = l.split(<span class="string">"_"</span>);</span><br><span class="line">            locale = <span class="keyword">new</span> Locale(s[<span class="number">0</span>], s[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> locale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocale</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Locale locale)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在MyConfig中将它加入容器，这样我们自己的组件就会生效，可以实现按钮切换了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyLocaleResolver();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h3 id="6-3、登录与拦截器"><a href="#6-3、登录与拦截器" class="headerlink" title="6.3、登录与拦截器"></a>6.3、登录与拦截器</h3><p><strong>登录</strong></p>
<p>模板引擎页面开发期间需要实时生效，首先禁用缓存，然后按<code>Ctrl</code>+<code>F9</code>，就可以实时生效了</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.thymeleaf.cache</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(value = <span class="string">"/user/login"</span>)</span><br><span class="line"><span class="comment">//@RequestMapping(value = "/user/login", method = RequestMethod.POST)，两种都可以</span></span><br><span class="line"><span class="comment">//@RequestParam("username")，如果没有传入参数就会报错</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">loginceshi</span><span class="params">(@RequestParam(<span class="string">"username"</span>)</span> String username,</span></span><br><span class="line"><span class="function">                         @<span class="title">RequestParam</span><span class="params">(<span class="string">"password"</span>)</span> String password)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"登录跳转"</span>);</span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.isEmpty(username) &amp;&amp; password.equals(<span class="string">"123456"</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"loginsuccess"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ceshi"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/user/login"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"用户名"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"密码"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color: red"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;msg&#125;"</span> <span class="attr">th:if</span>=<span class="string">"$&#123;not #strings.isEmpty(msg)&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>sign in<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里注意有个重复提交表单的问题，我们按住<code>F5</code>浏览器会提示是否重新发送表单，要解决重复提交的问题，我们可以重定向</p>
<p><strong>拦截器</strong></p>
<p>我们创建自己的拦截器<strong>LoginHandlerInterceptor</strong>，这里实现<strong>HandlerInterceptor</strong>类不会报错，在后来的版本中，这个接口的方法从原来的抽象方法变成了default修饰的默认方法，因此不会显红线报需要实现的方法，需要按<code>Ctrl</code> + <code>O</code>手动选择。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//目标方法执行之前</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Object user = request.getSession().getAttribute(<span class="string">"name"</span>);</span><br><span class="line">    <span class="keyword">if</span> (user == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">//没有登陆，应该返回登录界面</span></span><br><span class="line">        request.setAttribute(<span class="string">"msg"</span>, <span class="string">"请先登录"</span>);</span><br><span class="line">        request.getRequestDispatcher(<span class="string">"/ceshi"</span>).forward(request, response);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>之后添加到我们的配置类中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">    registry.addInterceptor(<span class="keyword">new</span> LoginHandlerInterceptor()).addPathPatterns(<span class="string">"/main"</span>)</span><br><span class="line">        .excludePathPatterns(<span class="string">"/asserts/**"</span>, <span class="string">"/webjars/**"</span>);</span><br><span class="line">    <span class="comment">//也可以不用特意过滤静态资源，SpringBoot会自动放行static下的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-4、Restful-CRUD"><a href="#6-4、Restful-CRUD" class="headerlink" title="6.4、Restful CRUD"></a>6.4、Restful CRUD</h3><ol>
<li><p>RestfulCRUD：CRUD满足Rest风格；</p>
<p>URI： /资源名称/资源标识 HTTP请求方式区分对资源CRUD操作</p>
<table>
<thead>
<tr>
<th></th>
<th>普通CRUD</th>
<th>RestfulCRUD</th>
</tr>
</thead>
<tbody><tr>
<td>查询</td>
<td>getEmp</td>
<td>emp—GET</td>
</tr>
<tr>
<td>添加</td>
<td>addEmp?xxx</td>
<td>emp—POST</td>
</tr>
<tr>
<td>修改</td>
<td>updateEmp?id=xxx&amp;xxx=xx</td>
<td>emp/{id}—PUT</td>
</tr>
<tr>
<td>删除</td>
<td>deleteEmp?id=1</td>
<td>emp/{id}—DELETE</td>
</tr>
</tbody></table>
</li>
<li><p>实验的请求架构;</p>
<table>
<thead>
<tr>
<th>实验功能</th>
<th>请求URI</th>
<th>请求方式</th>
</tr>
</thead>
<tbody><tr>
<td>查询所有员工</td>
<td>emps</td>
<td>GET</td>
</tr>
<tr>
<td>查询某个员工(来到修改页面)</td>
<td>emp/1</td>
<td>GET</td>
</tr>
<tr>
<td>来到添加页面</td>
<td>emp</td>
<td>GET</td>
</tr>
<tr>
<td>添加员工</td>
<td>emp</td>
<td>POST</td>
</tr>
<tr>
<td>来到修改页面（查出员工进行信息回显）</td>
<td>emp/1</td>
<td>GET</td>
</tr>
<tr>
<td>修改员工</td>
<td>emp</td>
<td>PUT</td>
</tr>
<tr>
<td>删除员工</td>
<td>emp/1</td>
<td>DELETE</td>
</tr>
</tbody></table>
<p><strong>thymeleaf公共页面抽取</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 公共页面抽取，copy可以随意取名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">"copy"</span>&gt;</span></span><br><span class="line">    <span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入公共片段 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	一个是~&#123;templatename::selector&#125;：模板名::选择器</span></span><br><span class="line"><span class="comment">	另一种写法是~&#123;templatename::fragmentname&#125;：模板名::片段名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 将公共片段插入到div中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"footer :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 将声明引入的元素替换为公共片段 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"footer :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 将被引入片段的内容包含进标签中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">"footer :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 也可以写为 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果使用以上方法引入可以不用写~&#123;&#125;，而行内写法必须加上[[~&#123;&#125;]]、[(~&#123;&#125;)] --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"~&#123;footer :: copy&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">[[~&#123;footer :: copy&#125;]]</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 实际效果 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">        <span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class="line">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>引入片段时传入参数</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在引入片段需要传参的地方写入 --&gt;</span></span><br><span class="line">&lt;a class="nav-link active" th:class="$&#123;activeIf=="main"?"nav-link active":"nav-link"&#125;"&lt;/a&gt;</span><br><span class="line">&lt;a class="nav-link active" th:class="$&#123;activeIf=="test"?"nav-link active":"nav-link"&#125;"&lt;/a&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 传参时 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"::frag ($&#123;value1&#125;,$&#123;value2&#125;)"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"::frag (onevar=$&#123;value1&#125;,twovar=$&#123;value2&#125;)"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 例如 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"footer::copy (activeIf='main')"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>遍历数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 会生成一个个tr --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"emp:$&#123;emps&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;emp.name&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;emp.gender&#125;==0'男':'女'"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;emp.phone.number&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#dates.format(emp.date,'yyyy-MM-dd HH:mm')&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>自定义属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">单个</span><br><span class="line">th:attr="action=@&#123;/subscribe&#125;"</span><br><span class="line">多个</span><br><span class="line">th:attr="src=@&#123;/images/gtvglogo.png&#125;,title=#&#123;logo&#125;,alt=#&#123;logo&#125;"</span><br></pre></td></tr></table></figure>

<p>PUT和DELETE请求的发送</p>
<ol>
<li><p>配置<strong>HiddenHttpMethodFilter</strong></p>
</li>
<li><p>创建一个post表单和一个隐藏的input项，必须满足name=”_method”，input值就是我们的请求方式</p>
</li>
<li><p>emp传递参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping</span>(<span class="string">"/emp/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deleteEmployee</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line">	<span class="comment">//id为传递的参数</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">	若是通过重定向到了这个界面，即使用了redirectAttributes.addAttribute，则用</span></span><br><span class="line"><span class="comment">	&lt;form th:action="@&#123;/emp/&#125;+$&#123;param.id&#125;" method="post"&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/emp/&#125;+$&#123;id&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_method"</span> <span class="attr">value</span>=<span class="string">"delete"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在application.properties中写入</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.mvc.hiddenmethod.filter.enabled</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>

<p>我们可以查看<strong>WebMvcAutoConfiguration</strong>里的<strong>OrderedHiddenHttpMethodFilter</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(&#123;HiddenHttpMethodFilter<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnProperty</span>(</span></span><br><span class="line"><span class="class">    <span class="title">prefix</span> </span>= <span class="string">"spring.mvc.hiddenmethod.filter"</span>,</span><br><span class="line">    name = &#123;<span class="string">"enabled"</span>&#125;,</span><br><span class="line">    matchIfMissing = <span class="keyword">false</span></span><br><span class="line">    <span class="comment">//自己将其设为true</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">public</span> OrderedHiddenHttpMethodFilter <span class="title">hiddenHttpMethodFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> OrderedHiddenHttpMethodFilter();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ol>
<h2 id="7、错误处理机制"><a href="#7、错误处理机制" class="headerlink" title="7、错误处理机制"></a>7、错误处理机制</h2><h3 id="7-1、Spring-Boot默认的错误处理机制"><a href="#7-1、Spring-Boot默认的错误处理机制" class="headerlink" title="7.1、Spring Boot默认的错误处理机制"></a>7.1、Spring Boot默认的错误处理机制</h3><p>错误处理机制</p>
<ol>
<li><p>浏览器访问localhost:8080/aaa</p>
<p>{ asset_img 错误信息.jpg 默认错误信息 }</p>
</li>
<li><p>Http Client访问localhost:8080/aaa</p>
<p>点击Tools -&gt; Http Client -&gt; Test RESTful Web Service，在path输入/aaa</p>
<p>可以得到</p>
<p>{ asset_img httpclient.jpg HTTP Client }</p>
</li>
</ol>
<p>为什么会有默认的界面，我们可以查看<strong>ErrorMvcAutoConfiguration</strong>错误处理的自动配置，这个类给容器添加了以下组件，<strong>原理方面将组件介绍与下面的运行步骤结合看</strong></p>
<ol>
<li><p>DefaultErrorAttributes</p>
<p>能获得的信息有</p>
<ul>
<li>timestamp：时间戳</li>
<li>status：状态码</li>
<li>error：错误提示</li>
<li>exception：异常对象</li>
<li>message：异常消息</li>
<li>errors：JSR303数据校验的错误</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(WebRequest webRequest, <span class="keyword">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//能获取的信息的信息有timestamp：时间戳、status：状态码</span></span><br><span class="line">    Map&lt;String, Object&gt; errorAttributes = <span class="keyword">new</span> LinkedHashMap();</span><br><span class="line">    errorAttributes.put(<span class="string">"timestamp"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">    <span class="keyword">this</span>.addStatus(errorAttributes, webRequest);</span><br><span class="line">    <span class="keyword">this</span>.addErrorDetails(errorAttributes, webRequest, includeStackTrace);</span><br><span class="line">    <span class="keyword">this</span>.addPath(errorAttributes, webRequest);</span><br><span class="line">    <span class="keyword">return</span> errorAttributes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>BasicErrorController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(&#123;<span class="string">"$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;"</span>&#125;)</span><br><span class="line"><span class="comment">//处理默认/error请求</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicErrorController</span> <span class="keyword">extends</span> <span class="title">AbstractErrorController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(</span><br><span class="line">        produces = &#123;<span class="string">"text/html"</span>&#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">//产生html类型的数据，浏览器的请求到这里处理</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">errorHtml</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        HttpStatus status = <span class="keyword">this</span>.getStatus(request);</span><br><span class="line">        Map&lt;String, Object&gt; model = Collections.unmodifiableMap(<span class="keyword">this</span>.getErrorAttributes(request, <span class="keyword">this</span>.isIncludeStackTrace(request, MediaType.TEXT_HTML)));</span><br><span class="line">        response.setStatus(status.value());</span><br><span class="line">        <span class="comment">//去哪个页面作为错误页面，包含页面地址和页面内容</span></span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">this</span>.resolveErrorView(request, response, status, model);</span><br><span class="line">        <span class="keyword">return</span> modelAndView != <span class="keyword">null</span> ? modelAndView : <span class="keyword">new</span> ModelAndView(<span class="string">"error"</span>, model);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        	返回是空，即我们没有自己设置错误页面，就返回一个error视图，相关视图在</span></span><br><span class="line"><span class="comment">        	ErrorMvcAutoConfiguration下有设置</span></span><br><span class="line"><span class="comment">        **/</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span></span><br><span class="line">    <span class="comment">//产生json类型的数据，其它客户端的请求到这里处理</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) &#123;</span><br><span class="line">        HttpStatus status = <span class="keyword">this</span>.getStatus(request);</span><br><span class="line">        <span class="keyword">if</span> (status == HttpStatus.NO_CONTENT) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity(status);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Map&lt;String, Object&gt; body = <span class="keyword">this</span>.getErrorAttributes(request, <span class="keyword">this</span>.isIncludeStackTrace(request, MediaType.ALL));</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity(body, status);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>至于如何如何分辨的，我们可以在浏览器查看请求头</p>
<p>{ asset_img 请求头.jpg 浏览器请求头 }</p>
<p>而在Http Client中我们可以看到请求头为</p>
<p>{ asset_img 请求头httpclient.jpg httpclient请求头 }</p>
</li>
<li><p>ErrorPageCustomizer</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;error.path:/error&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String path = <span class="string">"/error"</span>;  <span class="comment">//系统出现错误以后来到error请求</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>DefaultErrorViewResolver</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 以下为DefaultErrorViewResolver的方法 **/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request, HttpStatus status, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">this</span>.resolve(String.valueOf(status.value()), model);</span><br><span class="line">    <span class="keyword">if</span> (modelAndView == <span class="keyword">null</span> &amp;&amp; SERIES_VIEWS.containsKey(status.series())) &#123;</span><br><span class="line">        modelAndView = <span class="keyword">this</span>.resolve((String)SERIES_VIEWS.get(status.series()), model);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> ModelAndView <span class="title">resolve</span><span class="params">(String viewName, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//默认Spring Boot可以去找到一个页面，例如 error/404</span></span><br><span class="line">    String errorViewName = <span class="string">"error/"</span> + viewName;</span><br><span class="line">    <span class="comment">//如果模板引擎可以解析就用模板引擎解析</span></span><br><span class="line">    TemplateAvailabilityProvider provider = <span class="keyword">this</span>.templateAvailabilityProviders.getProvider(errorViewName, <span class="keyword">this</span>.applicationContext);</span><br><span class="line">    <span class="comment">//模板引擎可以使用则返回到errorViewName指定的视图地址</span></span><br><span class="line">    <span class="comment">//模板引擎不可用就在静态资源文件夹下找到errorViewName对应的页面，error/404.html</span></span><br><span class="line">    <span class="comment">//然后返回产生一个ModelAndView对象</span></span><br><span class="line">    <span class="keyword">return</span> provider != <span class="keyword">null</span> ? <span class="keyword">new</span> ModelAndView(errorViewName, model) : <span class="keyword">this</span>.resolveResource(errorViewName, model);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<p><strong>运行步骤</strong></p>
<ol>
<li><p>一旦出现4xx和5xx之类的错误，<strong>ErrorPageCustomizer</strong>就会生效（定制错误响应规则），就会来到/error请求，然后被<strong>BasicErrorController</strong>处理</p>
</li>
<li><p>响应页面：去哪个页面是由<strong>DefaultErrorViewResolver</strong>决定的，在<strong>resolveErrorView</strong>得到所有的<strong>errorViewResolvers</strong>的<strong>ModelAndView</strong>，而<strong>DefaultErrorViewResolver</strong>会得到一个默认的<strong>ModelAndView</strong></p>
<p>响应数据：查看<strong>getErrorAttributes</strong>方法里的<strong>errorAttributes</strong>对象，可以发现<strong>ErrorAttributes</strong>是一个抽象类，而<strong>DefaultErrorAttributes</strong>正实现了它，所以我们查看<strong>ErrorMvcAutoConfiguration</strong>下的<strong>DefaultErrorAttributes</strong>组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 以下为BasicErrorController类下的errorHtml方法里所使用的resolveErrorView方法 **/</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request, HttpServletResponse response, HttpStatus status, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">    Iterator var5 = <span class="keyword">this</span>.errorViewResolvers.iterator();</span><br><span class="line"></span><br><span class="line">    ModelAndView modelAndView;</span><br><span class="line">    <span class="comment">//所有的errorViewResolvers得到ModelAndView</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!var5.hasNext()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ErrorViewResolver resolver = (ErrorViewResolver)var5.next();</span><br><span class="line">        modelAndView = resolver.resolveErrorView(request, status, model);</span><br><span class="line">    &#125; <span class="keyword">while</span>(modelAndView == <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">//模板引擎和静态资源文件夹下都没有文件，即我们没有自己设置错误页面的情况下，就返回空</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** 以下为BasicErrorController类下的errorHtml方法里所使用的getErrorAttributes方法 **/</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(HttpServletRequest request, <span class="keyword">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class="line">    WebRequest webRequest = <span class="keyword">new</span> ServletWebRequest(request);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.errorAttributes.getErrorAttributes(webRequest, includeStackTrace);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="7-2、定制自己的错误处理页面和数据"><a href="#7-2、定制自己的错误处理页面和数据" class="headerlink" title="7.2、定制自己的错误处理页面和数据"></a>7.2、定制自己的错误处理页面和数据</h3><p>如何定制自己的错误页面和页面的错误信息</p>
<ol>
<li><p>有模板引擎情况下，就创建error/<code>状态码</code>.html，例如 error/404.html，要想匹配状态码4xx或者5xx，就在error文件夹下创建4xx.html或者5xx.html，注意有精确匹配的情况下，即有404.html和4xx.html发生404错误会来到404.html</p>
<p>页面能获取的信息，可以查看<strong>DefaultErrorAttributes</strong>组件，获取信息例子如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>status：[[$&#123;status&#125;]]<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>timestamp：[[$&#123;timestamp&#125;]]<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>没有模板引擎的情况下（模板引擎找不到这个错误页面），在静态资源文件夹下找</p>
</li>
<li><p>模板引擎和静态资源文件夹下都没有就来到Spring Boot默认的空白页面</p>
</li>
</ol>
<p>如何定制错误的json信息</p>
<!-- springboot2，看了一下源码，要在配置文件加上server.error.include-exception=true才能获取到Exception信息 -->

<ol>
<li><p>首先我们可以创建一个自己的异常类，例如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//为了异常能够抛出，继承运行时异常(RuntimeException)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataNullException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DataNullException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"数据空异常"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再创建一个增强Controller（@ControllerAdvice）配合@ExceptionHandler来处理异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(DataNullException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">Map</span>&lt;<span class="title">String</span>, <span class="title">Object</span>&gt; <span class="title">errorException</span>(<span class="title">Exception</span> <span class="title">e</span>)</span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"code"</span>, <span class="string">"Data Null"</span>);</span><br><span class="line">        map.put(<span class="string">"message"</span>, e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是这样无论是浏览器访问还是客户端访问都只返回json字符串，注意要在配置文件加上下面的配置才能获取Exception信息</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.error.include-exception</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>我们希望能够有自适应效果，在不改变原来json数据的同时往里面添加数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//继承DefaultErrorAttributes，重写getErrorAttributes方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyErrorAttributes</span> <span class="keyword">extends</span> <span class="title">DefaultErrorAttributes</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//保证能够得到自定义的exception，默认为false</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyErrorAttributes</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(WebRequest webRequest, <span class="keyword">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">super</span>.getErrorAttributes(webRequest, includeStackTrace);</span><br><span class="line">        <span class="comment">//得到父类里的数据</span></span><br><span class="line">        map.put(<span class="string">"code"</span>, <span class="string">"Data Null"</span>);</span><br><span class="line">        map.put(<span class="string">"message"</span>, <span class="string">"cs"</span>);</span><br><span class="line">        Map&lt;String, Object&gt; ceshi = (Map&lt;String, Object&gt;) webRequest.getAttribute(<span class="string">"ceshi"</span>, <span class="number">0</span>);</span><br><span class="line">        map.put(<span class="string">"ceshi"</span>, ceshi);</span><br><span class="line">        <span class="comment">//将我们自己的数据与源数据合并</span></span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(DataNullException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">String</span> <span class="title">errorException</span>(<span class="title">Exception</span> <span class="title">e</span>, <span class="title">HttpServletRequest</span> <span class="title">httpServletRequest</span>)</span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        httpServletRequest.setAttribute(<span class="string">"javax.servlet.error.status_code"</span>, <span class="string">"500"</span>);</span><br><span class="line">        <span class="comment">//设置状态码</span></span><br><span class="line">        map.put(<span class="string">"code"</span>, <span class="string">"Data Null"</span>);</span><br><span class="line">        map.put(<span class="string">"message"</span>, e.getMessage());</span><br><span class="line">        httpServletRequest.setAttribute(<span class="string">"ceshi"</span>, map);</span><br><span class="line">        <span class="comment">//携带数据</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/forward:/error"</span>;</span><br><span class="line">		<span class="comment">//转发到/error</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
]]></content>
      <categories>
        <category>Spring Boot</category>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Web</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-boot笔记--日志</title>
    <url>/spring-boot-log/</url>
    <content><![CDATA[<h1 id="三、Spring-Boot日志"><a href="#三、Spring-Boot日志" class="headerlink" title="三、Spring Boot日志"></a>三、Spring Boot日志</h1><h2 id="1、日志框架"><a href="#1、日志框架" class="headerlink" title="1、日志框架"></a>1、日志框架</h2><p>日志的抽象层：JCL、SLF4J、jboss-logging</p>
<p>日志的实现：Log4j JUL、Log4j2 Logback</p>
<p>Spring Boot：底层是Spring、Spring默认是JCL、而Spring Boot选用SLF4j和logback</p>
<a id="more"></a>

<h2 id="2、SLF4j"><a href="#2、SLF4j" class="headerlink" title="2、SLF4j"></a>2、SLF4j</h2><h3 id="2-1-系统中如何使用"><a href="#2-1-系统中如何使用" class="headerlink" title="2.1 系统中如何使用"></a>2.1 系统中如何使用</h3><p>开发的时候，日志记录方法的调用应该调用日志抽象层的方法</p>
<p>首先导入slf4j的jar和logback的jar，可以查看下图</p>
<img src="/spring-boot-log/concrete-bindings.png" class="" title="抽象层到框架的方法--来自slf4j官网">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Logger logger = LoggerFactory.getLogger(HelloWorld<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    logger.info(<span class="string">"Hello World"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>每一个日志都有自己的配置文件，使用slf4j后还是使用日志框架自己本身的配置文件</p>
<h3 id="2-2-多个日志框架统一转成slf4j"><a href="#2-2-多个日志框架统一转成slf4j" class="headerlink" title="2.2 多个日志框架统一转成slf4j"></a>2.2 多个日志框架统一转成slf4j</h3><p>如何让系统中所有的日志统一到slf4j</p>
<img src="/spring-boot-log/legacy.png" class="" title="多个框架统一到slf4j的方法--来自slf4j官网">

<ol>
<li>首先将系统的其它日志框架排除</li>
<li>用中间包来替换原来的日志框架</li>
<li>导入slf4j来实现统一框架</li>
</ol>
<h3 id="2-3-Spring-Boot日志关系"><a href="#2-3-Spring-Boot日志关系" class="headerlink" title="2.3 Spring Boot日志关系"></a>2.3 Spring Boot日志关系</h3><p>我们可以创建一个新的项目，在pom.xml文件右键点击Diagrams–&gt;Show Dependencies，可以看到idea为我们画好的依赖图</p>
<p>其中<strong>spring-boot-starter</strong>是我们最基本的文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Spring Boot使用它来做我们的日志功能</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们可以在依赖图下查看我们的依赖关系，可以看到<strong>spring-boot-starter-logging</strong>依赖logback-classic来使用logback进行日志记录，其它还有xxx-to-slf4j来将其它的日志框架转换为slf4j</p>
<p>Spring Boot底层也是使用slf4j+logback的方式来进行日志记录，Spring Boot也把其它的日志也转换成slf4j，如果我们要用其它日志框架，一定要把日志的框架依赖移除掉，Spring Boot能自动适配所有的日志，而且底层使用slf4j+logback的方式记录日志</p>
<h3 id="2-4-Spring-Boot日志的使用"><a href="#2-4-Spring-Boot日志的使用" class="headerlink" title="2.4 Spring Boot日志的使用"></a>2.4 Spring Boot日志的使用</h3><ol>
<li><p>默认配置</p>
<p>Spring Boot帮我们配置好了日志</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//日志的级别trace&lt;debug&lt;info&lt;warn&lt;error</span></span><br><span class="line">    <span class="comment">//我们可以自己调整输出的级别</span></span><br><span class="line">	<span class="comment">//Spring Boot默认使用的是info级别的，只输出info、warn、error</span></span><br><span class="line">    logger.trace(() -&gt; <span class="string">"trace"</span>);</span><br><span class="line">    logger.debug(() -&gt; <span class="string">"debug"</span>);</span><br><span class="line">    logger.info(() -&gt; <span class="string">"info"</span>);</span><br><span class="line">    logger.warn(() -&gt; <span class="string">"warn"</span>);</span><br><span class="line">    logger.error(() -&gt; <span class="string">"error"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>改变配置</p>
<p>在application.properties里写入</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">logging.level.com.包名</span>=<span class="string">trace</span></span><br></pre></td></tr></table></figure>

<p>可以更改日志级别，没有指定就用Spring Boot默认指定的级别，root级别</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 会在根目录下生成spboot.log</span></span><br><span class="line"><span class="meta">logging.file.name</span>=<span class="string">spboot.log</span></span><br><span class="line"><span class="comment"># 制定完整的路径，可在对应路径下找到</span></span><br><span class="line"><span class="meta">logging.file.name</span>=<span class="string">G:/spboot.log</span></span><br><span class="line"><span class="comment"># 在指定路径下创建spring.log，/splog/log是在所在磁盘根目录下创建，name和path同时指定name起作用</span></span><br><span class="line"><span class="meta">logging.file.path</span>=<span class="string">G:/splog/log</span></span><br><span class="line"><span class="comment"># 指定控制台输出日志的格式</span></span><br><span class="line"><span class="meta">logging.pattern.console</span>=<span class="string">%d&#123;yyyy-MM-dd&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span></span><br><span class="line"><span class="comment"># 指定文件中输出日志的格式</span></span><br><span class="line"><span class="meta">logging.pattern.file</span>=<span class="string">%d&#123;yyyy-MM-dd&#125; = [%thread] = %-5level = %logger&#123;50&#125; = - %msg%n</span></span><br><span class="line"></span><br><span class="line"><span class="attr">日志的输出格式：</span></span><br><span class="line">	<span class="attr">%d：表示日期和时间</span></span><br><span class="line">	<span class="attr">%thread：表示线程的名字</span></span><br><span class="line">	<span class="attr">%-5level：表示级别从左显示5个字符宽度</span></span><br><span class="line">	<span class="attr">%logger&#123;50&#125;：表示logger名字最长为50个字符，否则按照句点分割</span></span><br><span class="line">	<span class="attr">%msg：日志消息</span></span><br><span class="line">	<span class="attr">%n：换行</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>指定配置</p>
<p>如果我们要用自己的配置，那么在类路径下放上每个日志框架自己的配置文件，然后Spring Boot就不会使用自己的配置了</p>
<p><a href="https://docs.spring.io/spring-boot/docs/2.2.2.RELEASE/reference/htmlsingle/#boot-features-logging" target="_blank" rel="noopener">官方文档</a></p>
<table>
<thead>
<tr>
<th>Logging System</th>
<th>Customization</th>
</tr>
</thead>
<tbody><tr>
<td>Logback</td>
<td><strong>logback-spring.xml</strong>, <strong>logback-spring.groovy</strong>, <strong>logback.xml</strong>, or <strong>logback.groovy</strong></td>
</tr>
<tr>
<td>Log4j2</td>
<td><strong>log4j2-spring.xml</strong> or <strong>log4j2.xml</strong></td>
</tr>
<tr>
<td>JDK (Java Util Logging)</td>
<td><strong>logging.properties</strong></td>
</tr>
</tbody></table>
<p>logback.xml直接被日志框架识别</p>
<p>logback-spring.xml由Spring Boot加载配置项</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"staging"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- configuration to be enabled when the "staging" profile is active --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 可以指定在某个环境下生效 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev | staging"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- configuration to be enabled when the "dev" or "staging" profiles are active --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"!production"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- configuration to be enabled when the "production" profile is not active --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="2-5-Spring-Boot日志框架的切换"><a href="#2-5-Spring-Boot日志框架的切换" class="headerlink" title="2.5 Spring Boot日志框架的切换"></a>2.5 Spring Boot日志框架的切换</h3><p>可以按照官网的适配图进行切换，可以查看<strong>2.2</strong>下的图片，我们可以通过生成依赖图的方式对依赖进行管理，具体引入哪些依赖可以查看<a href="https://docs.spring.io/spring-boot/docs/2.2.2.RELEASE/reference/htmlsingle/#using-boot-starter" target="_blank" rel="noopener">官方文档</a>，删除哪些依赖可以查看2.2下的图片</p>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-boot笔记--配置</title>
    <url>/spring-boot-config/</url>
    <content><![CDATA[<h1 id="二、Spring-Boot配置"><a href="#二、Spring-Boot配置" class="headerlink" title="二、Spring Boot配置"></a>二、Spring Boot配置</h1><h2 id="1、配置文件"><a href="#1、配置文件" class="headerlink" title="1、配置文件"></a>1、配置文件</h2><p>Spring Boot使用一个全局的配置文件，配置文件是固定的</p>
<ul>
<li>application.properties</li>
<li>application.yml</li>
</ul>
<p>配置文件的作用：修改Spring Boot自动配置的默认值</p>
<a id="more"></a>

<p>在底层Spring Boot都给我们配置好了，你可以自己修改配置</p>
<h2 id="2、YAML"><a href="#2、YAML" class="headerlink" title="2、YAML"></a>2、YAML</h2><p>YAML (YAML Ain’t a Markup Language)，它既是一个标记语言又不是一个标记语言，以数据为中心，比json、xml等更适合做配置文件</p>
<p>如果要配置端口，在<strong>application.properties</strong>中</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">80</span></span><br></pre></td></tr></table></figure>

<p>在<strong>application.yml</strong>中</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span> </span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>

<h3 id="2-1-YAML语法"><a href="#2-1-YAML语法" class="headerlink" title="2.1 YAML语法"></a>2.1 YAML语法</h3><p>k: v: 表示一对键值对(空格必须有)，以空格缩进表示层级关系，大小写是敏感的，缩进不允许使用tab，只允许空格，缩进的空格数不重要，只要相同层级的元素左对齐即可</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">/hello</span></span><br></pre></td></tr></table></figure>

<p>值得写法</p>
<ul>
<li><p>普通的值(数字、字符串、布尔)</p>
<p>直接来写，字符串默认不加上单引号或双引号</p>
<p>“”：双引号，不会转义字符串，特殊字符会作为本身想表示的意思</p>
<p>‘’：单引号，会转义特殊字符，特殊字符会变为普通字符串</p>
</li>
<li><p>对象、Map(键值对)</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">student:</span> </span><br><span class="line">  <span class="attr">name:</span> <span class="string">liming</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">18</span></span><br></pre></td></tr></table></figure>

<p>行内写法</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">student:</span> <span class="string">&#123;name:</span> <span class="string">liming,</span> <span class="attr">age:</span> <span class="number">18</span><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>数组(List、set)</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">student:</span> </span><br><span class="line">  <span class="string">-liming</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">zhangsan</span></span><br></pre></td></tr></table></figure>

<p>行内写法</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">student:</span> <span class="string">&#123;liming,</span> <span class="string">zhangsan&#125;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="3、配置文件值获取"><a href="#3、配置文件值获取" class="headerlink" title="3、配置文件值获取"></a>3、配置文件值获取</h2><p>在包里新建bean.student类，并写入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> cadre;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; course;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; score;</span><br><span class="line">    <span class="keyword">private</span> Card card;</span><br><span class="line">	...... <span class="comment">//下面是Getter,Setter,toString方法</span></span><br></pre></td></tr></table></figure>

<p>在resources文件夹下新建文件application.yml，并写入</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">student:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">zhangsan</span></span><br><span class="line">  <span class="attr">sex:</span> <span class="string">male</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">21</span></span><br><span class="line">  <span class="attr">cadre:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">course:</span> <span class="string">&#123;math,</span> <span class="string">english&#125;</span></span><br><span class="line">  <span class="attr">score:</span> <span class="string">&#123;math:</span> <span class="number">100</span><span class="string">,</span> <span class="attr">english:</span> <span class="number">100</span><span class="string">&#125;</span></span><br><span class="line">  <span class="attr">card:</span></span><br><span class="line">    <span class="attr">number:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">money:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>

<p>将配置的每一个数据映射到组件中，在组件上方加入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"student"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<p>发现idea会有提示，在pom.xml中写入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>此为配置文件处理器，配置文件和组件连接就会有提示<strong>@ConfigurationProperties(prefix = “student”)</strong>是告诉本类中的所有属性和配置文件中的相关配置进行连接，<strong>prefix = “student”</strong>是与配置文件student下面的所有属性进行一一映射</p>
<p><strong>@Component</strong>只有这个组件是容器中的组件，才能使用容器提供的功能</p>
<p>现在就可以测试了</p>
<p>我们进入<strong>test</strong>下面的<strong>ApplicationTests</strong>类，这是我们的Spring Boot单元测试类，可以在测试期间自动注入到容器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">Student student;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(student);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在下方的Spring Boot提示中可以看到结果</p>
<p>Student{name=’zhangsan’, sex=’male’, age=21, cadre=true, course=null, score={math=100, english=100}, card=Card{number=’123456’, money=10000}}</p>
<h3 id="3-1-properties配置"><a href="#3-1-properties配置" class="headerlink" title="3.1 properties配置"></a>3.1 properties配置</h3><p>我们还可以在properties里配置，properties优先级要高</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">student.name</span>=<span class="string">张三</span></span><br><span class="line"><span class="meta">student.sex</span>=<span class="string">male</span></span><br><span class="line"><span class="meta">student.age</span>=<span class="string">22</span></span><br><span class="line"><span class="meta">student.cadre</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">student.course</span>=<span class="string">数学,英语</span></span><br><span class="line"><span class="meta">student.score.sx</span>=<span class="string">120</span></span><br><span class="line"><span class="meta">student.score.yy</span>=<span class="string">120</span></span><br><span class="line"><span class="meta">student.card.number</span>=<span class="string">123456789</span></span><br><span class="line"><span class="meta">student.card.money</span>=<span class="string">20000</span></span><br></pre></td></tr></table></figure>

<p>运行test发现可以输出结果但有乱码，因为properties是ASCII码，而idea用的是utf-8，我们打开File–&gt;Settings，搜索File Encodings，选择utf-8并打勾</p>


<p>之后运行发现解决了中文乱码问题</p>
<h3 id="3-2-Value和-ConfigurationProperties区别"><a href="#3-2-Value和-ConfigurationProperties区别" class="headerlink" title="3.2 @Value和@ConfigurationProperties区别"></a>3.2 @Value和@ConfigurationProperties区别</h3><p>我们注释掉<strong>@ConfigurationProperties</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//@ConfigurationProperties(prefix = "student")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;student.name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;student.sex&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;2*10&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"true"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> cadre;</span><br></pre></td></tr></table></figure>

<p>我们再次运行，发现仍然有效</p>
<table>
<thead>
<tr>
<th></th>
<th align="left">@ConfigurationProperties</th>
<th>@Value</th>
</tr>
</thead>
<tbody><tr>
<td>功能</td>
<td align="left">批量注入属性</td>
<td>单个指定</td>
</tr>
<tr>
<td>松散语法</td>
<td align="left">支持-n等于大写的N</td>
<td>不支持</td>
</tr>
<tr>
<td>SpEL(表达式)</td>
<td align="left">不支持</td>
<td>支持</td>
</tr>
<tr>
<td>JSR303校验</td>
<td align="left">支持</td>
<td>不支持</td>
</tr>
<tr>
<td>复杂类型封装</td>
<td align="left">支持</td>
<td>不支持</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"student"</span>)</span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="comment">//@Value("$&#123;student.name&#125;")</span></span><br><span class="line">    <span class="meta">@Email</span> <span class="comment">//name必须是邮箱格式</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure>

<p><strong>@Validated</strong>表示需要校验</p>
<p>配置文件中yml和properties都能获取到值，有一定的区别</p>
<p>至于<strong>@ConfigurationProperties</strong>和<strong>@Value</strong>，我们只取某个值时，可以用<strong>@Value</strong>，如果我们有专门的javaBean来映射配置文件，就用<strong>@ConfigurationProperties</strong></p>
<h3 id="3-3-PropertySource、-ImportResource、-Bean"><a href="#3-3-PropertySource、-ImportResource、-Bean" class="headerlink" title="3.3 @PropertySource、@ImportResource、@Bean"></a>3.3 @PropertySource、@ImportResource、@Bean</h3><p><strong>@PropertySource</strong>：加载指定的配置文件</p>
<p><strong>@ConfigurationProperties</strong>：默认从全局文件中获取值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PropertySource</span>(value = &#123;<span class="string">"classpath:student.properties"</span>&#125;)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"student"</span>)</span><br><span class="line"><span class="meta">@Validated</span></span><br></pre></td></tr></table></figure>

<p><strong>classpath</strong>为<strong>resources</strong>文件夹路径</p>
<p><strong>@ImportResource</strong>：导入Spring的配置文件，让配置文件里面的内容生效</p>
<p>Spring Boot不会自动识别Spring的配置文件，不能自动识别</p>
<p>想让Spring的配置生效，<strong>@ImportResource</strong>标注在配置类上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ImportResource</span>(locations = &#123;<span class="string">"classpath:bean.xml"</span>&#125;)</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(HelloWorldApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Spring Boot推荐给容器中加组件的方式</p>
<ul>
<li><p>配置类就相当于以前的配置文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">helloService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HelloService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@Bean将方法的返回值添加到容器中，默认ID为方法名</p>
</li>
</ul>
<h2 id="4、配置文件占位符"><a href="#4、配置文件占位符" class="headerlink" title="4、配置文件占位符"></a>4、配置文件占位符</h2><ul>
<li><p>随机数</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">$&#123;random.value&#125;、$&#123;random.int&#125;、$&#123;random.long&#125;</span></span><br><span class="line"><span class="attr">$&#123;random.int(10)&#125;、$&#123;random.int[1024,65536]&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>占位符获取之前配置的值，如果没有就作为字符串，还可指定默认:默认值</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">student.name</span>=<span class="string">张三$&#123;random.value&#125;</span></span><br><span class="line"><span class="meta">student.sex</span>=<span class="string">$&#123;student.name&#125;</span></span><br><span class="line"><span class="meta">student.age</span>=<span class="string">$&#123;random.int&#125;</span></span><br><span class="line"><span class="meta">student.cadre</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">student.course</span>=<span class="string">数学,英语</span></span><br><span class="line"><span class="meta">student.score.sx</span>=<span class="string">120</span></span><br><span class="line"><span class="meta">student.score.yy</span>=<span class="string">120</span></span><br><span class="line"><span class="meta">student.card.number</span>=<span class="string">$&#123;student.happy:happy&#125;</span></span><br><span class="line"><span class="meta">student.card.money</span>=<span class="string">20000</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="5、Profile"><a href="#5、Profile" class="headerlink" title="5、Profile"></a>5、Profile</h2><h3 id="5-1-多Profile文件"><a href="#5-1-多Profile文件" class="headerlink" title="5.1 多Profile文件"></a>5.1 多Profile文件</h3><p>主配置文件编写的时候，文件名可以是application-{profile}.properties/yml</p>
<p>默认使用application.properties的配置</p>
<h3 id="5-2-yml多文档块模式"><a href="#5-2-yml多文档块模式" class="headerlink" title="5.2 yml多文档块模式"></a>5.2 yml多文档块模式</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">pro</span></span><br></pre></td></tr></table></figure>



<h3 id="5-3-激活指定的profile"><a href="#5-3-激活指定的profile" class="headerlink" title="5.3 激活指定的profile"></a>5.3 激活指定的profile</h3><ul>
<li><p>application-dev.properties，在全局配置文件中写入</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.profiles.active</span>=<span class="string">dev</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>命令行方式</p>
<p>–spring.profiles.active=dev</p>
<img src="/spring-boot-config/%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%85%8D%E7%BD%AE.jpg" class="">
</li>
<li><p>虚拟机参数</p>
<p>-Dspring.profiles.active=dev</p>
<img src="/spring-boot-config/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE.jpg" class="">

</li>
</ul>
<h2 id="6、配置文件加载位置"><a href="#6、配置文件加载位置" class="headerlink" title="6、配置文件加载位置"></a>6、配置文件加载位置</h2><p>Spring Boot会扫描以下位置的application.properties或者yml文件作为Spring Boot的默认配置文件</p>
<ol>
<li><p>file:./config/</p>
<p>当前项目文件夹下的config文件夹里面</p>
</li>
<li><p>file:./</p>
<p>项目文件夹路径下</p>
</li>
<li><p>classpath:/config/</p>
<p>类路径下的config文件夹里</p>
</li>
<li><p>classpath:/</p>
<p>类路径的根目录</p>
</li>
</ol>
<p>以上按优先级从高到低的顺序，所有文件都会被加载，高优先会覆盖低优先</p>
<p>也可通过配置spring.config.location来改变默认配置，运维时使用</p>
<h2 id="7、外部配置加载位置"><a href="#7、外部配置加载位置" class="headerlink" title="7、外部配置加载位置"></a>7、外部配置加载位置</h2><p>Spring Boot支持多种外部配置方式</p>
<ol>
<li><strong>命令行参数</strong></li>
<li>来自java:comp/env的JNDI属性</li>
<li>Java系统属性(System.getProperties())</li>
<li>操作系统环境变量</li>
<li>RandomValuePropertySource配置的random.*属性值</li>
<li><strong>jar包外部的application-{profile}.properties或yml(带spring.profile)配置文件</strong></li>
<li><strong>jar包内部的application-{profile}.properties或yml(带spring.profile)配置文件</strong></li>
<li><strong>jar包外部的application.properties或yml(不带spring.profile)配置文件</strong></li>
<li><strong>jar包内部的application.properties或yml(不带spring.profile)配置文件</strong></li>
<li>@Configuration注解类上的@PropertySource</li>
<li>通过SpringApplication.setDefaultProperties指定的默认属性</li>
</ol>
<p><a href="https://docs.spring.io/spring-boot/docs/2.2.2.RELEASE/reference/htmlsingle/#boot-features-external-config" target="_blank" rel="noopener">官方文档</a></p>
<h2 id="8、自动配置原理"><a href="#8、自动配置原理" class="headerlink" title="8、自动配置原理"></a>8、自动配置原理</h2><p>配置文件可以配置哪些属性，可以参照<a href="https://docs.spring.io/spring-boot/docs/2.2.2.RELEASE/reference/htmlsingle/#common-application-properties" target="_blank" rel="noopener">官方文档</a></p>
<p><strong>自动配置原理</strong></p>
<ol>
<li><p>Spring Boot启动时加载了主配置类，开启了自动配置功能<strong>@EnableAutoConfiguration</strong>，然后用<strong>AutoConfigurationImportSelector</strong>来给容器中导入组件，详细可以查看<strong>selectImports</strong>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.isEnabled(annotationMetadata)) &#123;</span><br><span class="line">        <span class="keyword">return</span> NO_IMPORTS;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        AutoConfigurationMetadata autoConfigurationMetadata = AutoConfigurationMetadataLoader.loadMetadata(<span class="keyword">this</span>.beanClassLoader);</span><br><span class="line">        AutoConfigurationImportSelector.AutoConfigurationEntry autoConfigurationEntry = <span class="keyword">this</span>.getAutoConfigurationEntry(autoConfigurationMetadata, annotationMetadata); <span class="comment">//上一行的getAutoConfigurationEntry对应下面方法</span></span><br><span class="line">        <span class="keyword">return</span> StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> AutoConfigurationImportSelector.<span class="function">AutoConfigurationEntry <span class="title">getAutoConfigurationEntry</span><span class="params">(AutoConfigurationMetadata autoConfigurationMetadata, AnnotationMetadata annotationMetadata)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.isEnabled(annotationMetadata)) &#123;</span><br><span class="line">        <span class="keyword">return</span> EMPTY_ENTRY;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        AnnotationAttributes attributes = <span class="keyword">this</span>.getAttributes(annotationMetadata);</span><br><span class="line">        List&lt;String&gt; configurations = <span class="keyword">this</span>.getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class="line">        configurations = <span class="keyword">this</span>.removeDuplicates(configurations);</span><br><span class="line">        Set&lt;String&gt; exclusions = <span class="keyword">this</span>.getExclusions(annotationMetadata, attributes);</span><br><span class="line">        <span class="keyword">this</span>.checkExcludedClasses(configurations, exclusions);</span><br><span class="line">        configurations.removeAll(exclusions);</span><br><span class="line">        configurations = <span class="keyword">this</span>.filter(configurations, autoConfigurationMetadata);</span><br><span class="line">        <span class="keyword">this</span>.fireAutoConfigurationImportEvents(configurations, exclusions);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AutoConfigurationImportSelector.AutoConfigurationEntry(configurations, exclusions);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们从中提取出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//selectImports里的代码</span></span><br><span class="line">AutoConfigurationImportSelector.AutoConfigurationEntry autoConfigurationEntry = <span class="keyword">this</span>.getAutoConfigurationEntry(autoConfigurationMetadata, annotationMetadata);</span><br><span class="line"></span><br><span class="line"><span class="comment">//getAutoConfigurationEntry里的代码</span></span><br><span class="line">List&lt;String&gt; configurations = <span class="keyword">this</span>.getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class="line"></span><br><span class="line"><span class="comment">//getCandidateConfigurations里的代码</span></span><br><span class="line">List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(<span class="keyword">this</span>.getSpringFactoriesLoaderFactoryClass(), <span class="keyword">this</span>.getBeanClassLoader());</span><br><span class="line"></span><br><span class="line"><span class="comment">//loadFactoryNames函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">loadFactoryNames</span><span class="params">(Class&lt;?&gt; factoryType, @Nullable ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">    String factoryTypeName = factoryType.getName();</span><br><span class="line">    <span class="keyword">return</span> (List)loadSpringFactories(classLoader).getOrDefault(factoryTypeName, Collections.emptyList());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//loadSpringFactories的代码</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(<span class="meta">@Nullable</span> ClassLoader classLoader) &#123;</span><br><span class="line">    MultiValueMap&lt;String, String&gt; result = (MultiValueMap)cache.get(classLoader);</span><br><span class="line">    <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Enumeration&lt;URL&gt; urls = classLoader != <span class="keyword">null</span> ? classLoader.getResources(<span class="string">"META-INF/spring.factories"</span>) : ClassLoader.getSystemResources(<span class="string">"META-INF/spring.factories"</span>);</span><br><span class="line">            LinkedMultiValueMap result = <span class="keyword">new</span> LinkedMultiValueMap();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(urls.hasMoreElements()) &#123;</span><br><span class="line">                URL url = (URL)urls.nextElement();</span><br><span class="line">                UrlResource resource = <span class="keyword">new</span> UrlResource(url);</span><br><span class="line">                Properties properties = PropertiesLoaderUtils.loadProperties(resource);</span><br><span class="line">                Iterator var6 = properties.entrySet().iterator();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span>(var6.hasNext()) &#123;</span><br><span class="line">                    Entry&lt;?, ?&gt; entry = (Entry)var6.next();</span><br><span class="line">                    String factoryTypeName = ((String)entry.getKey()).trim();</span><br><span class="line">                    String[] var9 = StringUtils.commaDelimitedListToStringArray((String)entry.getValue());</span><br><span class="line">                    <span class="keyword">int</span> var10 = var9.length;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> var11 = <span class="number">0</span>; var11 &lt; var10; ++var11) &#123;</span><br><span class="line">                        String factoryImplementationName = var9[var11];</span><br><span class="line">                        result.add(factoryTypeName, factoryImplementationName.trim());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            cache.put(classLoader, result);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var13) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unable to load factories from location [META-INF/spring.factories]"</span>, var13);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//扫描所有类路径的META-INF/spring.factories文件，把扫描到的这些文件的url得到，然后包装成Properties，然后从properties里获取一些值最后加在result里，这个result就是我们要交给容器中的所有组件，函数的参数classLoader就是从loadFactoryNames里传来的，loadFactoryNames的参数往上回溯就是上面提到的getCandidateConfigurations里的代码，再看getCandidateConfigurations的代码，查看getSpringFactoriesLoaderFactoryClass，可以看到</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//意思就是从properties中获取到EnableAutoConfiguration.class类名对应的值，然后把它们添加到容器中</span></span><br><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; getSpringFactoriesLoaderFactoryClass() &#123;</span><br><span class="line">    <span class="keyword">return</span> EnableAutoConfiguration<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//然后点开一个jar包(有的有，有的没有)，打开META-INF下面的spring.factories，发现了org.springframework.boot.autoconfigure.EnableAutoConfiguration=\......(已省略)这段代码，相当于把我们省略的这部分代码加到了容器中</span></span><br></pre></td></tr></table></figure>

<p><strong>总结一下就是，将类路径下META-INF/spring.factories里面配置的EnableAutoConfiguration的值加到了容器中，每一个省略代码里的xxxxAutoConfiguration类都加入到容器中，用它们来做自动配置</strong></p>
</li>
<li><p>每一个<strong>xxxxAutoConfiguration</strong>进行自动配置功能，我们以一个为例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  <span class="comment">//表示这是一个配置类，和以前的配置文件一样，也可以给容器添加组件</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123;SqlSessionFactory<span class="class">.<span class="keyword">class</span>, <span class="title">SqlSessionFactoryBean</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class">//<span class="title">spring</span>底层@<span class="title">Conditional</span>注解，根据不同条件，如果满足条件配置类才会生效，判断<span class="title">jar</span>包里有没有这些类</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnSingleCandidate</span>(<span class="title">DataSource</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class">//<span class="title">DataSource</span>.<span class="title">class</span>已经存在应用上下文时才会加载</span></span><br><span class="line"><span class="class">@<span class="title">EnableConfigurationProperties</span>(</span>&#123;MybatisProperties<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">//启用<span class="title">MybatisProperties</span>的<span class="title">ConfigurationProperties</span>功能，并放入<span class="title">ioc</span>容器</span></span><br><span class="line"><span class="class">@<span class="title">AutoConfigureAfter</span>(</span>&#123;DataSourceAutoConfiguration<span class="class">.<span class="keyword">class</span>, <span class="title">MybatisLanguageDriverAutoConfiguration</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class">//@<span class="title">AutoConfigureAfter</span>是加载配置的类后再加载当前类</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MybatisAutoConfiguration</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line">    <span class="comment">//properties这个properties已经与配置文件映射了，应为上面的@EnableConfigurationProperties</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MybatisProperties properties;</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">//这有一个有参构造器，参数的值就会从容器中拿</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MybatisAutoConfiguration</span><span class="params">(MybatisProperties properties, ObjectProvider&lt;Interceptor[]&gt; interceptorsProvider, ObjectProvider&lt;TypeHandler[]&gt; typeHandlersProvider, ObjectProvider&lt;LanguageDriver[]&gt; languageDriversProvider, ResourceLoader resourceLoader, ObjectProvider&lt;DatabaseIdProvider&gt; databaseIdProvider, ObjectProvider&lt;List&lt;ConfigurationCustomizer&gt;&gt; configurationCustomizersProvider)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.properties = properties;</span><br><span class="line">        <span class="keyword">this</span>.interceptors = (Interceptor[])interceptorsProvider.getIfAvailable();</span><br><span class="line">        <span class="keyword">this</span>.typeHandlers = (TypeHandler[])typeHandlersProvider.getIfAvailable();</span><br><span class="line">        <span class="keyword">this</span>.languageDrivers = (LanguageDriver[])languageDriversProvider.getIfAvailable();</span><br><span class="line">        <span class="keyword">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">        <span class="keyword">this</span>.databaseIdProvider = (DatabaseIdProvider)databaseIdProvider.getIfAvailable();</span><br><span class="line">        <span class="keyword">this</span>.configurationCustomizers = (List)configurationCustomizersProvider.getIfAvailable();</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">    <span class="meta">@Bean</span>  <span class="comment">//如果生效，给容器中添加一个组件，组件的某些值需要从properties中获取</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">sqlSessionFactory</span><span class="params">(DataSource dataSource)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SqlSessionFactoryBean factory = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        factory.setDataSource(dataSource);</span><br><span class="line">        factory.setVfs(SpringBootVFS<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(<span class="keyword">this</span>.properties.getConfigLocation())) &#123;</span><br><span class="line">            factory.setConfigLocation(<span class="keyword">this</span>.resourceLoader.getResource(<span class="keyword">this</span>.properties.getConfigLocation()));</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(</span><br><span class="line">    prefix = <span class="string">"mybatis"</span></span><br><span class="line">)  <span class="comment">//从配置文件中获取指定的值，所有在配置类中能配置的属性都在xxxProperties在封装着</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String MYBATIS_PREFIX = <span class="string">"mybatis"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ResourcePatternResolver resourceResolver = <span class="keyword">new</span> PathMatchingResourcePatternResolver();</span><br><span class="line">    <span class="keyword">private</span> String configLocation;</span><br><span class="line">    <span class="keyword">private</span> String[] mapperLocations;</span><br><span class="line">    <span class="keyword">private</span> String typeAliasesPackage;</span><br><span class="line">    <span class="keyword">private</span> Class&lt;?&gt; typeAliasesSuperType;</span><br><span class="line">    <span class="keyword">private</span> String typeHandlersPackage;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> checkConfigLocation = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> ExecutorType executorType;</span><br><span class="line">    <span class="keyword">private</span> Class&lt;? extends LanguageDriver&gt; defaultScriptingLanguageDriver;</span><br><span class="line">    <span class="keyword">private</span> Properties configurationProperties;</span><br><span class="line">    <span class="meta">@NestedConfigurationProperty</span></span><br><span class="line">    <span class="keyword">private</span> Configuration configuration;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MybatisProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>总结一下就是根据当前不同的条件，决定这个配置类是否生效，如果生效@Bean给容器中添加组件，这些组件的属性是从对应的properties类中获取的，类里的每一个属性又是和配置文件联系起来的</p>
</li>
</ol>
<p><strong>再次总结：</strong></p>
<ul>
<li>Spring Boot启动会加载大量的自动配置类</li>
<li>我们需要的功能有没有Spring Boot写好的自动配置类，再来看类里配置了哪些组件，如果有我们要用的组件，就不需要再来配置了</li>
<li>给容器中自动配置类添加组件的时候，会从properties类中获取属性，这些属性我们就可以在配置文件中指定这些属性的值</li>
</ul>
<h2 id="9、-Conditional、自动配置报告"><a href="#9、-Conditional、自动配置报告" class="headerlink" title="9、@Conditional、自动配置报告"></a>9、@Conditional、自动配置报告</h2><p><strong>@Conditional：</strong>必须是@Conditional指定的条件成立，才给容器中添加组件，配置类里面的所有内容才生效</p>
<table>
<thead>
<tr>
<th>@Conditional扩展注解</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>@ConditionalOnJava</td>
<td>系统的Java版本是否符合需求</td>
</tr>
<tr>
<td>@ConditionalBean</td>
<td>容器中存在指定的Bean</td>
</tr>
<tr>
<td>@ConditionalOnMissingBean</td>
<td>容器中不存在指定的Bean</td>
</tr>
<tr>
<td>@ConditionalOnExpression</td>
<td>满足SpEL表达式锁定</td>
</tr>
<tr>
<td>@ConditionalOnClass</td>
<td>系统中有指定的类</td>
</tr>
<tr>
<td>@ConditionalOnMissingClass</td>
<td>系统中没有指定的类</td>
</tr>
<tr>
<td>@ConditionalOnSingleCandidate</td>
<td>容器中只有一个指定的Bean，或者是首选Bean</td>
</tr>
<tr>
<td>@ConditionalOnProperty</td>
<td>系统中的指定属性是否有指定值</td>
</tr>
<tr>
<td>@ConditionalOnResource</td>
<td>类路径下是否有指定的资源文件</td>
</tr>
<tr>
<td>@ConditionalOnWebApplication</td>
<td>当前是Web环境</td>
</tr>
<tr>
<td>@ConditionalOnNotWebApplication</td>
<td>当前不是Web环境</td>
</tr>
<tr>
<td>@ConditionalOnJndi</td>
<td>JNDI存在指定项</td>
</tr>
</tbody></table>
<p>自动配置类必须在一定条件下才能生效，我们必须知道哪些生效，我们可以在<strong>application.properties</strong>中写入<strong>debug=true</strong>，意思是开启Spring Boot的debug模式，可以看到自动配置报告，<strong>positive matches：</strong>自动配置类启用哪些</p>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title>spring boot笔记--入门</title>
    <url>/spring-boot-start/</url>
    <content><![CDATA[<h1 id="一、Spring-Boot入门"><a href="#一、Spring-Boot入门" class="headerlink" title="一、Spring Boot入门"></a>一、Spring Boot入门</h1><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p><a href="https://spring.io/" target="_blank" rel="noopener">Spring官网</a></p>
<p>Spring boot来简化Spring应用开发的一个框架，整个Spring技术栈的一个大整合，约定大于配置，去繁从简，just run就能创立一个独立的，产品级别的应用</p>
<p><strong>背景：</strong> J2EE笨重的开发、配置繁多，复杂的部署流程、第三方技术集成压力大</p>
<a id="more"></a>

<p><strong>解决：</strong></p>
<ul>
<li>Spring Boot –&gt; J2EE一站式解决方案</li>
<li>Spring Cloud –&gt; 分布式整体解决方案</li>
</ul>
<p><strong>优点：</strong></p>
<ul>
<li>快速创建独立运行的Spring项目以及主流框架集成</li>
<li>使用嵌入式的Servlet容器，应用无需打成WAR包</li>
<li>starters自动依赖和版本控制</li>
<li>大量的自动配置，简化开发，也可修改默认值</li>
<li>无需配置XML，无代码生成，开箱即用</li>
<li>准生产环境的运行时应用监控</li>
<li>与云计算的天然集成</li>
</ul>
<p><strong>缺点：</strong> 易学难精</p>
<h2 id="2、微服务"><a href="#2、微服务" class="headerlink" title="2、微服务"></a>2、微服务</h2><p>2014年，Martin Fowler写了一篇文章，微服务是一种架构风格，一个应用应该是一组小型服务，可以通过HTTP进行通信。每一个功能元素都是可独立替换和升级的单元。</p>
<p>Spring Boot可以快速构建一个应用，Spring Cloud进行网状互连互调，Spring Cloud Data Flow在分布式中进行流式计算和批处理</p>
<img src="/spring-boot-start/spring%E6%B5%81%E7%A8%8B.jpg" class="" title="Spring项目流程">

<hr>
<blockquote><p>In short, the microservice architectural style is an approach to developing a single application as a suite of small services, each running in its own process and communicating with lightweight mechanisms, often an HTTP resource API. These services are built around business capabilities and independently deployable by fully automated deployment machinery. There is a bare minimum of centralized management of these services, which may be written in different programming languages and use different data storage technologies.</p>
<footer><strong>James Lewis and Martin Fowler (2014)</strong><cite><a href="https://martinfowler.com/microservices" target="_blank" rel="noopener">What are Microservices?</a></cite></footer></blockquote>

<hr>
<blockquote><p>简而言之，微服务架构风格是一种将单个应用程序开发为一组小服务的方法，每个小服务都在自己的进程中运行并与轻量级机制（通常是HTTP资源API）进行通信。 这些服务围绕业务功能构建，并且可以由全自动部署机制独立部署。 这些服务的集中管理几乎没有，可以用不同的编程语言编写并使用不同的数据存储技术。</p>
<footer><strong>James Lewis and Martin Fowler (2014)</strong><cite><a href="https://translate.google.cn/" target="_blank" rel="noopener">谷歌翻译</a></cite></footer></blockquote>



<h2 id="3、Hello-World"><a href="#3、Hello-World" class="headerlink" title="3、Hello World"></a>3、Hello World</h2><h3 id="3-1-快速创建一个Spring-Boot项目"><a href="#3-1-快速创建一个Spring-Boot项目" class="headerlink" title="3.1 快速创建一个Spring Boot项目"></a>3.1 快速创建一个Spring Boot项目</h3><ul>
<li><p>File–&gt;New–&gt;Project，选中Spring Initializr，默认点击next</p>
<img src="/spring-boot-start/springboot1.jpg" class="">
</li>
<li><p>填写Group、Artifact、Package，点击next</p>
<img src="/spring-boot-start/springboot2.jpg" class="">
</li>
<li><p>选择导入的模块，这里我们先只选Spring Web，点击next</p>
<img src="/spring-boot-start/springboot3.jpg" class="">
</li>
<li><p>填写Project name，点击Finish</p>
<img src="/spring-boot-start/springboot4.jpg" class="">
</li>
<li><p>在com.springboot.helloworld右键New Class，写入controller.HelloController，点击OK，在HelloController下写入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello Spring boot "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动主程序，在浏览器写入localhost:8080/hello即可成功</p>
</li>
<li><p>注意resources文件夹下</p>
<ul>
<li>static：保存所有的静态资源，如：js、css、images</li>
<li>templates：保存所有的模板界面</li>
<li>application.properties：Spring Boot的应用配置文件马可以修改一些默认设置</li>
</ul>
</li>
</ul>
<h3 id="3-2-POM文件"><a href="#3-2-POM文件" class="headerlink" title="3.2 POM文件"></a>3.2 POM文件</h3><h4 id="3-2-1-父项目"><a href="#3-2-1-父项目" class="headerlink" title="3.2.1 父项目"></a>3.2.1 父项目</h4><p>pom.xml文件开头引入父项目</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>按住<strong>Ctrl</strong>点击<strong>spring-boot-starter-parent</strong>，可以看到这个父项目还依赖一个父项目</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../../spring-boot-dependencies<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>再点击<strong>spring-boot-dependencies</strong>，可以看到定义了许多依赖的版本，他来管理<strong>Spring Boot</strong>里的所有依赖版本，以后我们导入依赖默认是不需要导入版本的(没有在<strong>dependencies</strong>里面的依赖自然需要声明版本号)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activemq.version</span>&gt;</span>5.15.11<span class="tag">&lt;/<span class="name">activemq.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">antlr2.version</span>&gt;</span>2.7.7<span class="tag">&lt;/<span class="name">antlr2.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appengine-sdk.version</span>&gt;</span>1.9.77<span class="tag">&lt;/<span class="name">appengine-sdk.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artemis.version</span>&gt;</span>2.10.1<span class="tag">&lt;/<span class="name">artemis.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aspectj.version</span>&gt;</span>1.9.5<span class="tag">&lt;/<span class="name">aspectj.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">assertj.version</span>&gt;</span>3.13.2<span class="tag">&lt;/<span class="name">assertj.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">atomikos.version</span>&gt;</span>4.0.6<span class="tag">&lt;/<span class="name">atomikos.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">awaitility.version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">awaitility.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bitronix.version</span>&gt;</span>2.1.4<span class="tag">&lt;/<span class="name">bitronix.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build-helper-maven-plugin.version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">build-helper-maven-plugin.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">byte-buddy.version</span>&gt;</span>1.10.4<span class="tag">&lt;/<span class="name">byte-buddy.version</span>&gt;</span></span><br><span class="line">    ......</span><br></pre></td></tr></table></figure>

<h4 id="3-2-2-导入的依赖"><a href="#3-2-2-导入的依赖" class="headerlink" title="3.2.2 导入的依赖"></a>3.2.2 导入的依赖</h4><p><strong>JAR</strong>包是有谁导入的，我们继续看<strong>pom.xml</strong>可以看到</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以看到<strong>spring-boot-starter-web</strong>与父项目的<strong>spring-boot-starter-parent</strong>有一个共有的<strong>spring-boot-starter</strong></p>
<p><strong>spring-boot-starter</strong>是Spring Boot<strong>场景启动器</strong></p>
<p>点击<strong>spring-boot-starter-web</strong>可以看到它也有一些依赖导入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span><span class="comment">&lt;!-- 依赖spring-boot-starter基础项目 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span><span class="comment">&lt;!-- 依赖json --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span><span class="comment">&lt;!-- 依赖tomcat --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span><span class="comment">&lt;!-- 依赖数据校验 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-el<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>帮我们导入了web模块正常运行所依赖的组件</p>
<p>Spring Boot将所有的场景功能都抽取出来，做成一个个starters(启动器)，只需要在项目里引入这些starter，相关场景的所有依赖都会导入进来。</p>
<h3 id="3-3-主程序类"><a href="#3-3-主程序类" class="headerlink" title="3.3 主程序类"></a>3.3 主程序类</h3><h4 id="3-3-1-注解"><a href="#3-3-1-注解" class="headerlink" title="3.3.1 注解"></a>3.3.1 注解</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>()</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldMainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(HelloWorldMainApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>@SpringBootApplication()</strong></li>
</ul>
<p>Spring Boot标注在某个类上说明这个类是Spring Boot的主配置类，Spring Boot就应该运行这个类的main方法来启动Spring Boot应用</p>
<p>我们点击它来查看，发现它是一个组合注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(</span><br><span class="line">    excludeFilters = &#123;<span class="meta">@Filter</span>(</span><br><span class="line">    type = FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;TypeExcludeFilter<span class="class">.<span class="keyword">class</span>&#125;</span></span><br><span class="line"><span class="class">), @<span class="title">Filter</span>(</span></span><br><span class="line"><span class="class">    <span class="title">type</span> </span>= FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;AutoConfigurationExcludeFilter<span class="class">.<span class="keyword">class</span>&#125;</span></span><br><span class="line"><span class="class">)&#125;</span></span><br><span class="line"><span class="class">)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">SpringBootApplication</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>@SpringBootConfiguration</strong></li>
</ul>
<p>Spring Boot配置，它标注在某个类上表示这个一个Spring Boot配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration &#123;</span><br></pre></td></tr></table></figure>

<p>点击<strong>@SpringBootConfiguration</strong>，可以看到<strong>@Configuration</strong>，这就是Spring最底层的一个注解，配置类上来标注这个注解。配置类——配置文件，配置类也是一个组件<strong>@Component</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Configuration &#123;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>@EnableAutoConfiguration</strong></li>
</ul>
<p>还可以看到一个<strong>@EnableAutoConfiguration</strong>，作用是开启自动配置功能，Spring Boot帮我们自动配置，我们可以点开查看</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;AutoConfigurationImportSelector<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableAutoConfiguration</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<p><strong>@AutoConfigurationPackage</strong>自动配置包</p>
<p>点开来看</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;Registrar<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">AutoConfigurationPackage</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<p><strong>@Import({Registrar.class})</strong>，<strong>@import</strong>：Spring的底层注解，给容器中导入一个组件，点击<strong>Registrar.class</strong>，查看这个类</p>
<p>可以看到下面这个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">    AutoConfigurationPackages.register(registry, (<span class="keyword">new</span> AutoConfigurationPackages.PackageImport(metadata)).getPackageName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们在<strong>AutoConfigurationPackages.register</strong>这一行加一个断点，并debug运行，可以发现<strong>metadata</strong>是我们注解的原信息<strong>@SpringBootApplication()</strong>，我们还可以拉动鼠标选中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">new</span> AutoConfigurationPackages.PackageImport(metadata)).getPackageName()</span><br></pre></td></tr></table></figure>

<p>点击右键选择<strong>Evaluate Expression</strong>，点击<strong>Evaluate</strong>按钮，可以看到result就等于我们的包名</p>
<p>所以<strong>@AutoConfigurationPackage</strong>就是将主配置类<strong>@SpringBootApplication()</strong>标注的类所在包及下面所有子包里面的所有组件扫描到容器中</p>
<p><strong>@EnableAutoConfiguration</strong>里还有一个注解</p>
<p><strong>@Import({AutoConfigurationImportSelector.class})</strong>，点进去查看</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br></pre></td></tr></table></figure>

<p>发现<strong>selectImports</strong>将所有需要导入的组件全类名的方式返回，这些组件就会被添加到容器中，我们通过debug可以发现导入的组件中有很多的自动配置类，就是给容器导入场景所需要的组件并配置好</p>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>入门</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客图片插入并上传GitHub的问题</title>
    <url>/hexo%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E6%8F%92%E5%85%A5%E5%B9%B6%E4%B8%8A%E4%BC%A0GitHub%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="hexo上传图片的问题"><a href="#hexo上传图片的问题" class="headerlink" title="hexo上传图片的问题"></a>hexo上传图片的问题</h1><p>由于要将hexo博客里的文件上传到GitHub，如何上传图片资源并且在GitHub实时显示出来。</p>
<p>首先设置<strong>_config.yml</strong>文件，将<strong>post-asset-folder</strong>字段设定为<strong>true</strong></p>
<p>然后可在生成md文档时在同目录下生成一个同名的文件夹</p>
<a id="more"></a>

<p>然后可以查找<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo文档</a>，在<em>目录</em>-<em>标签插件</em>-<em>引用资源</em>可以看到</p>
<img src="/hexo%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E6%8F%92%E5%85%A5%E5%B9%B6%E4%B8%8A%E4%BC%A0GitHub%E7%9A%84%E9%97%AE%E9%A2%98/%E5%BC%95%E7%94%A8%E5%9B%BE%E7%89%87.jpg" class="" title="hexo博客图片插入并上传GitHub的问题">

<p>代码示例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% asset_img 引用图片.jpg hexo博客图片插入并上传GitHub的问题 %&#125;</span><br></pre></td></tr></table></figure>

<p>之后上传到GitHub就可以显示图片了。</p>
]]></content>
  </entry>
  <entry>
    <title>first blog</title>
    <url>/first-blog/</url>
    <content><![CDATA[<p>##我的hexo博客</p>
<p>2019.12.15</p>
<hr>
<p>##测试</p>
<p>String boot</p>
]]></content>
  </entry>
</search>
